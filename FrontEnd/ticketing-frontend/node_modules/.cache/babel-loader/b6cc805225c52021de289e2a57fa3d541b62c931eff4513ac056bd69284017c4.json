{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import{conductCheck}from\"rc-tree/es/utils/conductUtil\";import*as React from'react';import{toPathKeys}from\"../utils/commonUtil\";export default function useValues(multiple,rawValues,getPathKeyEntities,getValueByKeyPath,getMissingValues){// Fill `rawValues` with checked conduction values\nreturn React.useMemo(function(){var _getMissingValues=getMissingValues(rawValues),_getMissingValues2=_slicedToArray(_getMissingValues,2),existValues=_getMissingValues2[0],missingValues=_getMissingValues2[1];if(!multiple||!rawValues.length){return[existValues,[],missingValues];}var keyPathValues=toPathKeys(existValues);var keyPathEntities=getPathKeyEntities();var _conductCheck=conductCheck(keyPathValues,true,keyPathEntities),checkedKeys=_conductCheck.checkedKeys,halfCheckedKeys=_conductCheck.halfCheckedKeys;// Convert key back to value cells\nreturn[getValueByKeyPath(checkedKeys),getValueByKeyPath(halfCheckedKeys),missingValues];},[multiple,rawValues,getPathKeyEntities,getValueByKeyPath,getMissingValues]);}","map":{"version":3,"names":["_slicedToArray","conductCheck","React","toPathKeys","useValues","multiple","rawValues","getPathKeyEntities","getValueByKeyPath","getMissingValues","useMemo","_getMissingValues","_getMissingValues2","existValues","missingValues","length","keyPathValues","keyPathEntities","_conductCheck","checkedKeys","halfCheckedKeys"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-cascader/es/hooks/useValues.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport * as React from 'react';\nimport { toPathKeys } from \"../utils/commonUtil\";\nexport default function useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues) {\n  // Fill `rawValues` with checked conduction values\n  return React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n      _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n      existValues = _getMissingValues2[0],\n      missingValues = _getMissingValues2[1];\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n      checkedKeys = _conductCheck.checkedKeys,\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    // Convert key back to value cells\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]);\n}"],"mappings":"AAAA,MAAO,CAAAA,cAAc,KAAM,0CAA0C,CACrE,OAASC,YAAY,KAAQ,8BAA8B,CAC3D,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,OAASC,UAAU,KAAQ,qBAAqB,CAChD,cAAe,SAAS,CAAAC,SAASA,CAACC,QAAQ,CAAEC,SAAS,CAAEC,kBAAkB,CAAEC,iBAAiB,CAAEC,gBAAgB,CAAE,CAC9G;AACA,MAAO,CAAAP,KAAK,CAACQ,OAAO,CAAC,UAAY,CAC/B,GAAI,CAAAC,iBAAiB,CAAGF,gBAAgB,CAACH,SAAS,CAAC,CACjDM,kBAAkB,CAAGZ,cAAc,CAACW,iBAAiB,CAAE,CAAC,CAAC,CACzDE,WAAW,CAAGD,kBAAkB,CAAC,CAAC,CAAC,CACnCE,aAAa,CAAGF,kBAAkB,CAAC,CAAC,CAAC,CACvC,GAAI,CAACP,QAAQ,EAAI,CAACC,SAAS,CAACS,MAAM,CAAE,CAClC,MAAO,CAACF,WAAW,CAAE,EAAE,CAAEC,aAAa,CAAC,CACzC,CACA,GAAI,CAAAE,aAAa,CAAGb,UAAU,CAACU,WAAW,CAAC,CAC3C,GAAI,CAAAI,eAAe,CAAGV,kBAAkB,CAAC,CAAC,CAC1C,GAAI,CAAAW,aAAa,CAAGjB,YAAY,CAACe,aAAa,CAAE,IAAI,CAAEC,eAAe,CAAC,CACpEE,WAAW,CAAGD,aAAa,CAACC,WAAW,CACvCC,eAAe,CAAGF,aAAa,CAACE,eAAe,CAEjD;AACA,MAAO,CAACZ,iBAAiB,CAACW,WAAW,CAAC,CAAEX,iBAAiB,CAACY,eAAe,CAAC,CAAEN,aAAa,CAAC,CAC5F,CAAC,CAAE,CAACT,QAAQ,CAAEC,SAAS,CAAEC,kBAAkB,CAAEC,iBAAiB,CAAEC,gBAAgB,CAAC,CAAC,CACpF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}