{"ast":null,"code":"var _s = $RefreshSig$();\nimport * as React from 'react';\nimport { convertChildrenToData } from \"../utils/legacyUtil\";\n\n/**\n * Parse `children` to `options` if `options` is not provided.\n * Then flatten the `options`.\n */\nvar useOptions = function useOptions(options, children, fieldNames, optionFilterProp, optionLabelProp) {\n  _s();\n  return React.useMemo(function () {\n    var mergedOptions = options;\n    var childrenAsData = !options;\n    if (childrenAsData) {\n      mergedOptions = convertChildrenToData(children);\n    }\n    var valueOptions = new Map();\n    var labelOptions = new Map();\n    var setLabelOptions = function setLabelOptions(labelOptionsMap, option, key) {\n      if (key && typeof key === 'string') {\n        labelOptionsMap.set(option[key], option);\n      }\n    };\n    var dig = function dig(optionList) {\n      var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // for loop to speed up collection speed\n      for (var i = 0; i < optionList.length; i += 1) {\n        var option = optionList[i];\n        if (!option[fieldNames.options] || isChildren) {\n          valueOptions.set(option[fieldNames.value], option);\n          setLabelOptions(labelOptions, option, fieldNames.label);\n          // https://github.com/ant-design/ant-design/issues/35304\n          setLabelOptions(labelOptions, option, optionFilterProp);\n          setLabelOptions(labelOptions, option, optionLabelProp);\n        } else {\n          dig(option[fieldNames.options], true);\n        }\n      }\n    };\n    dig(mergedOptions);\n    return {\n      options: mergedOptions,\n      valueOptions: valueOptions,\n      labelOptions: labelOptions\n    };\n  }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);\n};\n_s(useOptions, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\nexport default useOptions;","map":{"version":3,"names":["React","convertChildrenToData","useOptions","options","children","fieldNames","optionFilterProp","optionLabelProp","_s","useMemo","mergedOptions","childrenAsData","valueOptions","Map","labelOptions","setLabelOptions","labelOptionsMap","option","key","set","dig","optionList","isChildren","arguments","length","undefined","i","value","label"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-select/es/hooks/useOptions.js"],"sourcesContent":["import * as React from 'react';\nimport { convertChildrenToData } from \"../utils/legacyUtil\";\n\n/**\n * Parse `children` to `options` if `options` is not provided.\n * Then flatten the `options`.\n */\nvar useOptions = function useOptions(options, children, fieldNames, optionFilterProp, optionLabelProp) {\n  return React.useMemo(function () {\n    var mergedOptions = options;\n    var childrenAsData = !options;\n    if (childrenAsData) {\n      mergedOptions = convertChildrenToData(children);\n    }\n    var valueOptions = new Map();\n    var labelOptions = new Map();\n    var setLabelOptions = function setLabelOptions(labelOptionsMap, option, key) {\n      if (key && typeof key === 'string') {\n        labelOptionsMap.set(option[key], option);\n      }\n    };\n    var dig = function dig(optionList) {\n      var isChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      // for loop to speed up collection speed\n      for (var i = 0; i < optionList.length; i += 1) {\n        var option = optionList[i];\n        if (!option[fieldNames.options] || isChildren) {\n          valueOptions.set(option[fieldNames.value], option);\n          setLabelOptions(labelOptions, option, fieldNames.label);\n          // https://github.com/ant-design/ant-design/issues/35304\n          setLabelOptions(labelOptions, option, optionFilterProp);\n          setLabelOptions(labelOptions, option, optionLabelProp);\n        } else {\n          dig(option[fieldNames.options], true);\n        }\n      }\n    };\n    dig(mergedOptions);\n    return {\n      options: mergedOptions,\n      valueOptions: valueOptions,\n      labelOptions: labelOptions\n    };\n  }, [options, children, fieldNames, optionFilterProp, optionLabelProp]);\n};\nexport default useOptions;"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,qBAAqB,QAAQ,qBAAqB;;AAE3D;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAG,SAASA,UAAUA,CAACC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,EAAE;EAAAC,EAAA;EACrG,OAAOR,KAAK,CAACS,OAAO,CAAC,YAAY;IAC/B,IAAIC,aAAa,GAAGP,OAAO;IAC3B,IAAIQ,cAAc,GAAG,CAACR,OAAO;IAC7B,IAAIQ,cAAc,EAAE;MAClBD,aAAa,GAAGT,qBAAqB,CAACG,QAAQ,CAAC;IACjD;IACA,IAAIQ,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,IAAIC,YAAY,GAAG,IAAID,GAAG,CAAC,CAAC;IAC5B,IAAIE,eAAe,GAAG,SAASA,eAAeA,CAACC,eAAe,EAAEC,MAAM,EAAEC,GAAG,EAAE;MAC3E,IAAIA,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;QAClCF,eAAe,CAACG,GAAG,CAACF,MAAM,CAACC,GAAG,CAAC,EAAED,MAAM,CAAC;MAC1C;IACF,CAAC;IACD,IAAIG,GAAG,GAAG,SAASA,GAAGA,CAACC,UAAU,EAAE;MACjC,IAAIC,UAAU,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK;MAC1F;MACA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,UAAU,CAACG,MAAM,EAAEE,CAAC,IAAI,CAAC,EAAE;QAC7C,IAAIT,MAAM,GAAGI,UAAU,CAACK,CAAC,CAAC;QAC1B,IAAI,CAACT,MAAM,CAACZ,UAAU,CAACF,OAAO,CAAC,IAAImB,UAAU,EAAE;UAC7CV,YAAY,CAACO,GAAG,CAACF,MAAM,CAACZ,UAAU,CAACsB,KAAK,CAAC,EAAEV,MAAM,CAAC;UAClDF,eAAe,CAACD,YAAY,EAAEG,MAAM,EAAEZ,UAAU,CAACuB,KAAK,CAAC;UACvD;UACAb,eAAe,CAACD,YAAY,EAAEG,MAAM,EAAEX,gBAAgB,CAAC;UACvDS,eAAe,CAACD,YAAY,EAAEG,MAAM,EAAEV,eAAe,CAAC;QACxD,CAAC,MAAM;UACLa,GAAG,CAACH,MAAM,CAACZ,UAAU,CAACF,OAAO,CAAC,EAAE,IAAI,CAAC;QACvC;MACF;IACF,CAAC;IACDiB,GAAG,CAACV,aAAa,CAAC;IAClB,OAAO;MACLP,OAAO,EAAEO,aAAa;MACtBE,YAAY,EAAEA,YAAY;MAC1BE,YAAY,EAAEA;IAChB,CAAC;EACH,CAAC,EAAE,CAACX,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,gBAAgB,EAAEC,eAAe,CAAC,CAAC;AACxE,CAAC;AAACC,EAAA,CArCEN,UAAU;AAsCd,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}