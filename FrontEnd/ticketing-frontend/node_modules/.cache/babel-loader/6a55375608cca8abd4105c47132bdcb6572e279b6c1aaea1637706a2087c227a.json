{"ast":null,"code":"var _jsxFileName = \"/Users/jmmallon/Downloads/js/ticketproject/src/AdminPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Table, Button, Input, Checkbox, message } from 'antd';\nimport { saveAs } from 'file-saver'; // Import the file-saver library\nimport { toast } from 'react-toastify'; // Assuming you're using react-toastify for toast notifications\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminPage = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [sorting, setSorting] = useState({});\n  // const [sessionId, _] = useState(generateUniqueSessionId());\n  const [sessionId] = useState(generateUniqueSessionId());\n  const [showDoneItems, setShowDoneItems] = useState(true);\n\n  // State to track whether the toast is visible\n  console.log('Number1');\n  const isToastVisibleRef = useRef(false);\n  function showUpdatedDBToast(updateInfo) {\n    console.log(\"Recevived call\", updateInfo);\n    // Check if the update's session ID matches the current session's ID\n\n    console.log(\"updateInfo.sessionId\", updateInfo.sessionId);\n    console.log(\"sessionId\", sessionId);\n    console.log(\"isToastVisibleRef\", isToastVisibleRef);\n    if (isToastVisibleRef.current === false && updateInfo.sessionId !== sessionId) {\n      console.log(\"Session Id different\");\n      isToastVisibleRef.current = true; // Update the ref to true\n      console.log(\"isToastVisible: \", isToastVisibleRef);\n      const toastId = toast('Database has been updated. Click Here to reload. ', {\n        position: \"top-right\",\n        autoClose: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        onClick: () => window.location.reload() // Reload the page when the toast is clicked\n        // You can add a button to refresh the page\n      });\n\n      // Set up a callback to be called when the toast is dismissed\n      toast.onChange(() => {\n        if (!toast.isActive(toastId)) {\n          isToastVisibleRef.current = false;\n        }\n      });\n    }\n  }\n  useEffect(() => {\n    const currentTime = new Date();\n    console.log(\"TYLER:: time: \", currentTime);\n    // Fetch tickets data from the backend\n    fetch('http://' + window.location.hostname + ':8888/tickets').then(response => response.json()).then(data => {\n      console.log(data); // Log the fetched data\n      setTickets(data);\n    }).catch(error => console.error('Error fetching tickets:', error));\n\n    // Set up the SSE connection to listen for updates\n    const eventSource = new EventSource('http://' + window.location.hostname + ':8888/sse/tickets');\n    // Open a connection to the SSE endpoint\n\n    eventSource.addEventListener('update', event => {\n      try {\n        const updateInfo = JSON.parse(event.data);\n        // Handle updates and show the toast message\n        // You can customize the toast content, appearance, and behavior\n        showUpdatedDBToast(updateInfo);\n      } catch (error) {\n        console.error('Failed to parse JSON data:', error, 'Raw data:', event.data);\n        eventSource.close();\n      }\n    });\n    return () => {\n      eventSource.close(); // Close the SSE connection when the component unmounts\n    };\n  }, []);\n  function generateUniqueSessionId() {\n    const timestamp = new Date().getTime();\n    const randomPart = Math.random().toString(36).substr(2, 9);\n    var x = `session-${timestamp}-${randomPart}`;\n    console.log(\"generateUniqueSessionId\", x);\n    return `session-${timestamp}-${randomPart}`;\n  }\n  const handleSaveClick = ticketId => {\n    // Find the ticket to be saved from the tickets array\n    const ticketToSave = tickets.find(ticket => ticket.id === ticketId);\n\n    // Update the ticket data on the backend using the PUT request\n    fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Session-Id': sessionId // Include the session ID as a custom header\n      },\n      body: JSON.stringify(ticketToSave)\n    }).then(response => {\n      if (response.ok) {\n        message.success('Ticket saved successfully!'); // Show success toast message\n      } else {\n        message.error('Failed to save ticket. Please try again.'); // Show error toast message\n      }\n    }).catch(error => {\n      console.error('Error updating ticket:', error);\n      message.error('An error occurred while saving the ticket. Please try again.'); // Show error toast message\n    });\n  };\n  const handleDeleteClick = ticketId => {\n    // Delete the ticket from the backend using the DELETE request\n    fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Session-Id': sessionId // Include the session ID as a custom header\n      }\n    }).then(response => {\n      if (response.ok) {\n        // If the ticket was deleted successfully, remove it from the frontend state\n        setTickets(prevTickets => prevTickets.filter(ticket => ticket.id !== ticketId));\n      } else {\n        console.error('Error deleting ticket:', response.statusText);\n      }\n    }).catch(error => console.error('Error deleting ticket:', error));\n  };\n  const handleFieldChange = (ticketId, field, value) => {\n    // Update the field value of the ticket in the state\n    setTickets(prevTickets => prevTickets.map(ticket => ticket.id === ticketId ? {\n      ...ticket,\n      [field]: value\n    } : ticket));\n  };\n  const sortTickets = columnKey => {\n    const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\n    setSorting({\n      [columnKey]: order\n    });\n    const sortedTickets = [...tickets].sort((a, b) => {\n      const aValue = a[columnKey];\n      const bValue = b[columnKey];\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return order === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n      } else {\n        // Handle numeric sorting for other data types\n        return order === 'asc' ? aValue - bValue : bValue - aValue;\n      }\n    });\n    setTickets(sortedTickets);\n  };\n  const handleExportCsv = () => {\n    const csvData = tickets.map(ticket => {\n      return [ticket.id, ticket.firstName, ticket.lastName, ticket.scheduleAppointment === 1 ? \"Yes\" : \"No\", ticket.scheduleAppointmentTime ? getDateInPacTimeAsString(ticket.scheduleAppointmentTime) : \"N/A\", ticket.firstTimeVisitor === 1 ? \"Yes\" : \"No\", ticket.time ? getDateInPacTimeAsString(ticket.time) : \"N/A\", ticket.positionInLine, ticket.additionalNotes, ticket.done].join(',');\n    });\n    const csvContent = ['ID,First Name,Last Name,Schedule Appointment,Schedule Appointment Time,First Time Visitor, Sign In Time,Position in Line,Additional Notes,Done'].concat(csvData).join('\\n');\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8'\n    });\n    saveAs(blob, 'tickets.csv');\n  };\n  const sortTicketsByPosition = columnKey => {\n    const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\n    setSorting({\n      [columnKey]: order\n    });\n    const sortedTickets = [...tickets].sort((a, b) => {\n      const aValue = a[columnKey];\n      const bValue = b[columnKey];\n      // Compare numeric values directly\n      return order === 'asc' ? aValue - bValue : bValue - aValue;\n    });\n    setTickets(sortedTickets);\n  };\n  const handleSaveAllClick = () => {\n    // Keep track of the number of successful and failed saves\n    let successCount = 0;\n    let errorCount = 0;\n\n    // Function to handle individual save response\n    const handleSaveResponse = success => {\n      if (success) {\n        successCount += 1;\n      } else {\n        errorCount += 1;\n      }\n\n      // If we have handled all tickets, display the success or error message\n      if (successCount + errorCount === tickets.length) {\n        if (errorCount === 0) {\n          message.success('All changes were saved successfully!');\n        } else {\n          message.error(`${errorCount} tickets failed to save. Please try again.`);\n        }\n      }\n    };\n    tickets.forEach(ticket => {\n      // Find the ticket to be saved from the tickets array\n      const ticketToSave = tickets.find(t => t.id === ticket.id);\n\n      // Update the ticket data on the backend using the PUT request\n      fetch(`http://${window.location.hostname}:8888/tickets/${ticket.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Session-Id': sessionId // Include the session ID as a custom header\n        },\n        body: JSON.stringify(ticketToSave)\n      }).then(response => {\n        if (response.ok) {\n          handleSaveResponse(true);\n        } else {\n          handleSaveResponse(false);\n        }\n      }).catch(error => {\n        console.error('Error updating ticket:', error);\n        handleSaveResponse(false);\n      });\n    });\n  };\n  const handleToggleDoneClick = ticketId => {\n    // Find the ticket to be toggled from the tickets array\n    const ticketToToggle = tickets.find(ticket => ticket.id === ticketId);\n\n    // Toggle the \"done\" value\n    const updatedDoneValue = !ticketToToggle.done;\n    ticketToToggle.done = !ticketToToggle.done;\n    // Update the ticket's \"done\" status on the backend using the PUT request\n    fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Session-Id': sessionId // Include the session ID as a custom header\n      },\n      body: JSON.stringify(ticketToToggle) // Only send the \"done\" field in the update payload\n    }).then(response => {\n      if (response.ok) {\n        // Update the \"done\" value in the frontend state\n        handleFieldChange(ticketId, 'done', updatedDoneValue);\n        message.success('Ticket status updated successfully!'); // Show success toast message\n      } else {\n        message.error('Failed to update ticket status. Please try again.'); // Show error toast message\n      }\n    }).catch(error => {\n      console.error('Error updating ticket status:', error);\n      message.error('An error occurred while updating the ticket status. Please try again.'); // Show error toast message\n    });\n  };\n  const columns = [{\n    title: 'ID',\n    dataIndex: 'id',\n    key: 'id',\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('id')\n    })\n  }, {\n    title: 'First Name',\n    dataIndex: 'firstName',\n    key: 'firstName',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Input, {\n      style: styles.input,\n      value: record.firstName,\n      onChange: e => handleFieldChange(record.id, 'firstName', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('firstName')\n    })\n  }, {\n    title: 'Last Name',\n    dataIndex: 'lastName',\n    key: 'lastName',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Input, {\n      style: styles.input,\n      value: record.lastName,\n      onChange: e => handleFieldChange(record.id, 'lastName', e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('lastName')\n    })\n  }, {\n    title: 'Schedule Appointment',\n    dataIndex: 'scheduleAppointment',\n    key: 'scheduleAppointment',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Checkbox, {\n      checked: record.scheduleAppointment,\n      onChange: e => handleFieldChange(record.id, 'scheduleAppointment', e.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('scheduleAppointment')\n    })\n  }, {\n    title: 'First Time Visitor',\n    dataIndex: 'firstTimeVisitor',\n    key: 'firstTimeVisitor',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Checkbox, {\n      checked: record.firstTimeVisitor,\n      onChange: e => handleFieldChange(record.id, 'firstTimeVisitor', e.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('firstTimeVisitor')\n    })\n  }, {\n    title: 'Sign In Time',\n    dataIndex: 'time',\n    key: 'time',\n    render: (text, record) =>\n    /*#__PURE__*/\n    // <span>{record.time? getDateInPacTime(record.time + \"Z\") : \"N/A\"}</span>\n    _jsxDEV(\"span\", {\n      children: record.time ? getDateInPacTime(record.time) : \"N/A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('time')\n    })\n  }, {\n    title: 'Schedule Appointment Time',\n    dataIndex: 'scheduleAppointmentTime',\n    key: 'scheduleAppointmentTime',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(\"span\", {\n      children: record.scheduleAppointmentTime ? getDateInPacTime(record.scheduleAppointmentTime) : 'N/A'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('scheduleAppointmentTime')\n    })\n  }, {\n    title: 'Position in Line',\n    dataIndex: 'positionInLine',\n    key: 'positionInLine',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Input, {\n      style: {\n        width: '50px'\n      },\n      type: \"number\",\n      value: record.positionInLine,\n      onChange: e => handleFieldChange(record.id, 'positionInLine', parseInt(e.target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTicketsByPosition('positionInLine')\n    })\n  }, {\n    title: 'Additional Notes',\n    dataIndex: 'additionalNotes',\n    key: 'additionalNotes',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: record.additionalNotes,\n      onChange: e => handleFieldChange(record.id, 'additionalNotes', e.target.value),\n      style: {\n        width: '100%',\n        minHeight: 100\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('additionalNotes')\n    })\n  }, {\n    title: 'Done',\n    dataIndex: 'done',\n    key: 'done',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleToggleDoneClick(record.id),\n      style: {\n        backgroundColor: record.done ? 'green' : 'red',\n        color: 'white'\n      },\n      children: record.done ? 'Done' : 'Not Done'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 17\n    }, this),\n    onHeaderCell: () => ({\n      onClick: () => sortTickets('done')\n    })\n  }, {\n    title: 'Save',\n    key: 'save',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleSaveClick(record.id),\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 17\n    }, this)\n  }, {\n    title: 'Delete',\n    key: 'delete',\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => handleDeleteClick(record.id),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 17\n    }, this)\n  }];\n  const handleRefreshClick = () => {\n    console.log(\"refresh clicked\");\n\n    // Send a request to the backend with the \"RefreshToken\" header\n    //         fetch('http://' + window.location.hostname + ':8888/tickets')\n\n    fetch('http://' + window.location.hostname + ':8888/refresh', {\n      method: 'GET',\n      headers: {\n        'RefreshToken': 'refreshToken' // Replace with your actual refresh token\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(\"refresh Succes\");\n    }).catch(error => {\n      console.error('Error refreshing data:', error);\n    });\n  };\n  const getDateInPacTime = newDate => {\n    const dateObj = new Date(newDate);\n    const pacificDateTime = dateObj.toLocaleString('en-US', {\n      timeZone: 'America/Los_Angeles',\n      hour12: true\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: pacificDateTime\n    }, void 0, false);\n  };\n  const getDateInPacTimeAsString = newDate => {\n    const dateObj = new Date(newDate);\n    const pacificDateTime = dateObj.toLocaleString('en-US', {\n      timeZone: 'America/Los_Angeles',\n      hour12: true\n    });\n    return `\"${pacificDateTime.toString()}\"`.replace(/,/g, ' ');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: styles.title,\n      children: \"Ticketing System Administrator Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.buttonsTopLeft,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginRight: '15px'\n        },\n        type: \"primary\",\n        onClick: handleExportCsv,\n        children: \"Export Data As CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginRight: '15px'\n        },\n        type: \"primary\",\n        onClick: handleSaveAllClick,\n        children: \"Save All Changes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleRefreshClick,\n        children: \"Refresh Serving Customer Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: showDoneItems,\n          onChange: () => setShowDoneItems(!showDoneItems),\n          children: \"Show Done Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: tickets.filter(ticket => showDoneItems || !ticket.done),\n      columns: columns,\n      rowKey: \"id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 479,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminPage, \"V2mCfTmrssVqxyUlvxBW2VLwgCk=\");\n_c = AdminPage;\nconst styles = {\n  input: {\n    width: '200px'\n  },\n  container: {\n    padding: '90px'\n  },\n  title: {\n    textAlign: 'center'\n  },\n  buttonsTopLeft: {\n    position: 'absolute',\n    top: '30px',\n    // Adjust the top position\n    left: '30px' // Adjust the left position\n  }\n};\nexport default AdminPage;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Table","Button","Input","Checkbox","message","saveAs","toast","ToastContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminPage","_s","tickets","setTickets","sorting","setSorting","sessionId","generateUniqueSessionId","showDoneItems","setShowDoneItems","console","log","isToastVisibleRef","showUpdatedDBToast","updateInfo","current","toastId","position","autoClose","closeOnClick","pauseOnHover","draggable","progress","undefined","onClick","window","location","reload","onChange","isActive","currentTime","Date","fetch","hostname","then","response","json","data","catch","error","eventSource","EventSource","addEventListener","event","JSON","parse","close","timestamp","getTime","randomPart","Math","random","toString","substr","x","handleSaveClick","ticketId","ticketToSave","find","ticket","id","method","headers","body","stringify","ok","success","handleDeleteClick","prevTickets","filter","statusText","handleFieldChange","field","value","map","sortTickets","columnKey","order","sortedTickets","sort","a","b","aValue","bValue","localeCompare","handleExportCsv","csvData","firstName","lastName","scheduleAppointment","scheduleAppointmentTime","getDateInPacTimeAsString","firstTimeVisitor","time","positionInLine","additionalNotes","done","join","csvContent","concat","blob","Blob","type","sortTicketsByPosition","handleSaveAllClick","successCount","errorCount","handleSaveResponse","length","forEach","t","handleToggleDoneClick","ticketToToggle","updatedDoneValue","columns","title","dataIndex","key","onHeaderCell","render","text","record","style","styles","input","e","target","fileName","_jsxFileName","lineNumber","columnNumber","checked","children","getDateInPacTime","width","parseInt","minHeight","backgroundColor","color","handleRefreshClick","newDate","dateObj","pacificDateTime","toLocaleString","timeZone","hour12","replace","container","buttonsTopLeft","marginRight","marginTop","dataSource","rowKey","_c","padding","textAlign","top","left","$RefreshReg$"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/AdminPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Table, Button, Input, Checkbox, message } from 'antd';\nimport { saveAs } from 'file-saver'; // Import the file-saver library\nimport { toast } from 'react-toastify'; // Assuming you're using react-toastify for toast notifications\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AdminPage = () => {\n    const [tickets, setTickets] = useState([]);\n    const [sorting, setSorting] = useState({});\n    // const [sessionId, _] = useState(generateUniqueSessionId());\n    const [sessionId] = useState(generateUniqueSessionId());\n    const [showDoneItems, setShowDoneItems] = useState(true);\n\n    // State to track whether the toast is visible\nconsole.log('Number1');\n    const isToastVisibleRef = useRef(false);\n\n    function showUpdatedDBToast(updateInfo) {\n        console.log(\"Recevived call\", updateInfo)\n        // Check if the update's session ID matches the current session's ID\n\n        console.log(\"updateInfo.sessionId\", updateInfo.sessionId)\n        console.log(\"sessionId\", sessionId)\n        console.log(\"isToastVisibleRef\", isToastVisibleRef)\n        if (isToastVisibleRef.current === false && updateInfo.sessionId !== sessionId) {\n            console.log(\"Session Id different\")\n            isToastVisibleRef.current = true; // Update the ref to true\n            console.log(\"isToastVisible: \", isToastVisibleRef)\n            const toastId = toast('Database has been updated. Click Here to reload. ', {\n                position: \"top-right\",\n                autoClose: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                onClick: () => window.location.reload() // Reload the page when the toast is clicked\n                // You can add a button to refresh the page\n            });\n\n            // Set up a callback to be called when the toast is dismissed\n            toast.onChange(() => {\n                if (!toast.isActive(toastId)) {\n                    isToastVisibleRef.current = false;\n                }\n            });\n\n       }\n    }\n\n    useEffect(() => {\n        const currentTime = new Date();\n        console.log(\"TYLER:: time: \", currentTime)\n        // Fetch tickets data from the backend\n        fetch('http://' + window.location.hostname + ':8888/tickets')\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data); // Log the fetched data\n                setTickets(data);\n\n            })\n            .catch((error) => console.error('Error fetching tickets:', error));\n\n        // Set up the SSE connection to listen for updates\n        const eventSource = new EventSource('http://' + window.location.hostname + ':8888/sse/tickets');\n        // Open a connection to the SSE endpoint\n\n        eventSource.addEventListener('update', (event) => {\n\n            try {\n                const updateInfo = JSON.parse(event.data);\n                // Handle updates and show the toast message\n                // You can customize the toast content, appearance, and behavior\n                showUpdatedDBToast(updateInfo)\n            } catch (error) {\n                console.error('Failed to parse JSON data:', error, 'Raw data:', event.data);\n                eventSource.close();\n            }\n        });\n\n        return () => {\n            eventSource.close(); // Close the SSE connection when the component unmounts\n        };\n    }, []);\n\n    function generateUniqueSessionId() {\n        const timestamp = new Date().getTime();\n        const randomPart = Math.random().toString(36).substr(2, 9);\n        var x = `session-${timestamp}-${randomPart}`\n        console.log(\"generateUniqueSessionId\", x)\n        return `session-${timestamp}-${randomPart}`;\n    }\n\n    const handleSaveClick = (ticketId) => {\n        // Find the ticket to be saved from the tickets array\n        const ticketToSave = tickets.find((ticket) => ticket.id === ticketId);\n\n        // Update the ticket data on the backend using the PUT request\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Session-Id': sessionId // Include the session ID as a custom header\n            },\n            body: JSON.stringify(ticketToSave),\n        })\n            .then((response) => {\n                if (response.ok) {\n                    message.success('Ticket saved successfully!'); // Show success toast message\n                } else {\n                    message.error('Failed to save ticket. Please try again.'); // Show error toast message\n                }\n            })\n            .catch((error) => {\n                console.error('Error updating ticket:', error);\n                message.error('An error occurred while saving the ticket. Please try again.'); // Show error toast message\n            });\n    };\n\n    const handleDeleteClick = (ticketId) => {\n        // Delete the ticket from the backend using the DELETE request\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Session-Id': sessionId // Include the session ID as a custom header\n            },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    // If the ticket was deleted successfully, remove it from the frontend state\n                    setTickets((prevTickets) => prevTickets.filter((ticket) => ticket.id !== ticketId));\n                } else {\n                    console.error('Error deleting ticket:', response.statusText);\n                }\n            })\n            .catch((error) => console.error('Error deleting ticket:', error));\n    };\n\n    const handleFieldChange = (ticketId, field, value) => {\n        // Update the field value of the ticket in the state\n        setTickets((prevTickets) =>\n            prevTickets.map((ticket) =>\n                ticket.id === ticketId ? { ...ticket, [field]: value } : ticket\n            )\n        );\n    };\n\n    const sortTickets = (columnKey) => {\n        const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\n        setSorting({ [columnKey]: order });\n\n        const sortedTickets = [...tickets].sort((a, b) => {\n            const aValue = a[columnKey];\n            const bValue = b[columnKey];\n\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\n                return order === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n            } else {\n                // Handle numeric sorting for other data types\n                return order === 'asc' ? aValue - bValue : bValue - aValue;\n            }\n        });\n\n        setTickets(sortedTickets);\n    };\n\n    const handleExportCsv = () => {\n        const csvData = tickets.map((ticket) => {\n            return [\n                ticket.id,\n                ticket.firstName,\n                ticket.lastName,\n                ticket.scheduleAppointment === 1 ? \"Yes\": \"No\",\n                ticket.scheduleAppointmentTime ?  getDateInPacTimeAsString(ticket.scheduleAppointmentTime): \"N/A\",\n                ticket.firstTimeVisitor === 1 ? \"Yes\": \"No\",\n                ticket.time  ?  getDateInPacTimeAsString(ticket.time): \"N/A\",\n                ticket.positionInLine,\n                ticket.additionalNotes,\n                ticket.done,\n            ].join(',');\n        });\n\n        const csvContent = ['ID,First Name,Last Name,Schedule Appointment,Schedule Appointment Time,First Time Visitor, Sign In Time,Position in Line,Additional Notes,Done'].concat(csvData).join('\\n');\n\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n        saveAs(blob, 'tickets.csv');\n    };\n\n    const sortTicketsByPosition = (columnKey) => {\n        const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\n        setSorting({ [columnKey]: order });\n\n        const sortedTickets = [...tickets].sort((a, b) => {\n            const aValue = a[columnKey];\n            const bValue = b[columnKey];\n            // Compare numeric values directly\n            return order === 'asc' ? aValue - bValue : bValue - aValue;\n        });\n\n        setTickets(sortedTickets);\n    };\n\n    const handleSaveAllClick = () => {\n        // Keep track of the number of successful and failed saves\n        let successCount = 0;\n        let errorCount = 0;\n\n        // Function to handle individual save response\n        const handleSaveResponse = (success) => {\n            if (success) {\n                successCount += 1;\n            } else {\n                errorCount += 1;\n            }\n\n            // If we have handled all tickets, display the success or error message\n            if (successCount + errorCount === tickets.length) {\n                if (errorCount === 0) {\n                    message.success('All changes were saved successfully!');\n                } else {\n                    message.error(`${errorCount} tickets failed to save. Please try again.`);\n                }\n            }\n        };\n\n        tickets.forEach((ticket) => {\n            // Find the ticket to be saved from the tickets array\n            const ticketToSave = tickets.find((t) => t.id === ticket.id);\n\n            // Update the ticket data on the backend using the PUT request\n            fetch(`http://${window.location.hostname}:8888/tickets/${ticket.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Session-Id': sessionId // Include the session ID as a custom header\n                },\n                body: JSON.stringify(ticketToSave),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        handleSaveResponse(true);\n                    } else {\n                        handleSaveResponse(false);\n                    }\n                })\n                .catch((error) => {\n                    console.error('Error updating ticket:', error);\n                    handleSaveResponse(false);\n                });\n        });\n    };\n    const handleToggleDoneClick = (ticketId) => {\n        // Find the ticket to be toggled from the tickets array\n        const ticketToToggle = tickets.find((ticket) => ticket.id === ticketId);\n\n        // Toggle the \"done\" value\n        const updatedDoneValue = !ticketToToggle.done;\n        ticketToToggle.done = !ticketToToggle.done;\n        // Update the ticket's \"done\" status on the backend using the PUT request\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Session-Id': sessionId // Include the session ID as a custom header\n            },\n            body: JSON.stringify(ticketToToggle), // Only send the \"done\" field in the update payload\n        })\n            .then((response) => {\n                if (response.ok) {\n                    // Update the \"done\" value in the frontend state\n                    handleFieldChange(ticketId, 'done', updatedDoneValue);\n                    message.success('Ticket status updated successfully!'); // Show success toast message\n                } else {\n                    message.error('Failed to update ticket status. Please try again.'); // Show error toast message\n                }\n            })\n            .catch((error) => {\n                console.error('Error updating ticket status:', error);\n                message.error('An error occurred while updating the ticket status. Please try again.'); // Show error toast message\n            });\n    };\n\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id',\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('id'),\n            }),\n        },\n        {\n            title: 'First Name',\n            dataIndex: 'firstName',\n            key: 'firstName',\n            render: (text, record) => (\n                <Input \n                style={styles.input}\n                    value={record.firstName}\n                    onChange={(e) => handleFieldChange(record.id, 'firstName', e.target.value)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('firstName'),\n            }),\n        },\n        {\n            title: 'Last Name',\n            dataIndex: 'lastName',\n            key: 'lastName',\n            render: (text, record) => (\n                <Input\n                style={styles.input}\n                    value={record.lastName}\n                    onChange={(e) => handleFieldChange(record.id, 'lastName', e.target.value)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('lastName'),\n            }),\n        },\n        {\n            title: 'Schedule Appointment',\n            dataIndex: 'scheduleAppointment',\n            key: 'scheduleAppointment',\n            render: (text, record) => (\n                <Checkbox\n                    checked={record.scheduleAppointment}\n                    onChange={(e) => handleFieldChange(record.id, 'scheduleAppointment', e.target.checked)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('scheduleAppointment'),\n            }),\n        },\n        {\n            title: 'First Time Visitor',\n            dataIndex: 'firstTimeVisitor',\n            key: 'firstTimeVisitor',\n            render: (text, record) => (\n                <Checkbox\n                    checked={record.firstTimeVisitor}\n                    onChange={(e) => handleFieldChange(record.id, 'firstTimeVisitor', e.target.checked)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('firstTimeVisitor'),\n            }),\n        },\n        {\n            title: 'Sign In Time',\n            dataIndex: 'time',\n            key: 'time',\n            render: (text, record) => (\n                // <span>{record.time? getDateInPacTime(record.time + \"Z\") : \"N/A\"}</span>\n                <span>{record.time? getDateInPacTime(record.time) : \"N/A\"}</span>\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('time'),\n            }),\n        },\n        {\n            title: 'Schedule Appointment Time',\n            dataIndex: 'scheduleAppointmentTime',\n            key: 'scheduleAppointmentTime',\n            render: (text, record) => (\n                <span>\n                    {record.scheduleAppointmentTime\n                        ? getDateInPacTime(record.scheduleAppointmentTime)\n                        : 'N/A'}\n                </span>\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('scheduleAppointmentTime'),\n            }),\n        },\n        {\n            title: 'Position in Line',\n            dataIndex: 'positionInLine',\n            key: 'positionInLine',\n            render: (text, record) => (\n                <Input\n                style={{width: '50px'}}\n                    type=\"number\"\n                    value={record.positionInLine}\n                    onChange={(e) => handleFieldChange(record.id, 'positionInLine', parseInt(e.target.value))}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTicketsByPosition('positionInLine'),\n            }),\n        },\n        {\n            title: 'Additional Notes',\n            dataIndex: 'additionalNotes',\n            key: 'additionalNotes',\n            render: (text, record) => (\n                <textarea\n                    value={record.additionalNotes}\n                    onChange={(e) => handleFieldChange(record.id, 'additionalNotes', e.target.value)}\n                    style={{ width: '100%', minHeight: 100 }}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('additionalNotes'),\n            }),\n        },\n        {\n            title: 'Done',\n            dataIndex: 'done',\n            key: 'done',\n            render: (text, record) => (\n                <Button\n                    onClick={() => handleToggleDoneClick(record.id)}\n                    style={{\n                        backgroundColor: record.done ? 'green' : 'red',\n                        color: 'white',\n                    }}\n                >{record.done ? 'Done' : 'Not Done'}</Button>\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('done'),\n            }),\n        },\n        {\n            title: 'Save',\n            key: 'save',\n            render: (text, record) => (\n                <Button onClick={() => handleSaveClick(record.id)}>Save</Button>\n            ),\n        },\n        {\n            title: 'Delete',\n            key: 'delete',\n            render: (text, record) => (\n                <Button onClick={() => handleDeleteClick(record.id)}>Delete</Button>\n            ),\n        },\n    ];\n\n    const handleRefreshClick = () => {\n        console.log(\"refresh clicked\")\n\n        // Send a request to the backend with the \"RefreshToken\" header\n        //         fetch('http://' + window.location.hostname + ':8888/tickets')\n\n        fetch('http://' + window.location.hostname + ':8888/refresh', {\n            method: 'GET',\n            headers: {\n                'RefreshToken': 'refreshToken', // Replace with your actual refresh token\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"refresh Succes\")\n            })\n            .catch(error => {\n                console.error('Error refreshing data:', error);\n            });\n    };\n\n\n    const getDateInPacTime = (newDate) => {\n        const dateObj = new Date(newDate);\n        const pacificDateTime = dateObj.toLocaleString('en-US', { timeZone: 'America/Los_Angeles', hour12: true });\n\n        return <>{pacificDateTime}</>;\n    };\n\n    const getDateInPacTimeAsString = (newDate) => {\n        const dateObj = new Date(newDate);\n        const pacificDateTime = dateObj.toLocaleString('en-US', { timeZone: 'America/Los_Angeles', hour12: true });\n        return `\"${pacificDateTime.toString()}\"`.replace(/,/g, ' ');\n    };\n\n    return (\n        <div style={styles.container}>\n\n            <h2 style={styles.title}>Ticketing System Administrator Mode</h2>\n            <div style={styles.buttonsTopLeft}>\n                <Button style={{ marginRight: '15px' }} type=\"primary\" onClick={handleExportCsv}>Export Data As CSV</Button>\n                <Button style={{ marginRight: '15px' }} type=\"primary\" onClick={handleSaveAllClick}>Save All Changes</Button>\n                <Button type=\"primary\" onClick={handleRefreshClick}>Refresh Serving Customer Page</Button>\n\n                <div style={{ marginTop: '10px' }}>\n                    <Checkbox checked={showDoneItems} onChange={() => setShowDoneItems(!showDoneItems)}>\n                        Show Done Items\n                    </Checkbox>\n                </div>\n            </div>\n            <Table\n                dataSource={tickets.filter(ticket => (showDoneItems || !ticket.done))}\n                columns={columns}\n                rowKey=\"id\"\n            />\n            {/* {currentimeTest()} */}\n            <ToastContainer />\n        </div>\n    );\n};\n\nconst styles = {\n    input: {\n        width: '200px'\n    },\n    container: {\n        padding: '90px'\n    },\n    title: {\n        textAlign: 'center'\n    },\n    buttonsTopLeft: {\n        position: 'absolute',\n        top: '30px', // Adjust the top position\n        left: '30px', // Adjust the left position\n    },\n};\n\nexport default AdminPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}