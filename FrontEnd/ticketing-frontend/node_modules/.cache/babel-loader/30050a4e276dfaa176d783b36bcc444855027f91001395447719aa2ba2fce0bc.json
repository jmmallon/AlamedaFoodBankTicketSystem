{"ast":null,"code":"import{useMemo}from'react';import{devUseWarning}from'../../_util/warning';function getFilledItem(rowItem,rowRestCol,span){let clone=rowItem;let exceed=false;if(span===undefined||span>rowRestCol){clone=Object.assign(Object.assign({},rowItem),{span:rowRestCol});exceed=span!==undefined;}return[clone,exceed];}// Calculate the sum of span in a row\nfunction getCalcRows(rowItems,mergedColumn){const rows=[];let tmpRow=[];let rowRestCol=mergedColumn;let exceed=false;rowItems.filter(n=>n).forEach((rowItem,index)=>{const span=rowItem===null||rowItem===void 0?void 0:rowItem.span;const mergedSpan=span||1;// Additional handle last one\nif(index===rowItems.length-1){const[item,itemExceed]=getFilledItem(rowItem,rowRestCol,span);exceed=exceed||itemExceed;tmpRow.push(item);rows.push(tmpRow);return;}if(mergedSpan<rowRestCol){rowRestCol-=mergedSpan;tmpRow.push(rowItem);}else{const[item,itemExceed]=getFilledItem(rowItem,rowRestCol,mergedSpan);exceed=exceed||itemExceed;tmpRow.push(item);rows.push(tmpRow);rowRestCol=mergedColumn;tmpRow=[];}});return[rows,exceed];}const useRow=(mergedColumn,items)=>{const[rows,exceed]=useMemo(()=>getCalcRows(items,mergedColumn),[items,mergedColumn]);if(process.env.NODE_ENV!=='production'){const warning=devUseWarning('Descriptions');process.env.NODE_ENV!==\"production\"?warning(!exceed,'usage','Sum of column `span` in a line not match `column` of Descriptions.'):void 0;}return rows;};export default useRow;","map":{"version":3,"names":["useMemo","devUseWarning","getFilledItem","rowItem","rowRestCol","span","clone","exceed","undefined","Object","assign","getCalcRows","rowItems","mergedColumn","rows","tmpRow","filter","n","forEach","index","mergedSpan","length","item","itemExceed","push","useRow","items","process","env","NODE_ENV","warning"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/descriptions/hooks/useRow.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  let clone = rowItem;\n  let exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  const rows = [];\n  let tmpRow = [];\n  let rowRestCol = mergedColumn;\n  let exceed = false;\n  rowItems.filter(n => n).forEach((rowItem, index) => {\n    const span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    const mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, span);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      const [item, itemExceed] = getFilledItem(rowItem, rowRestCol, mergedSpan);\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nconst useRow = (mergedColumn, items) => {\n  const [rows, exceed] = useMemo(() => getCalcRows(items, mergedColumn), [items, mergedColumn]);\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}