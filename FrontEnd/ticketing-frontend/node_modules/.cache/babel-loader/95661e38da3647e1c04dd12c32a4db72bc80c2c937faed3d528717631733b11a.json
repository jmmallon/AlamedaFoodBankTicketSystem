{"ast":null,"code":"import{unit}from'@ant-design/cssinjs';import{getStyle as getCheckboxStyle}from'../../checkbox/style';import{genStyleHooks,mergeToken}from'../../theme/internal';import{genTreeStyle,initComponentToken}from'../../tree/style';// =============================== Base ===============================\nconst genBaseStyle=token=>{const{componentCls,treePrefixCls,colorBgElevated}=token;const treeCls=\".\".concat(treePrefixCls);return[// ======================================================\n// ==                     Dropdown                     ==\n// ======================================================\n{[\"\".concat(componentCls,\"-dropdown\")]:[{padding:\"\".concat(unit(token.paddingXS),\" \").concat(unit(token.calc(token.paddingXS).div(2).equal()))},// ====================== Tree ======================\ngenTreeStyle(treePrefixCls,mergeToken(token,{colorBgContainer:colorBgElevated})),{[treeCls]:{borderRadius:0,[\"\".concat(treeCls,\"-list-holder-inner\")]:{alignItems:'stretch',[\"\".concat(treeCls,\"-treenode\")]:{[\"\".concat(treeCls,\"-node-content-wrapper\")]:{flex:'auto'}}}}},// ==================== Checkbox ====================\ngetCheckboxStyle(\"\".concat(treePrefixCls,\"-checkbox\"),token),// ====================== RTL =======================\n{'&-rtl':{direction:'rtl',[\"\".concat(treeCls,\"-switcher\").concat(treeCls,\"-switcher_close\")]:{[\"\".concat(treeCls,\"-switcher-icon svg\")]:{transform:'rotate(90deg)'}}}}]}];};export const prepareComponentToken=initComponentToken;// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls,treePrefixCls,rootCls){return genStyleHooks('TreeSelect',token=>{const treeSelectToken=mergeToken(token,{treePrefixCls});return[genBaseStyle(treeSelectToken)];},initComponentToken)(prefixCls,rootCls);}","map":{"version":3,"names":["unit","getStyle","getCheckboxStyle","genStyleHooks","mergeToken","genTreeStyle","initComponentToken","genBaseStyle","token","componentCls","treePrefixCls","colorBgElevated","treeCls","concat","padding","paddingXS","calc","div","equal","colorBgContainer","borderRadius","alignItems","flex","direction","transform","prepareComponentToken","useTreeSelectStyle","prefixCls","rootCls","treeSelectToken"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/tree-select/style/index.js"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\nimport { getStyle as getCheckboxStyle } from '../../checkbox/style';\nimport { genStyleHooks, mergeToken } from '../../theme/internal';\nimport { genTreeStyle, initComponentToken } from '../../tree/style';\n// =============================== Base ===============================\nconst genBaseStyle = token => {\n  const {\n    componentCls,\n    treePrefixCls,\n    colorBgElevated\n  } = token;\n  const treeCls = `.${treePrefixCls}`;\n  return [\n  // ======================================================\n  // ==                     Dropdown                     ==\n  // ======================================================\n  {\n    [`${componentCls}-dropdown`]: [{\n      padding: `${unit(token.paddingXS)} ${unit(token.calc(token.paddingXS).div(2).equal())}`\n    },\n    // ====================== Tree ======================\n    genTreeStyle(treePrefixCls, mergeToken(token, {\n      colorBgContainer: colorBgElevated\n    })), {\n      [treeCls]: {\n        borderRadius: 0,\n        [`${treeCls}-list-holder-inner`]: {\n          alignItems: 'stretch',\n          [`${treeCls}-treenode`]: {\n            [`${treeCls}-node-content-wrapper`]: {\n              flex: 'auto'\n            }\n          }\n        }\n      }\n    },\n    // ==================== Checkbox ====================\n    getCheckboxStyle(`${treePrefixCls}-checkbox`, token),\n    // ====================== RTL =======================\n    {\n      '&-rtl': {\n        direction: 'rtl',\n        [`${treeCls}-switcher${treeCls}-switcher_close`]: {\n          [`${treeCls}-switcher-icon svg`]: {\n            transform: 'rotate(90deg)'\n          }\n        }\n      }\n    }]\n  }];\n};\nexport const prepareComponentToken = initComponentToken;\n// ============================== Export ==============================\nexport default function useTreeSelectStyle(prefixCls, treePrefixCls, rootCls) {\n  return genStyleHooks('TreeSelect', token => {\n    const treeSelectToken = mergeToken(token, {\n      treePrefixCls\n    });\n    return [genBaseStyle(treeSelectToken)];\n  }, initComponentToken)(prefixCls, rootCls);\n}"],"mappings":"AAAA,OAASA,IAAI,KAAQ,qBAAqB,CAC1C,OAASC,QAAQ,GAAI,CAAAC,gBAAgB,KAAQ,sBAAsB,CACnE,OAASC,aAAa,CAAEC,UAAU,KAAQ,sBAAsB,CAChE,OAASC,YAAY,CAAEC,kBAAkB,KAAQ,kBAAkB,CACnE;AACA,KAAM,CAAAC,YAAY,CAAGC,KAAK,EAAI,CAC5B,KAAM,CACJC,YAAY,CACZC,aAAa,CACbC,eACF,CAAC,CAAGH,KAAK,CACT,KAAM,CAAAI,OAAO,KAAAC,MAAA,CAAOH,aAAa,CAAE,CACnC,MAAO,CACP;AACA;AACA;AACA,CACE,IAAAG,MAAA,CAAIJ,YAAY,eAAc,CAAC,CAC7BK,OAAO,IAAAD,MAAA,CAAKb,IAAI,CAACQ,KAAK,CAACO,SAAS,CAAC,MAAAF,MAAA,CAAIb,IAAI,CAACQ,KAAK,CAACQ,IAAI,CAACR,KAAK,CAACO,SAAS,CAAC,CAACE,GAAG,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CACvF,CAAC,CACD;AACAb,YAAY,CAACK,aAAa,CAAEN,UAAU,CAACI,KAAK,CAAE,CAC5CW,gBAAgB,CAAER,eACpB,CAAC,CAAC,CAAC,CAAE,CACH,CAACC,OAAO,EAAG,CACTQ,YAAY,CAAE,CAAC,CACf,IAAAP,MAAA,CAAID,OAAO,wBAAuB,CAChCS,UAAU,CAAE,SAAS,CACrB,IAAAR,MAAA,CAAID,OAAO,eAAc,CACvB,IAAAC,MAAA,CAAID,OAAO,2BAA0B,CACnCU,IAAI,CAAE,MACR,CACF,CACF,CACF,CACF,CAAC,CACD;AACApB,gBAAgB,IAAAW,MAAA,CAAIH,aAAa,cAAaF,KAAK,CAAC,CACpD;AACA,CACE,OAAO,CAAE,CACPe,SAAS,CAAE,KAAK,CAChB,IAAAV,MAAA,CAAID,OAAO,cAAAC,MAAA,CAAYD,OAAO,qBAAoB,CAChD,IAAAC,MAAA,CAAID,OAAO,wBAAuB,CAChCY,SAAS,CAAE,eACb,CACF,CACF,CACF,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CACD,MAAO,MAAM,CAAAC,qBAAqB,CAAGnB,kBAAkB,CACvD;AACA,cAAe,SAAS,CAAAoB,kBAAkBA,CAACC,SAAS,CAAEjB,aAAa,CAAEkB,OAAO,CAAE,CAC5E,MAAO,CAAAzB,aAAa,CAAC,YAAY,CAAEK,KAAK,EAAI,CAC1C,KAAM,CAAAqB,eAAe,CAAGzB,UAAU,CAACI,KAAK,CAAE,CACxCE,aACF,CAAC,CAAC,CACF,MAAO,CAACH,YAAY,CAACsB,eAAe,CAAC,CAAC,CACxC,CAAC,CAAEvB,kBAAkB,CAAC,CAACqB,SAAS,CAAEC,OAAO,CAAC,CAC5C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}