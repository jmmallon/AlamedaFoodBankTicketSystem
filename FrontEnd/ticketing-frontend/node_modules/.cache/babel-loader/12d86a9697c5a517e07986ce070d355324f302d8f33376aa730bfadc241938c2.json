{"ast":null,"code":"const enableStatistic=process.env.NODE_ENV!=='production'||typeof CSSINJS_STATISTIC!=='undefined';let recording=true;/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */export function merge(){for(var _len=arguments.length,objs=new Array(_len),_key=0;_key<_len;_key++){objs[_key]=arguments[_key];}/* istanbul ignore next */if(!enableStatistic){return Object.assign.apply(Object,[{}].concat(objs));}recording=false;const ret={};objs.forEach(obj=>{const keys=Object.keys(obj);keys.forEach(key=>{Object.defineProperty(ret,key,{configurable:true,enumerable:true,get:()=>obj[key]});});});recording=true;return ret;}/** @internal Internal Usage. Not use in your production. */export const statistic={};/** @internal Internal Usage. Not use in your production. */ // eslint-disable-next-line camelcase\nexport const _statistic_build_={};/* istanbul ignore next */function noop(){}/** Statistic token usage case. Should use `merge` function if you do not want spread record. */const statisticToken=token=>{let tokenKeys;let proxy=token;let flush=noop;if(enableStatistic&&typeof Proxy!=='undefined'){tokenKeys=new Set();proxy=new Proxy(token,{get(obj,prop){if(recording){tokenKeys.add(prop);}return obj[prop];}});flush=(componentName,componentToken)=>{var _a;statistic[componentName]={global:Array.from(tokenKeys),component:Object.assign(Object.assign({},(_a=statistic[componentName])===null||_a===void 0?void 0:_a.component),componentToken)};};}return{token:proxy,keys:tokenKeys,flush};};export default statisticToken;","map":{"version":3,"names":["enableStatistic","process","env","NODE_ENV","CSSINJS_STATISTIC","recording","merge","_len","arguments","length","objs","Array","_key","Object","assign","apply","concat","ret","forEach","obj","keys","key","defineProperty","configurable","enumerable","get","statistic","_statistic_build_","noop","statisticToken","token","tokenKeys","proxy","flush","Proxy","Set","prop","add","componentName","componentToken","_a","global","from","component"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/theme/util/statistic.js"],"sourcesContent":["const enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nlet recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return Object.assign.apply(Object, [{}].concat(objs));\n  }\n  recording = false;\n  const ret = {};\n  objs.forEach(obj => {\n    const keys = Object.keys(obj);\n    keys.forEach(key => {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: () => obj[key]\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @internal Internal Usage. Not use in your production. */\nexport const statistic = {};\n/** @internal Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexport const _statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nconst statisticToken = token => {\n  let tokenKeys;\n  let proxy = token;\n  let flush = noop;\n  if (enableStatistic && typeof Proxy !== 'undefined') {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = (componentName, componentToken) => {\n      var _a;\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: Object.assign(Object.assign({}, (_a = statistic[componentName]) === null || _a === void 0 ? void 0 : _a.component), componentToken)\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush\n  };\n};\nexport default statisticToken;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}