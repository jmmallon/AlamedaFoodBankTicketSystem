{"ast":null,"code":"import _objectSpread from\"@babel/runtime/helpers/esm/objectSpread2\";import{useContext}from'@rc-component/context';import TableContext from\"../context/TableContext\";import{getColumnsKey}from\"../utils/valueUtil\";import{useEvent}from'rc-util';import classNames from'classnames';export default function useRowInfo(record,rowKey,recordIndex,indent){var context=useContext(TableContext,['prefixCls','fixedInfoList','flattenColumns','expandableType','expandRowByClick','onTriggerExpand','rowClassName','expandedRowClassName','indentSize','expandIcon','expandedRowRender','expandIconColumnIndex','expandedKeys','childrenColumnName','rowExpandable','onRow']);var flattenColumns=context.flattenColumns,expandableType=context.expandableType,expandedKeys=context.expandedKeys,childrenColumnName=context.childrenColumnName,onTriggerExpand=context.onTriggerExpand,rowExpandable=context.rowExpandable,onRow=context.onRow,expandRowByClick=context.expandRowByClick,rowClassName=context.rowClassName;// ======================= Expandable =======================\n// Only when row is not expandable and `children` exist in record\nvar nestExpandable=expandableType==='nest';var rowSupportExpand=expandableType==='row'&&(!rowExpandable||rowExpandable(record));var mergedExpandable=rowSupportExpand||nestExpandable;var expanded=expandedKeys&&expandedKeys.has(rowKey);var hasNestChildren=childrenColumnName&&record&&record[childrenColumnName];var onInternalTriggerExpand=useEvent(onTriggerExpand);// ========================= onRow ==========================\nvar rowProps=onRow===null||onRow===void 0?void 0:onRow(record,recordIndex);var onRowClick=rowProps===null||rowProps===void 0?void 0:rowProps.onClick;var onClick=function onClick(event){if(expandRowByClick&&mergedExpandable){onTriggerExpand(record,event);}for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}onRowClick===null||onRowClick===void 0||onRowClick.apply(void 0,[event].concat(args));};// ====================== RowClassName ======================\nvar computeRowClassName;if(typeof rowClassName==='string'){computeRowClassName=rowClassName;}else if(typeof rowClassName==='function'){computeRowClassName=rowClassName(record,recordIndex,indent);}// ========================= Column =========================\nvar columnsKey=getColumnsKey(flattenColumns);return _objectSpread(_objectSpread({},context),{},{columnsKey:columnsKey,nestExpandable:nestExpandable,expanded:expanded,hasNestChildren:hasNestChildren,record:record,onTriggerExpand:onInternalTriggerExpand,rowSupportExpand:rowSupportExpand,expandable:mergedExpandable,rowProps:_objectSpread(_objectSpread({},rowProps),{},{className:classNames(computeRowClassName,rowProps===null||rowProps===void 0?void 0:rowProps.className),onClick:onClick})});}","map":{"version":3,"names":["_objectSpread","useContext","TableContext","getColumnsKey","useEvent","classNames","useRowInfo","record","rowKey","recordIndex","indent","context","flattenColumns","expandableType","expandedKeys","childrenColumnName","onTriggerExpand","rowExpandable","onRow","expandRowByClick","rowClassName","nestExpandable","rowSupportExpand","mergedExpandable","expanded","has","hasNestChildren","onInternalTriggerExpand","rowProps","onRowClick","onClick","event","_len","arguments","length","args","Array","_key","apply","concat","computeRowClassName","columnsKey","expandable","className"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-table/es/hooks/useRowInfo.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { useContext } from '@rc-component/context';\nimport TableContext from \"../context/TableContext\";\nimport { getColumnsKey } from \"../utils/valueUtil\";\nimport { useEvent } from 'rc-util';\nimport classNames from 'classnames';\nexport default function useRowInfo(record, rowKey, recordIndex, indent) {\n  var context = useContext(TableContext, ['prefixCls', 'fixedInfoList', 'flattenColumns', 'expandableType', 'expandRowByClick', 'onTriggerExpand', 'rowClassName', 'expandedRowClassName', 'indentSize', 'expandIcon', 'expandedRowRender', 'expandIconColumnIndex', 'expandedKeys', 'childrenColumnName', 'rowExpandable', 'onRow']);\n  var flattenColumns = context.flattenColumns,\n    expandableType = context.expandableType,\n    expandedKeys = context.expandedKeys,\n    childrenColumnName = context.childrenColumnName,\n    onTriggerExpand = context.onTriggerExpand,\n    rowExpandable = context.rowExpandable,\n    onRow = context.onRow,\n    expandRowByClick = context.expandRowByClick,\n    rowClassName = context.rowClassName;\n\n  // ======================= Expandable =======================\n  // Only when row is not expandable and `children` exist in record\n  var nestExpandable = expandableType === 'nest';\n  var rowSupportExpand = expandableType === 'row' && (!rowExpandable || rowExpandable(record));\n  var mergedExpandable = rowSupportExpand || nestExpandable;\n  var expanded = expandedKeys && expandedKeys.has(rowKey);\n  var hasNestChildren = childrenColumnName && record && record[childrenColumnName];\n  var onInternalTriggerExpand = useEvent(onTriggerExpand);\n\n  // ========================= onRow ==========================\n  var rowProps = onRow === null || onRow === void 0 ? void 0 : onRow(record, recordIndex);\n  var onRowClick = rowProps === null || rowProps === void 0 ? void 0 : rowProps.onClick;\n  var onClick = function onClick(event) {\n    if (expandRowByClick && mergedExpandable) {\n      onTriggerExpand(record, event);\n    }\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    onRowClick === null || onRowClick === void 0 || onRowClick.apply(void 0, [event].concat(args));\n  };\n\n  // ====================== RowClassName ======================\n  var computeRowClassName;\n  if (typeof rowClassName === 'string') {\n    computeRowClassName = rowClassName;\n  } else if (typeof rowClassName === 'function') {\n    computeRowClassName = rowClassName(record, recordIndex, indent);\n  }\n\n  // ========================= Column =========================\n  var columnsKey = getColumnsKey(flattenColumns);\n  return _objectSpread(_objectSpread({}, context), {}, {\n    columnsKey: columnsKey,\n    nestExpandable: nestExpandable,\n    expanded: expanded,\n    hasNestChildren: hasNestChildren,\n    record: record,\n    onTriggerExpand: onInternalTriggerExpand,\n    rowSupportExpand: rowSupportExpand,\n    expandable: mergedExpandable,\n    rowProps: _objectSpread(_objectSpread({}, rowProps), {}, {\n      className: classNames(computeRowClassName, rowProps === null || rowProps === void 0 ? void 0 : rowProps.className),\n      onClick: onClick\n    })\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}