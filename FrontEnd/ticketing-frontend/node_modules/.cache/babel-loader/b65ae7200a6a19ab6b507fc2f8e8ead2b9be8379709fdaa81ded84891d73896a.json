{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';import isMobile from\"../isMobile\";import useLayoutEffect from\"./useLayoutEffect\";/**\n * Hook to detect if the user is on a mobile device\n * Notice that this hook will only detect the device type in effect, so it will always be false in server side\n */var useMobile=function useMobile(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),mobile=_useState2[0],setMobile=_useState2[1];useLayoutEffect(function(){setMobile(isMobile());},[]);return mobile;};export default useMobile;","map":{"version":3,"names":["_slicedToArray","useState","isMobile","useLayoutEffect","useMobile","_useState","_useState2","mobile","setMobile"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-util/es/hooks/useMobile.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from 'react';\nimport isMobile from \"../isMobile\";\nimport useLayoutEffect from \"./useLayoutEffect\";\n\n/**\n * Hook to detect if the user is on a mobile device\n * Notice that this hook will only detect the device type in effect, so it will always be false in server side\n */\nvar useMobile = function useMobile() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    mobile = _useState2[0],\n    setMobile = _useState2[1];\n  useLayoutEffect(function () {\n    setMobile(isMobile());\n  }, []);\n  return mobile;\n};\nexport default useMobile;"],"mappings":"AAAA,MAAO,CAAAA,cAAc,KAAM,0CAA0C,CACrE,OAASC,QAAQ,KAAQ,OAAO,CAChC,MAAO,CAAAC,QAAQ,KAAM,aAAa,CAClC,MAAO,CAAAC,eAAe,KAAM,mBAAmB,CAE/C;AACA;AACA;AACA,GACA,GAAI,CAAAC,SAAS,CAAG,QAAS,CAAAA,SAASA,CAAA,CAAG,CACnC,GAAI,CAAAC,SAAS,CAAGJ,QAAQ,CAAC,KAAK,CAAC,CAC7BK,UAAU,CAAGN,cAAc,CAACK,SAAS,CAAE,CAAC,CAAC,CACzCE,MAAM,CAAGD,UAAU,CAAC,CAAC,CAAC,CACtBE,SAAS,CAAGF,UAAU,CAAC,CAAC,CAAC,CAC3BH,eAAe,CAAC,UAAY,CAC1BK,SAAS,CAACN,QAAQ,CAAC,CAAC,CAAC,CACvB,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,CAAAK,MAAM,CACf,CAAC,CACD,cAAe,CAAAH,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}