{"ast":null,"code":"\"use client\";\n\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    notificationConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('notification');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalNotification(Object.assign(Object.assign(Object.assign({}, notificationConfig), {\n    prefixCls\n  }), appConfig.notification));\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n}, \"uwGGxbpUKhLAk0rvkJbrqc50F3c=\", false, function () {\n  return [useInternalNotification];\n})), \"uwGGxbpUKhLAk0rvkJbrqc50F3c=\", false, function () {\n  return [useInternalNotification];\n});\n_c2 = GlobalHolder;\nconst GlobalHolderWrapper = /*#__PURE__*/_s2( /*#__PURE__*/React.forwardRef(_c3 = _s2((_, ref) => {\n  _s2();\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    notificationConfig: notificationConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n}, \"sNF1qoiXKAXxPGEPwm8BgBMB1vI=\")), \"sNF1qoiXKAXxPGEPwm8BgBMB1vI=\");\n_c4 = GlobalHolderWrapper;\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    notification = null;\n  };\n}\nexport default staticMethods;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GlobalHolder$React.forwardRef\");\n$RefreshReg$(_c2, \"GlobalHolder\");\n$RefreshReg$(_c3, \"GlobalHolderWrapper$React.forwardRef\");\n$RefreshReg$(_c4, \"GlobalHolderWrapper\");","map":{"version":3,"names":["_s","$RefreshSig$","_s2","React","useContext","render","AppConfigContext","ConfigProvider","ConfigContext","globalConfig","warnContext","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","getContainer","rtl","maxCount","top","bottom","mergedContainer","document","body","GlobalHolder","forwardRef","_c","props","ref","notificationConfig","sync","getPrefixCls","prefixCls","appConfig","api","holder","Object","assign","useEffect","useImperativeHandle","instance","keys","forEach","method","apply","arguments","_c2","GlobalHolderWrapper","_c3","_","setNotificationConfig","useState","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","dom","createElement","iconPrefixCls","holderRender","_c4","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","setNotificationGlobalConfig","_a","call","process","env","NODE_ENV","push","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","wrapper","actDestroy","$RefreshReg$"],"sources":["/Users/jmmallon/git/a/AlamedaFoodBankTicketSystem/FrontEnd/ticketing-frontend/src/node_modules/antd/es/notification/index.js"],"sourcesContent":["\"use client\";\n\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    notificationConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('notification');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalNotification(Object.assign(Object.assign(Object.assign({}, notificationConfig), {\n    prefixCls\n  }), appConfig.notification));\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [notificationConfig, setNotificationConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    notificationConfig: notificationConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    notification = null;\n  };\n}\nexport default staticMethods;"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAEb,OAAOE,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,gBAAgB,QAAQ,gBAAgB;AACjD,OAAOC,cAAc,IAAIC,aAAa,EAAEC,YAAY,EAAEC,WAAW,QAAQ,oBAAoB;AAC7F,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,eAAe,IAAIC,uBAAuB,QAAQ,mBAAmB;AAC5E,IAAIC,YAAY,GAAG,IAAI;AACvB,IAAIC,GAAG,GAAGC,QAAQ,IAAIA,QAAQ,CAAC,CAAC;AAChC,IAAIC,SAAS,GAAG,EAAE;AAClB,IAAIC,mBAAmB,GAAG,CAAC,CAAC;AAC5B,SAASC,gBAAgBA,CAAA,EAAG;EAC1B,MAAM;IACJC,YAAY;IACZC,GAAG;IACHC,QAAQ;IACRC,GAAG;IACHC;EACF,CAAC,GAAGN,mBAAmB;EACvB,MAAMO,eAAe,GAAG,CAACL,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC,CAAC,KAAKM,QAAQ,CAACC,IAAI;EACrH,OAAO;IACLP,YAAY,EAAEA,CAAA,KAAMK,eAAe;IACnCJ,GAAG;IACHC,QAAQ;IACRC,GAAG;IACHC;EACF,CAAC;AACH;AACA,MAAMI,YAAY,GAAG,aAAA5B,EAAA,eAAaG,KAAK,CAAC0B,UAAU,CAAAC,EAAA,GAAA9B,EAAA,CAAC,CAAC+B,KAAK,EAAEC,GAAG,KAAK;EAAAhC,EAAA;EACjE,MAAM;IACJiC,kBAAkB;IAClBC;EACF,CAAC,GAAGH,KAAK;EACT,MAAM;IACJI;EACF,CAAC,GAAG/B,UAAU,CAACI,aAAa,CAAC;EAC7B,MAAM4B,SAAS,GAAGlB,mBAAmB,CAACkB,SAAS,IAAID,YAAY,CAAC,cAAc,CAAC;EAC/E,MAAME,SAAS,GAAGjC,UAAU,CAACE,gBAAgB,CAAC;EAC9C,MAAM,CAACgC,GAAG,EAAEC,MAAM,CAAC,GAAG1B,uBAAuB,CAAC2B,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,kBAAkB,CAAC,EAAE;IAC/GG;EACF,CAAC,CAAC,EAAEC,SAAS,CAACvB,YAAY,CAAC,CAAC;EAC5BX,KAAK,CAACuC,SAAS,CAACR,IAAI,EAAE,EAAE,CAAC;EACzB/B,KAAK,CAACwC,mBAAmB,CAACX,GAAG,EAAE,MAAM;IACnC,MAAMY,QAAQ,GAAGJ,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEH,GAAG,CAAC;IACvCE,MAAM,CAACK,IAAI,CAACD,QAAQ,CAAC,CAACE,OAAO,CAACC,MAAM,IAAI;MACtCH,QAAQ,CAACG,MAAM,CAAC,GAAG,YAAY;QAC7Bb,IAAI,CAAC,CAAC;QACN,OAAOI,GAAG,CAACS,MAAM,CAAC,CAACC,KAAK,CAACV,GAAG,EAAEW,SAAS,CAAC;MAC1C,CAAC;IACH,CAAC,CAAC;IACF,OAAO;MACLL,QAAQ;MACRV;IACF,CAAC;EACH,CAAC,CAAC;EACF,OAAOK,MAAM;AACf,CAAC;EAAA,QAlBuB1B,uBAAuB;AAAA,EAkB9C,CAAC;EAAA,QAlBsBA,uBAAuB;AAAA,EAkB7C;AAACqC,GAAA,GA5BGtB,YAAY;AA6BlB,MAAMuB,mBAAmB,GAAG,aAAAjD,GAAA,eAAaC,KAAK,CAAC0B,UAAU,CAAAuB,GAAA,GAAAlD,GAAA,CAAC,CAACmD,CAAC,EAAErB,GAAG,KAAK;EAAA9B,GAAA;EACpE,MAAM,CAAC+B,kBAAkB,EAAEqB,qBAAqB,CAAC,GAAGnD,KAAK,CAACoD,QAAQ,CAACpC,gBAAgB,CAAC;EACpF,MAAMe,IAAI,GAAGA,CAAA,KAAM;IACjBoB,qBAAqB,CAACnC,gBAAgB,CAAC;EACzC,CAAC;EACDhB,KAAK,CAACuC,SAAS,CAACR,IAAI,EAAE,EAAE,CAAC;EACzB,MAAMsB,MAAM,GAAG/C,YAAY,CAAC,CAAC;EAC7B,MAAMgD,aAAa,GAAGD,MAAM,CAACE,gBAAgB,CAAC,CAAC;EAC/C,MAAMC,iBAAiB,GAAGH,MAAM,CAACI,gBAAgB,CAAC,CAAC;EACnD,MAAMC,KAAK,GAAGL,MAAM,CAACM,QAAQ,CAAC,CAAC;EAC/B,MAAMC,GAAG,GAAG,aAAa5D,KAAK,CAAC6D,aAAa,CAACpC,YAAY,EAAE;IACzDI,GAAG,EAAEA,GAAG;IACRE,IAAI,EAAEA,IAAI;IACVD,kBAAkB,EAAEA;EACtB,CAAC,CAAC;EACF,OAAO,aAAa9B,KAAK,CAAC6D,aAAa,CAACzD,cAAc,EAAE;IACtD6B,SAAS,EAAEqB,aAAa;IACxBQ,aAAa,EAAEN,iBAAiB;IAChCE,KAAK,EAAEA;EACT,CAAC,EAAEL,MAAM,CAACU,YAAY,GAAGV,MAAM,CAACU,YAAY,CAACH,GAAG,CAAC,GAAGA,GAAG,CAAC;AAC1D,CAAC,kCAAC;AAACI,GAAA,GApBGhB,mBAAmB;AAqBzB,SAASiB,WAAWA,CAAA,EAAG;EACrB,IAAI,CAACtD,YAAY,EAAE;IACjB,MAAMuD,cAAc,GAAG3C,QAAQ,CAAC4C,sBAAsB,CAAC,CAAC;IACxD,MAAMC,eAAe,GAAG;MACtBC,QAAQ,EAAEH;IACZ,CAAC;IACDvD,YAAY,GAAGyD,eAAe;IAC9B;IACAxD,GAAG,CAAC,MAAM;MACRV,MAAM,EAAE,aAAaF,KAAK,CAAC6D,aAAa,CAACb,mBAAmB,EAAE;QAC5DnB,GAAG,EAAEyC,IAAI,IAAI;UACX,MAAM;YACJ7B,QAAQ;YACRV;UACF,CAAC,GAAGuC,IAAI,IAAI,CAAC,CAAC;UACdC,OAAO,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;YAC3B,IAAI,CAACL,eAAe,CAAC3B,QAAQ,IAAIA,QAAQ,EAAE;cACzC2B,eAAe,CAAC3B,QAAQ,GAAGA,QAAQ;cACnC2B,eAAe,CAACrC,IAAI,GAAGA,IAAI;cAC3BkC,WAAW,CAAC,CAAC;YACf;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,EAAEC,cAAc,CAAC;IACrB,CAAC,CAAC;IACF;EACF;EACA;EACA,IAAI,CAACvD,YAAY,CAAC8B,QAAQ,EAAE;IAC1B;EACF;EACA;EACA3B,SAAS,CAAC6B,OAAO,CAAC+B,IAAI,IAAI;IACxB;IACA,QAAQA,IAAI,CAACC,IAAI;MACf,KAAK,MAAM;QACT;UACE/D,GAAG,CAAC,MAAM;YACRD,YAAY,CAAC8B,QAAQ,CAACmC,IAAI,CAACvC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEvB,mBAAmB,CAAC,EAAE2D,IAAI,CAACG,MAAM,CAAC,CAAC;UAChG,CAAC,CAAC;UACF;QACF;MACF,KAAK,SAAS;QACZjE,GAAG,CAAC,MAAM;UACRD,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAAC8B,QAAQ,CAACqC,OAAO,CAACJ,IAAI,CAACK,GAAG,CAAC;QACrG,CAAC,CAAC;QACF;IACJ;EACF,CAAC,CAAC;EACF;EACAjE,SAAS,GAAG,EAAE;AAChB;AACA;AACA;AACA;AACA,SAASkE,2BAA2BA,CAACH,MAAM,EAAE;EAC3C9D,mBAAmB,GAAGsB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEvB,mBAAmB,CAAC,EAAE8D,MAAM,CAAC;EACnF;EACAjE,GAAG,CAAC,MAAM;IACR,IAAIqE,EAAE;IACN,CAACA,EAAE,GAAGtE,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACoB,IAAI,MAAM,IAAI,IAAIkD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACvE,YAAY,CAAC;EACjJ,CAAC,CAAC;AACJ;AACA,SAASiE,IAAIA,CAACC,MAAM,EAAE;EACpB,MAAMxB,MAAM,GAAG/C,YAAY,CAAC,CAAC;EAC7B,IAAI6E,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,CAAChC,MAAM,CAACU,YAAY,EAAE;IACjExD,WAAW,CAAC,cAAc,CAAC;EAC7B;EACAO,SAAS,CAACwE,IAAI,CAAC;IACbX,IAAI,EAAE,MAAM;IACZE;EACF,CAAC,CAAC;EACFZ,WAAW,CAAC,CAAC;AACf;AACA,SAASa,OAAOA,CAACC,GAAG,EAAE;EACpBjE,SAAS,CAACwE,IAAI,CAAC;IACbX,IAAI,EAAE,SAAS;IACfI;EACF,CAAC,CAAC;EACFd,WAAW,CAAC,CAAC;AACf;AACA,MAAMsB,OAAO,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AACvD,MAAMC,iBAAiB,GAAG;EACxBZ,IAAI;EACJE,OAAO;EACPD,MAAM,EAAEG,2BAA2B;EACnCvE,eAAe;EACfgF,sCAAsC,EAAEjF;AAC1C,CAAC;AACD,MAAMkF,aAAa,GAAGF,iBAAiB;AACvCD,OAAO,CAAC5C,OAAO,CAACgC,IAAI,IAAI;EACtBe,aAAa,CAACf,IAAI,CAAC,GAAGE,MAAM,IAAID,IAAI,CAACvC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEuC,MAAM,CAAC,EAAE;IAC5EF;EACF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AACF;AACA;AACA;AACA,MAAMgB,IAAI,GAAGA,CAAA,KAAM,CAAC,CAAC;AACrB;AACA;AACA,OAAO,IAAIC,UAAU,GAAGD,IAAI;AAC5B,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;EACnCO,UAAU,GAAGC,OAAO,IAAI;IACtBjF,GAAG,GAAGiF,OAAO;EACf,CAAC;AACH;AACA;AACA;AACA,OAAO,IAAIC,UAAU,GAAGH,IAAI;AAC5B,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM,EAAE;EACnCS,UAAU,GAAGA,CAAA,KAAM;IACjBnF,YAAY,GAAG,IAAI;EACrB,CAAC;AACH;AACA,eAAe+E,aAAa;AAAC,IAAA/D,EAAA,EAAAoB,GAAA,EAAAE,GAAA,EAAAe,GAAA;AAAA+B,YAAA,CAAApE,EAAA;AAAAoE,YAAA,CAAAhD,GAAA;AAAAgD,YAAA,CAAA9C,GAAA;AAAA8C,YAAA,CAAA/B,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}