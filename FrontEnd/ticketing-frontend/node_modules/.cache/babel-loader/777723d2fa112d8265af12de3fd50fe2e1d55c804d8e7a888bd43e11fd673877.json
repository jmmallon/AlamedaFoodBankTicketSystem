{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{Table,Button,Input,Checkbox,message}from'antd';import{saveAs}from'file-saver';// Import the file-saver library\nimport{toast}from'react-toastify';// Assuming you're using react-toastify for toast notifications\nimport{ToastContainer}from'react-toastify';import'react-toastify/dist/ReactToastify.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const AdminPage=()=>{const[tickets,setTickets]=useState([]);const[sorting,setSorting]=useState({});// const [sessionId, _] = useState(generateUniqueSessionId());\nconst[sessionId]=useState(generateUniqueSessionId());const[showDoneItems,setShowDoneItems]=useState(true);// State to track whether the toast is visible\nconsole.log('Number1');const isToastVisibleRef=useRef(false);function showUpdatedDBToast(updateInfo){console.log(\"Recevived call\",updateInfo);// Check if the update's session ID matches the current session's ID\nconsole.log(\"updateInfo.sessionId\",updateInfo.sessionId);console.log(\"sessionId\",sessionId);console.log(\"isToastVisibleRef\",isToastVisibleRef);if(isToastVisibleRef.current===false&&updateInfo.sessionId!==sessionId){console.log(\"Session Id different\");isToastVisibleRef.current=true;// Update the ref to true\nconsole.log(\"isToastVisible: \",isToastVisibleRef);const toastId=toast('Database has been updated. Click Here to reload. ',{position:\"top-right\",autoClose:false,closeOnClick:true,pauseOnHover:true,draggable:true,progress:undefined,onClick:()=>window.location.reload()// Reload the page when the toast is clicked\n// You can add a button to refresh the page\n});// Set up a callback to be called when the toast is dismissed\ntoast.onChange(()=>{if(!toast.isActive(toastId)){isToastVisibleRef.current=false;}});}}useEffect(()=>{const currentTime=new Date();console.log(\"TYLER:: time: \",currentTime);// Fetch tickets data from the backend\nfetch('http://'+window.location.hostname+':8888/tickets').then(response=>response.json()).then(data=>{console.log(data);// Log the fetched data\nsetTickets(data);}).catch(error=>console.error('Error fetching tickets:',error));// Set up the SSE connection to listen for updates\nconst eventSource=new EventSource('http://'+window.location.hostname+':8888/sse/tickets');// Open a connection to the SSE endpoint\neventSource.addEventListener('update',event=>{try{const updateInfo=JSON.parse(event.data);// Handle updates and show the toast message\n// You can customize the toast content, appearance, and behavior\nshowUpdatedDBToast(updateInfo);}catch(error){console.error('Failed to parse JSON data:',error,'Raw data:',event.data);eventSource.close();}});return()=>{eventSource.close();// Close the SSE connection when the component unmounts\n};},[]);function generateUniqueSessionId(){const timestamp=new Date().getTime();const randomPart=Math.random().toString(36).substr(2,9);var x=\"session-\".concat(timestamp,\"-\").concat(randomPart);console.log(\"generateUniqueSessionId\",x);return\"session-\".concat(timestamp,\"-\").concat(randomPart);}const handleSaveClick=ticketId=>{// Find the ticket to be saved from the tickets array\nconst ticketToSave=tickets.find(ticket=>ticket.id===ticketId);// Update the ticket data on the backend using the PUT request\nfetch(\"http://\".concat(window.location.hostname,\":8888/tickets/\").concat(ticketId),{method:'PUT',headers:{'Content-Type':'application/json','X-Session-Id':sessionId// Include the session ID as a custom header\n},body:JSON.stringify(ticketToSave)}).then(response=>{if(response.ok){message.success('Ticket saved successfully!');// Show success toast message\n}else{message.error('Failed to save ticket. Please try again.');// Show error toast message\n}}).catch(error=>{console.error('Error updating ticket:',error);message.error('An error occurred while saving the ticket. Please try again.');// Show error toast message\n});};const handleDeleteClick=ticketId=>{// Delete the ticket from the backend using the DELETE request\nfetch(\"http://\".concat(window.location.hostname,\":8888/tickets/\").concat(ticketId),{method:'DELETE',headers:{'Content-Type':'application/json','X-Session-Id':sessionId// Include the session ID as a custom header\n}}).then(response=>{if(response.ok){// If the ticket was deleted successfully, remove it from the frontend state\nsetTickets(prevTickets=>prevTickets.filter(ticket=>ticket.id!==ticketId));}else{console.error('Error deleting ticket:',response.statusText);}}).catch(error=>console.error('Error deleting ticket:',error));};const handleFieldChange=(ticketId,field,value)=>{// Update the field value of the ticket in the state\nsetTickets(prevTickets=>prevTickets.map(ticket=>ticket.id===ticketId?{...ticket,[field]:value}:ticket));};const sortTickets=columnKey=>{const order=sorting[columnKey]==='asc'?'desc':'asc';setSorting({[columnKey]:order});const sortedTickets=[...tickets].sort((a,b)=>{const aValue=a[columnKey];const bValue=b[columnKey];if(typeof aValue==='string'&&typeof bValue==='string'){return order==='asc'?aValue.localeCompare(bValue):bValue.localeCompare(aValue);}else{// Handle numeric sorting for other data types\nreturn order==='asc'?aValue-bValue:bValue-aValue;}});setTickets(sortedTickets);};const handleExportCsv=()=>{const csvData=tickets.map(ticket=>{return[ticket.id,ticket.firstName,ticket.lastName,ticket.scheduleAppointment===1?\"Yes\":\"No\",ticket.scheduleAppointmentTime?getDateInPacTimeAsString(ticket.scheduleAppointmentTime):\"N/A\",ticket.firstTimeVisitor===1?\"Yes\":\"No\",ticket.time?getDateInPacTimeAsString(ticket.time):\"N/A\",ticket.positionInLine,ticket.additionalNotes,ticket.done].join(',');});const csvContent=['ID,First Name,Last Name,Schedule Appointment,Schedule Appointment Time,First Time Visitor, Sign In Time,Position in Line,Additional Notes,Done'].concat(csvData).join('\\n');const blob=new Blob([csvContent],{type:'text/csv;charset=utf-8'});saveAs(blob,'tickets.csv');};const sortTicketsByPosition=columnKey=>{const order=sorting[columnKey]==='asc'?'desc':'asc';setSorting({[columnKey]:order});const sortedTickets=[...tickets].sort((a,b)=>{const aValue=a[columnKey];const bValue=b[columnKey];// Compare numeric values directly\nreturn order==='asc'?aValue-bValue:bValue-aValue;});setTickets(sortedTickets);};const handleSaveAllClick=()=>{// Keep track of the number of successful and failed saves\nlet successCount=0;let errorCount=0;// Function to handle individual save response\nconst handleSaveResponse=success=>{if(success){successCount+=1;}else{errorCount+=1;}// If we have handled all tickets, display the success or error message\nif(successCount+errorCount===tickets.length){if(errorCount===0){message.success('All changes were saved successfully!');}else{message.error(\"\".concat(errorCount,\" tickets failed to save. Please try again.\"));}}};tickets.forEach(ticket=>{// Find the ticket to be saved from the tickets array\nconst ticketToSave=tickets.find(t=>t.id===ticket.id);// Update the ticket data on the backend using the PUT request\nfetch(\"http://\".concat(window.location.hostname,\":8888/tickets/\").concat(ticket.id),{method:'PUT',headers:{'Content-Type':'application/json','X-Session-Id':sessionId// Include the session ID as a custom header\n},body:JSON.stringify(ticketToSave)}).then(response=>{if(response.ok){handleSaveResponse(true);}else{handleSaveResponse(false);}}).catch(error=>{console.error('Error updating ticket:',error);handleSaveResponse(false);});});};const handleToggleDoneClick=ticketId=>{// Find the ticket to be toggled from the tickets array\nconst ticketToToggle=tickets.find(ticket=>ticket.id===ticketId);// Toggle the \"done\" value\nconst updatedDoneValue=!ticketToToggle.done;ticketToToggle.done=!ticketToToggle.done;// Update the ticket's \"done\" status on the backend using the PUT request\nfetch(\"http://\".concat(window.location.hostname,\":8888/tickets/\").concat(ticketId),{method:'PUT',headers:{'Content-Type':'application/json','X-Session-Id':sessionId// Include the session ID as a custom header\n},body:JSON.stringify(ticketToToggle)// Only send the \"done\" field in the update payload\n}).then(response=>{if(response.ok){// Update the \"done\" value in the frontend state\nhandleFieldChange(ticketId,'done',updatedDoneValue);message.success('Ticket status updated successfully!');// Show success toast message\n}else{message.error('Failed to update ticket status. Please try again.');// Show error toast message\n}}).catch(error=>{console.error('Error updating ticket status:',error);message.error('An error occurred while updating the ticket status. Please try again.');// Show error toast message\n});};const columns=[{title:'ID',dataIndex:'id',key:'id',onHeaderCell:()=>({onClick:()=>sortTickets('id')})},{title:'First Name',dataIndex:'firstName',key:'firstName',render:(text,record)=>/*#__PURE__*/_jsx(Input,{style:styles.input,value:record.firstName,onChange:e=>handleFieldChange(record.id,'firstName',e.target.value)}),onHeaderCell:()=>({onClick:()=>sortTickets('firstName')})},{title:'Last Name',dataIndex:'lastName',key:'lastName',render:(text,record)=>/*#__PURE__*/_jsx(Input,{style:styles.input,value:record.lastName,onChange:e=>handleFieldChange(record.id,'lastName',e.target.value)}),onHeaderCell:()=>({onClick:()=>sortTickets('lastName')})},{title:'Schedule Appointment',dataIndex:'scheduleAppointment',key:'scheduleAppointment',render:(text,record)=>/*#__PURE__*/_jsx(Checkbox,{checked:record.scheduleAppointment,onChange:e=>handleFieldChange(record.id,'scheduleAppointment',e.target.checked)}),onHeaderCell:()=>({onClick:()=>sortTickets('scheduleAppointment')})},{title:'First Time Visitor',dataIndex:'firstTimeVisitor',key:'firstTimeVisitor',render:(text,record)=>/*#__PURE__*/_jsx(Checkbox,{checked:record.firstTimeVisitor,onChange:e=>handleFieldChange(record.id,'firstTimeVisitor',e.target.checked)}),onHeaderCell:()=>({onClick:()=>sortTickets('firstTimeVisitor')})},{title:'Sign In Time',dataIndex:'time',key:'time',render:(text,record)=>/*#__PURE__*/ // <span>{record.time? getDateInPacTime(record.time + \"Z\") : \"N/A\"}</span>\n_jsx(\"span\",{children:record.time?getDateInPacTime(record.time):\"N/A\"}),onHeaderCell:()=>({onClick:()=>sortTickets('time')})},{title:'Schedule Appointment Time',dataIndex:'scheduleAppointmentTime',key:'scheduleAppointmentTime',render:(text,record)=>/*#__PURE__*/_jsx(\"span\",{children:record.scheduleAppointmentTime?getDateInPacTime(record.scheduleAppointmentTime):'N/A'}),onHeaderCell:()=>({onClick:()=>sortTickets('scheduleAppointmentTime')})},{title:'Position in Line',dataIndex:'positionInLine',key:'positionInLine',render:(text,record)=>/*#__PURE__*/_jsx(Input,{style:{width:'50px'},type:\"number\",value:record.positionInLine,onChange:e=>handleFieldChange(record.id,'positionInLine',parseInt(e.target.value))}),onHeaderCell:()=>({onClick:()=>sortTicketsByPosition('positionInLine')})},{title:'Additional Notes',dataIndex:'additionalNotes',key:'additionalNotes',render:(text,record)=>/*#__PURE__*/_jsx(\"textarea\",{value:record.additionalNotes,onChange:e=>handleFieldChange(record.id,'additionalNotes',e.target.value),style:{width:'100%',minHeight:100}}),onHeaderCell:()=>({onClick:()=>sortTickets('additionalNotes')})},{title:'Done',dataIndex:'done',key:'done',render:(text,record)=>/*#__PURE__*/_jsx(Button,{onClick:()=>handleToggleDoneClick(record.id),style:{backgroundColor:record.done?'green':'red',color:'white'},children:record.done?'Done':'Not Done'}),onHeaderCell:()=>({onClick:()=>sortTickets('done')})},{title:'Save',key:'save',render:(text,record)=>/*#__PURE__*/_jsx(Button,{onClick:()=>handleSaveClick(record.id),children:\"Save\"})},{title:'Delete',key:'delete',render:(text,record)=>/*#__PURE__*/_jsx(Button,{onClick:()=>handleDeleteClick(record.id),children:\"Delete\"})}];const handleRefreshClick=()=>{console.log(\"refresh clicked\");// Send a request to the backend with the \"RefreshToken\" header\n//         fetch('http://' + window.location.hostname + ':8888/tickets')\nfetch('http://'+window.location.hostname+':8888/refresh',{method:'GET',headers:{'RefreshToken':'refreshToken'// Replace with your actual refresh token\n}}).then(response=>response.json()).then(data=>{console.log(\"refresh Succes\");}).catch(error=>{console.error('Error refreshing data:',error);});};const getDateInPacTime=newDate=>{const dateObj=new Date(newDate);const pacificDateTime=dateObj.toLocaleString('en-US',{timeZone:'America/Los_Angeles',hour12:true});return/*#__PURE__*/_jsx(_Fragment,{children:pacificDateTime});};const getDateInPacTimeAsString=newDate=>{const dateObj=new Date(newDate);const pacificDateTime=dateObj.toLocaleString('en-US',{timeZone:'America/Los_Angeles',hour12:true});return\"\\\"\".concat(pacificDateTime.toString(),\"\\\"\").replace(/,/g,' ');};return/*#__PURE__*/_jsxs(\"div\",{style:styles.container,children:[/*#__PURE__*/_jsx(\"h2\",{style:styles.title,children:\"Ticketing System Administrator Mode\"}),/*#__PURE__*/_jsxs(\"div\",{style:styles.buttonsTopLeft,children:[/*#__PURE__*/_jsx(Button,{style:{marginRight:'15px'},type:\"primary\",onClick:handleExportCsv,children:\"Export Data As CSV\"}),/*#__PURE__*/_jsx(Button,{style:{marginRight:'15px'},type:\"primary\",onClick:handleSaveAllClick,children:\"Save All Changes\"}),/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:handleRefreshClick,children:\"Refresh Serving Customer Page\"}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'10px'},children:/*#__PURE__*/_jsx(Checkbox,{checked:showDoneItems,onChange:()=>setShowDoneItems(!showDoneItems),children:\"Show Done Items\"})})]}),/*#__PURE__*/_jsx(Table,{dataSource:tickets.filter(ticket=>showDoneItems||!ticket.done),columns:columns,rowKey:\"id\"}),/*#__PURE__*/_jsx(ToastContainer,{})]});};const styles={input:{width:'200px'},container:{padding:'90px'},title:{textAlign:'center'},buttonsTopLeft:{position:'absolute',top:'30px',// Adjust the top position\nleft:'30px'// Adjust the left position\n}};export default AdminPage;","map":{"version":3,"names":["React","useEffect","useRef","useState","Table","Button","Input","Checkbox","message","saveAs","toast","ToastContainer","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","AdminPage","tickets","setTickets","sorting","setSorting","sessionId","generateUniqueSessionId","showDoneItems","setShowDoneItems","console","log","isToastVisibleRef","showUpdatedDBToast","updateInfo","current","toastId","position","autoClose","closeOnClick","pauseOnHover","draggable","progress","undefined","onClick","window","location","reload","onChange","isActive","currentTime","Date","fetch","hostname","then","response","json","data","catch","error","eventSource","EventSource","addEventListener","event","JSON","parse","close","timestamp","getTime","randomPart","Math","random","toString","substr","x","concat","handleSaveClick","ticketId","ticketToSave","find","ticket","id","method","headers","body","stringify","ok","success","handleDeleteClick","prevTickets","filter","statusText","handleFieldChange","field","value","map","sortTickets","columnKey","order","sortedTickets","sort","a","b","aValue","bValue","localeCompare","handleExportCsv","csvData","firstName","lastName","scheduleAppointment","scheduleAppointmentTime","getDateInPacTimeAsString","firstTimeVisitor","time","positionInLine","additionalNotes","done","join","csvContent","blob","Blob","type","sortTicketsByPosition","handleSaveAllClick","successCount","errorCount","handleSaveResponse","length","forEach","t","handleToggleDoneClick","ticketToToggle","updatedDoneValue","columns","title","dataIndex","key","onHeaderCell","render","text","record","style","styles","input","e","target","checked","children","getDateInPacTime","width","parseInt","minHeight","backgroundColor","color","handleRefreshClick","newDate","dateObj","pacificDateTime","toLocaleString","timeZone","hour12","replace","container","buttonsTopLeft","marginRight","marginTop","dataSource","rowKey","padding","textAlign","top","left"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/AdminPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Table, Button, Input, Checkbox, message } from 'antd';\nimport { saveAs } from 'file-saver'; // Import the file-saver library\nimport { toast } from 'react-toastify'; // Assuming you're using react-toastify for toast notifications\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst AdminPage = () => {\n    const [tickets, setTickets] = useState([]);\n    const [sorting, setSorting] = useState({});\n    // const [sessionId, _] = useState(generateUniqueSessionId());\n    const [sessionId] = useState(generateUniqueSessionId());\n    const [showDoneItems, setShowDoneItems] = useState(true);\n\n    // State to track whether the toast is visible\nconsole.log('Number1');\n    const isToastVisibleRef = useRef(false);\n\n    function showUpdatedDBToast(updateInfo) {\n        console.log(\"Recevived call\", updateInfo)\n        // Check if the update's session ID matches the current session's ID\n\n        console.log(\"updateInfo.sessionId\", updateInfo.sessionId)\n        console.log(\"sessionId\", sessionId)\n        console.log(\"isToastVisibleRef\", isToastVisibleRef)\n        if (isToastVisibleRef.current === false && updateInfo.sessionId !== sessionId) {\n            console.log(\"Session Id different\")\n            isToastVisibleRef.current = true; // Update the ref to true\n            console.log(\"isToastVisible: \", isToastVisibleRef)\n            const toastId = toast('Database has been updated. Click Here to reload. ', {\n                position: \"top-right\",\n                autoClose: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                onClick: () => window.location.reload() // Reload the page when the toast is clicked\n                // You can add a button to refresh the page\n            });\n\n            // Set up a callback to be called when the toast is dismissed\n            toast.onChange(() => {\n                if (!toast.isActive(toastId)) {\n                    isToastVisibleRef.current = false;\n                }\n            });\n\n       }\n    }\n\n    useEffect(() => {\n        const currentTime = new Date();\n        console.log(\"TYLER:: time: \", currentTime)\n        // Fetch tickets data from the backend\n        fetch('http://' + window.location.hostname + ':8888/tickets')\n            .then((response) => response.json())\n            .then((data) => {\n                console.log(data); // Log the fetched data\n                setTickets(data);\n\n            })\n            .catch((error) => console.error('Error fetching tickets:', error));\n\n        // Set up the SSE connection to listen for updates\n        const eventSource = new EventSource('http://' + window.location.hostname + ':8888/sse/tickets');\n        // Open a connection to the SSE endpoint\n\n        eventSource.addEventListener('update', (event) => {\n\n            try {\n                const updateInfo = JSON.parse(event.data);\n                // Handle updates and show the toast message\n                // You can customize the toast content, appearance, and behavior\n                showUpdatedDBToast(updateInfo)\n            } catch (error) {\n                console.error('Failed to parse JSON data:', error, 'Raw data:', event.data);\n                eventSource.close();\n            }\n        });\n\n        return () => {\n            eventSource.close(); // Close the SSE connection when the component unmounts\n        };\n    }, []);\n\n    function generateUniqueSessionId() {\n        const timestamp = new Date().getTime();\n        const randomPart = Math.random().toString(36).substr(2, 9);\n        var x = `session-${timestamp}-${randomPart}`\n        console.log(\"generateUniqueSessionId\", x)\n        return `session-${timestamp}-${randomPart}`;\n    }\n\n    const handleSaveClick = (ticketId) => {\n        // Find the ticket to be saved from the tickets array\n        const ticketToSave = tickets.find((ticket) => ticket.id === ticketId);\n\n        // Update the ticket data on the backend using the PUT request\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Session-Id': sessionId // Include the session ID as a custom header\n            },\n            body: JSON.stringify(ticketToSave),\n        })\n            .then((response) => {\n                if (response.ok) {\n                    message.success('Ticket saved successfully!'); // Show success toast message\n                } else {\n                    message.error('Failed to save ticket. Please try again.'); // Show error toast message\n                }\n            })\n            .catch((error) => {\n                console.error('Error updating ticket:', error);\n                message.error('An error occurred while saving the ticket. Please try again.'); // Show error toast message\n            });\n    };\n\n    const handleDeleteClick = (ticketId) => {\n        // Delete the ticket from the backend using the DELETE request\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Session-Id': sessionId // Include the session ID as a custom header\n            },\n        })\n            .then((response) => {\n                if (response.ok) {\n                    // If the ticket was deleted successfully, remove it from the frontend state\n                    setTickets((prevTickets) => prevTickets.filter((ticket) => ticket.id !== ticketId));\n                } else {\n                    console.error('Error deleting ticket:', response.statusText);\n                }\n            })\n            .catch((error) => console.error('Error deleting ticket:', error));\n    };\n\n    const handleFieldChange = (ticketId, field, value) => {\n        // Update the field value of the ticket in the state\n        setTickets((prevTickets) =>\n            prevTickets.map((ticket) =>\n                ticket.id === ticketId ? { ...ticket, [field]: value } : ticket\n            )\n        );\n    };\n\n    const sortTickets = (columnKey) => {\n        const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\n        setSorting({ [columnKey]: order });\n\n        const sortedTickets = [...tickets].sort((a, b) => {\n            const aValue = a[columnKey];\n            const bValue = b[columnKey];\n\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\n                return order === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n            } else {\n                // Handle numeric sorting for other data types\n                return order === 'asc' ? aValue - bValue : bValue - aValue;\n            }\n        });\n\n        setTickets(sortedTickets);\n    };\n\n    const handleExportCsv = () => {\n        const csvData = tickets.map((ticket) => {\n            return [\n                ticket.id,\n                ticket.firstName,\n                ticket.lastName,\n                ticket.scheduleAppointment === 1 ? \"Yes\": \"No\",\n                ticket.scheduleAppointmentTime ?  getDateInPacTimeAsString(ticket.scheduleAppointmentTime): \"N/A\",\n                ticket.firstTimeVisitor === 1 ? \"Yes\": \"No\",\n                ticket.time  ?  getDateInPacTimeAsString(ticket.time): \"N/A\",\n                ticket.positionInLine,\n                ticket.additionalNotes,\n                ticket.done,\n            ].join(',');\n        });\n\n        const csvContent = ['ID,First Name,Last Name,Schedule Appointment,Schedule Appointment Time,First Time Visitor, Sign In Time,Position in Line,Additional Notes,Done'].concat(csvData).join('\\n');\n\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n        saveAs(blob, 'tickets.csv');\n    };\n\n    const sortTicketsByPosition = (columnKey) => {\n        const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\n        setSorting({ [columnKey]: order });\n\n        const sortedTickets = [...tickets].sort((a, b) => {\n            const aValue = a[columnKey];\n            const bValue = b[columnKey];\n            // Compare numeric values directly\n            return order === 'asc' ? aValue - bValue : bValue - aValue;\n        });\n\n        setTickets(sortedTickets);\n    };\n\n    const handleSaveAllClick = () => {\n        // Keep track of the number of successful and failed saves\n        let successCount = 0;\n        let errorCount = 0;\n\n        // Function to handle individual save response\n        const handleSaveResponse = (success) => {\n            if (success) {\n                successCount += 1;\n            } else {\n                errorCount += 1;\n            }\n\n            // If we have handled all tickets, display the success or error message\n            if (successCount + errorCount === tickets.length) {\n                if (errorCount === 0) {\n                    message.success('All changes were saved successfully!');\n                } else {\n                    message.error(`${errorCount} tickets failed to save. Please try again.`);\n                }\n            }\n        };\n\n        tickets.forEach((ticket) => {\n            // Find the ticket to be saved from the tickets array\n            const ticketToSave = tickets.find((t) => t.id === ticket.id);\n\n            // Update the ticket data on the backend using the PUT request\n            fetch(`http://${window.location.hostname}:8888/tickets/${ticket.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Session-Id': sessionId // Include the session ID as a custom header\n                },\n                body: JSON.stringify(ticketToSave),\n            })\n                .then((response) => {\n                    if (response.ok) {\n                        handleSaveResponse(true);\n                    } else {\n                        handleSaveResponse(false);\n                    }\n                })\n                .catch((error) => {\n                    console.error('Error updating ticket:', error);\n                    handleSaveResponse(false);\n                });\n        });\n    };\n    const handleToggleDoneClick = (ticketId) => {\n        // Find the ticket to be toggled from the tickets array\n        const ticketToToggle = tickets.find((ticket) => ticket.id === ticketId);\n\n        // Toggle the \"done\" value\n        const updatedDoneValue = !ticketToToggle.done;\n        ticketToToggle.done = !ticketToToggle.done;\n        // Update the ticket's \"done\" status on the backend using the PUT request\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Session-Id': sessionId // Include the session ID as a custom header\n            },\n            body: JSON.stringify(ticketToToggle), // Only send the \"done\" field in the update payload\n        })\n            .then((response) => {\n                if (response.ok) {\n                    // Update the \"done\" value in the frontend state\n                    handleFieldChange(ticketId, 'done', updatedDoneValue);\n                    message.success('Ticket status updated successfully!'); // Show success toast message\n                } else {\n                    message.error('Failed to update ticket status. Please try again.'); // Show error toast message\n                }\n            })\n            .catch((error) => {\n                console.error('Error updating ticket status:', error);\n                message.error('An error occurred while updating the ticket status. Please try again.'); // Show error toast message\n            });\n    };\n\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id',\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('id'),\n            }),\n        },\n        {\n            title: 'First Name',\n            dataIndex: 'firstName',\n            key: 'firstName',\n            render: (text, record) => (\n                <Input \n                style={styles.input}\n                    value={record.firstName}\n                    onChange={(e) => handleFieldChange(record.id, 'firstName', e.target.value)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('firstName'),\n            }),\n        },\n        {\n            title: 'Last Name',\n            dataIndex: 'lastName',\n            key: 'lastName',\n            render: (text, record) => (\n                <Input\n                style={styles.input}\n                    value={record.lastName}\n                    onChange={(e) => handleFieldChange(record.id, 'lastName', e.target.value)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('lastName'),\n            }),\n        },\n        {\n            title: 'Schedule Appointment',\n            dataIndex: 'scheduleAppointment',\n            key: 'scheduleAppointment',\n            render: (text, record) => (\n                <Checkbox\n                    checked={record.scheduleAppointment}\n                    onChange={(e) => handleFieldChange(record.id, 'scheduleAppointment', e.target.checked)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('scheduleAppointment'),\n            }),\n        },\n        {\n            title: 'First Time Visitor',\n            dataIndex: 'firstTimeVisitor',\n            key: 'firstTimeVisitor',\n            render: (text, record) => (\n                <Checkbox\n                    checked={record.firstTimeVisitor}\n                    onChange={(e) => handleFieldChange(record.id, 'firstTimeVisitor', e.target.checked)}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('firstTimeVisitor'),\n            }),\n        },\n        {\n            title: 'Sign In Time',\n            dataIndex: 'time',\n            key: 'time',\n            render: (text, record) => (\n                // <span>{record.time? getDateInPacTime(record.time + \"Z\") : \"N/A\"}</span>\n                <span>{record.time? getDateInPacTime(record.time) : \"N/A\"}</span>\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('time'),\n            }),\n        },\n        {\n            title: 'Schedule Appointment Time',\n            dataIndex: 'scheduleAppointmentTime',\n            key: 'scheduleAppointmentTime',\n            render: (text, record) => (\n                <span>\n                    {record.scheduleAppointmentTime\n                        ? getDateInPacTime(record.scheduleAppointmentTime)\n                        : 'N/A'}\n                </span>\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('scheduleAppointmentTime'),\n            }),\n        },\n        {\n            title: 'Position in Line',\n            dataIndex: 'positionInLine',\n            key: 'positionInLine',\n            render: (text, record) => (\n                <Input\n                style={{width: '50px'}}\n                    type=\"number\"\n                    value={record.positionInLine}\n                    onChange={(e) => handleFieldChange(record.id, 'positionInLine', parseInt(e.target.value))}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTicketsByPosition('positionInLine'),\n            }),\n        },\n        {\n            title: 'Additional Notes',\n            dataIndex: 'additionalNotes',\n            key: 'additionalNotes',\n            render: (text, record) => (\n                <textarea\n                    value={record.additionalNotes}\n                    onChange={(e) => handleFieldChange(record.id, 'additionalNotes', e.target.value)}\n                    style={{ width: '100%', minHeight: 100 }}\n                />\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('additionalNotes'),\n            }),\n        },\n        {\n            title: 'Done',\n            dataIndex: 'done',\n            key: 'done',\n            render: (text, record) => (\n                <Button\n                    onClick={() => handleToggleDoneClick(record.id)}\n                    style={{\n                        backgroundColor: record.done ? 'green' : 'red',\n                        color: 'white',\n                    }}\n                >{record.done ? 'Done' : 'Not Done'}</Button>\n            ),\n            onHeaderCell: () => ({\n                onClick: () => sortTickets('done'),\n            }),\n        },\n        {\n            title: 'Save',\n            key: 'save',\n            render: (text, record) => (\n                <Button onClick={() => handleSaveClick(record.id)}>Save</Button>\n            ),\n        },\n        {\n            title: 'Delete',\n            key: 'delete',\n            render: (text, record) => (\n                <Button onClick={() => handleDeleteClick(record.id)}>Delete</Button>\n            ),\n        },\n    ];\n\n    const handleRefreshClick = () => {\n        console.log(\"refresh clicked\")\n\n        // Send a request to the backend with the \"RefreshToken\" header\n        //         fetch('http://' + window.location.hostname + ':8888/tickets')\n\n        fetch('http://' + window.location.hostname + ':8888/refresh', {\n            method: 'GET',\n            headers: {\n                'RefreshToken': 'refreshToken', // Replace with your actual refresh token\n            },\n        })\n            .then(response => response.json())\n            .then(data => {\n                console.log(\"refresh Succes\")\n            })\n            .catch(error => {\n                console.error('Error refreshing data:', error);\n            });\n    };\n\n\n    const getDateInPacTime = (newDate) => {\n        const dateObj = new Date(newDate);\n        const pacificDateTime = dateObj.toLocaleString('en-US', { timeZone: 'America/Los_Angeles', hour12: true });\n\n        return <>{pacificDateTime}</>;\n    };\n\n    const getDateInPacTimeAsString = (newDate) => {\n        const dateObj = new Date(newDate);\n        const pacificDateTime = dateObj.toLocaleString('en-US', { timeZone: 'America/Los_Angeles', hour12: true });\n        return `\"${pacificDateTime.toString()}\"`.replace(/,/g, ' ');\n    };\n\n    return (\n        <div style={styles.container}>\n\n            <h2 style={styles.title}>Ticketing System Administrator Mode</h2>\n            <div style={styles.buttonsTopLeft}>\n                <Button style={{ marginRight: '15px' }} type=\"primary\" onClick={handleExportCsv}>Export Data As CSV</Button>\n                <Button style={{ marginRight: '15px' }} type=\"primary\" onClick={handleSaveAllClick}>Save All Changes</Button>\n                <Button type=\"primary\" onClick={handleRefreshClick}>Refresh Serving Customer Page</Button>\n\n                <div style={{ marginTop: '10px' }}>\n                    <Checkbox checked={showDoneItems} onChange={() => setShowDoneItems(!showDoneItems)}>\n                        Show Done Items\n                    </Checkbox>\n                </div>\n            </div>\n            <Table\n                dataSource={tickets.filter(ticket => (showDoneItems || !ticket.done))}\n                columns={columns}\n                rowKey=\"id\"\n            />\n            {/* {currentimeTest()} */}\n            <ToastContainer />\n        </div>\n    );\n};\n\nconst styles = {\n    input: {\n        width: '200px'\n    },\n    container: {\n        padding: '90px'\n    },\n    title: {\n        textAlign: 'center'\n    },\n    buttonsTopLeft: {\n        position: 'absolute',\n        top: '30px', // Adjust the top position\n        left: '30px', // Adjust the left position\n    },\n};\n\nexport default AdminPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}