{"ast":null,"code":"import _objectSpread from\"@babel/runtime/helpers/esm/objectSpread2\";import*as React from'react';import{convertDataToEntities}from\"rc-tree/es/utils/treeUtil\";import{VALUE_SPLIT}from\"../utils/commonUtil\";/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */export default(function(options,fieldNames){var cacheRef=React.useRef({options:null,info:null});var getEntities=React.useCallback(function(){if(cacheRef.current.options!==options){cacheRef.current.options=options;cacheRef.current.info=convertDataToEntities(options,{fieldNames:fieldNames,initWrapper:function initWrapper(wrapper){return _objectSpread(_objectSpread({},wrapper),{},{pathKeyEntities:{}});},processEntity:function processEntity(entity,wrapper){var pathKey=entity.nodes.map(function(node){return node[fieldNames.value];}).join(VALUE_SPLIT);wrapper.pathKeyEntities[pathKey]=entity;// Overwrite origin key.\n// this is very hack but we need let conduct logic work with connect path\nentity.key=pathKey;}});}return cacheRef.current.info.pathKeyEntities;},[fieldNames,options]);return getEntities;});","map":{"version":3,"names":["_objectSpread","React","convertDataToEntities","VALUE_SPLIT","options","fieldNames","cacheRef","useRef","info","getEntities","useCallback","current","initWrapper","wrapper","pathKeyEntities","processEntity","entity","pathKey","nodes","map","node","value","join","key"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-cascader/es/hooks/useEntities.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { VALUE_SPLIT } from \"../utils/commonUtil\";\n/** Lazy parse options data into conduct-able info to avoid perf issue in single mode */\nexport default (function (options, fieldNames) {\n  var cacheRef = React.useRef({\n    options: null,\n    info: null\n  });\n  var getEntities = React.useCallback(function () {\n    if (cacheRef.current.options !== options) {\n      cacheRef.current.options = options;\n      cacheRef.current.info = convertDataToEntities(options, {\n        fieldNames: fieldNames,\n        initWrapper: function initWrapper(wrapper) {\n          return _objectSpread(_objectSpread({}, wrapper), {}, {\n            pathKeyEntities: {}\n          });\n        },\n        processEntity: function processEntity(entity, wrapper) {\n          var pathKey = entity.nodes.map(function (node) {\n            return node[fieldNames.value];\n          }).join(VALUE_SPLIT);\n          wrapper.pathKeyEntities[pathKey] = entity;\n\n          // Overwrite origin key.\n          // this is very hack but we need let conduct logic work with connect path\n          entity.key = pathKey;\n        }\n      });\n    }\n    return cacheRef.current.info.pathKeyEntities;\n  }, [fieldNames, options]);\n  return getEntities;\n});"],"mappings":"AAAA,MAAO,CAAAA,aAAa,KAAM,0CAA0C,CACpE,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,OAASC,qBAAqB,KAAQ,2BAA2B,CACjE,OAASC,WAAW,KAAQ,qBAAqB,CACjD,wFACA,eAAgB,SAAUC,OAAO,CAAEC,UAAU,CAAE,CAC7C,GAAI,CAAAC,QAAQ,CAAGL,KAAK,CAACM,MAAM,CAAC,CAC1BH,OAAO,CAAE,IAAI,CACbI,IAAI,CAAE,IACR,CAAC,CAAC,CACF,GAAI,CAAAC,WAAW,CAAGR,KAAK,CAACS,WAAW,CAAC,UAAY,CAC9C,GAAIJ,QAAQ,CAACK,OAAO,CAACP,OAAO,GAAKA,OAAO,CAAE,CACxCE,QAAQ,CAACK,OAAO,CAACP,OAAO,CAAGA,OAAO,CAClCE,QAAQ,CAACK,OAAO,CAACH,IAAI,CAAGN,qBAAqB,CAACE,OAAO,CAAE,CACrDC,UAAU,CAAEA,UAAU,CACtBO,WAAW,CAAE,QAAS,CAAAA,WAAWA,CAACC,OAAO,CAAE,CACzC,MAAO,CAAAb,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,CAAEa,OAAO,CAAC,CAAE,CAAC,CAAC,CAAE,CACnDC,eAAe,CAAE,CAAC,CACpB,CAAC,CAAC,CACJ,CAAC,CACDC,aAAa,CAAE,QAAS,CAAAA,aAAaA,CAACC,MAAM,CAAEH,OAAO,CAAE,CACrD,GAAI,CAAAI,OAAO,CAAGD,MAAM,CAACE,KAAK,CAACC,GAAG,CAAC,SAAUC,IAAI,CAAE,CAC7C,MAAO,CAAAA,IAAI,CAACf,UAAU,CAACgB,KAAK,CAAC,CAC/B,CAAC,CAAC,CAACC,IAAI,CAACnB,WAAW,CAAC,CACpBU,OAAO,CAACC,eAAe,CAACG,OAAO,CAAC,CAAGD,MAAM,CAEzC;AACA;AACAA,MAAM,CAACO,GAAG,CAAGN,OAAO,CACtB,CACF,CAAC,CAAC,CACJ,CACA,MAAO,CAAAX,QAAQ,CAACK,OAAO,CAACH,IAAI,CAACM,eAAe,CAC9C,CAAC,CAAE,CAACT,UAAU,CAAED,OAAO,CAAC,CAAC,CACzB,MAAO,CAAAK,WAAW,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}