{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import{isE,isEmpty,num2str,trimNumber,validateNumber}from\"./numberUtil\";var BigIntDecimal=/*#__PURE__*/function(){/** BigInt will convert `0009` to `9`. We need record the len of decimal */function BigIntDecimal(value){_classCallCheck(this,BigIntDecimal);_defineProperty(this,\"origin\",'');_defineProperty(this,\"negative\",void 0);_defineProperty(this,\"integer\",void 0);_defineProperty(this,\"decimal\",void 0);_defineProperty(this,\"decimalLen\",void 0);_defineProperty(this,\"empty\",void 0);_defineProperty(this,\"nan\",void 0);if(isEmpty(value)){this.empty=true;return;}this.origin=String(value);// Act like Number convert\nif(value==='-'||Number.isNaN(value)){this.nan=true;return;}var mergedValue=value;// We need convert back to Number since it require `toFixed` to handle this\nif(isE(mergedValue)){mergedValue=Number(mergedValue);}mergedValue=typeof mergedValue==='string'?mergedValue:num2str(mergedValue);if(validateNumber(mergedValue)){var trimRet=trimNumber(mergedValue);this.negative=trimRet.negative;var numbers=trimRet.trimStr.split('.');this.integer=BigInt(numbers[0]);var decimalStr=numbers[1]||'0';this.decimal=BigInt(decimalStr);this.decimalLen=decimalStr.length;}else{this.nan=true;}}_createClass(BigIntDecimal,[{key:\"getMark\",value:function getMark(){return this.negative?'-':'';}},{key:\"getIntegerStr\",value:function getIntegerStr(){return this.integer.toString();}/**\n     * @private get decimal string\n     */},{key:\"getDecimalStr\",value:function getDecimalStr(){return this.decimal.toString().padStart(this.decimalLen,'0');}/**\n     * @private Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */},{key:\"alignDecimal\",value:function alignDecimal(decimalLength){var str=\"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength,'0'));return BigInt(str);}},{key:\"negate\",value:function negate(){var clone=new BigIntDecimal(this.toString());clone.negative=!clone.negative;return clone;}},{key:\"cal\",value:function cal(offset,calculator,calDecimalLen){var maxDecimalLength=Math.max(this.getDecimalStr().length,offset.getDecimalStr().length);var myAlignedDecimal=this.alignDecimal(maxDecimalLength);var offsetAlignedDecimal=offset.alignDecimal(maxDecimalLength);var valueStr=calculator(myAlignedDecimal,offsetAlignedDecimal).toString();var nextDecimalLength=calDecimalLen(maxDecimalLength);// We need fill string length back to `maxDecimalLength` to avoid parser failed\nvar _trimNumber=trimNumber(valueStr),negativeStr=_trimNumber.negativeStr,trimStr=_trimNumber.trimStr;var hydrateValueStr=\"\".concat(negativeStr).concat(trimStr.padStart(nextDecimalLength+1,'0'));return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0,-nextDecimalLength),\".\").concat(hydrateValueStr.slice(-nextDecimalLength)));}},{key:\"add\",value:function add(value){if(this.isInvalidate()){return new BigIntDecimal(value);}var offset=new BigIntDecimal(value);if(offset.isInvalidate()){return this;}return this.cal(offset,function(num1,num2){return num1+num2;},function(len){return len;});}},{key:\"multi\",value:function multi(value){var target=new BigIntDecimal(value);if(this.isInvalidate()||target.isInvalidate()){return new BigIntDecimal(NaN);}return this.cal(target,function(num1,num2){return num1*num2;},function(len){return len*2;});}},{key:\"isEmpty\",value:function isEmpty(){return this.empty;}},{key:\"isNaN\",value:function isNaN(){return this.nan;}},{key:\"isInvalidate\",value:function isInvalidate(){return this.isEmpty()||this.isNaN();}},{key:\"equals\",value:function equals(target){return this.toString()===(target===null||target===void 0?void 0:target.toString());}},{key:\"lessEquals\",value:function lessEquals(target){return this.add(target.negate().toString()).toNumber()<=0;}},{key:\"toNumber\",value:function toNumber(){if(this.isNaN()){return NaN;}return Number(this.toString());}},{key:\"toString\",value:function toString(){var safe=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;if(!safe){return this.origin;}if(this.isInvalidate()){return'';}return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(),\".\").concat(this.getDecimalStr())).fullStr;}}]);return BigIntDecimal;}();export{BigIntDecimal as default};","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","isE","isEmpty","num2str","trimNumber","validateNumber","BigIntDecimal","value","empty","origin","String","Number","isNaN","nan","mergedValue","trimRet","negative","numbers","trimStr","split","integer","BigInt","decimalStr","decimal","decimalLen","length","key","getMark","getIntegerStr","toString","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","negate","clone","cal","offset","calculator","calDecimalLen","maxDecimalLength","Math","max","myAlignedDecimal","offsetAlignedDecimal","valueStr","nextDecimalLength","_trimNumber","negativeStr","hydrateValueStr","slice","add","isInvalidate","num1","num2","len","multi","target","NaN","equals","lessEquals","toNumber","safe","arguments","undefined","fullStr","default"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/@rc-component/mini-decimal/es/BigIntDecimal.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { isE, isEmpty, num2str, trimNumber, validateNumber } from \"./numberUtil\";\nvar BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n    _defineProperty(this, \"origin\", '');\n    _defineProperty(this, \"negative\", void 0);\n    _defineProperty(this, \"integer\", void 0);\n    _defineProperty(this, \"decimal\", void 0);\n    _defineProperty(this, \"decimalLen\", void 0);\n    _defineProperty(this, \"empty\", void 0);\n    _defineProperty(this, \"nan\", void 0);\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n    this.origin = String(value);\n\n    // Act like Number convert\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n    var mergedValue = value;\n\n    // We need convert back to Number since it require `toFixed` to handle this\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n\n    /**\n     * @private get decimal string\n     */\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n\n    /**\n     * @private Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"cal\",\n    value: function cal(offset, calculator, calDecimalLen) {\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = calculator(myAlignedDecimal, offsetAlignedDecimal).toString();\n      var nextDecimalLength = calDecimalLen(maxDecimalLength);\n\n      // We need fill string length back to `maxDecimalLength` to avoid parser failed\n      var _trimNumber = trimNumber(valueStr),\n        negativeStr = _trimNumber.negativeStr,\n        trimStr = _trimNumber.trimStr;\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(nextDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -nextDecimalLength), \".\").concat(hydrateValueStr.slice(-nextDecimalLength)));\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n      var offset = new BigIntDecimal(value);\n      if (offset.isInvalidate()) {\n        return this;\n      }\n      return this.cal(offset, function (num1, num2) {\n        return num1 + num2;\n      }, function (len) {\n        return len;\n      });\n    }\n  }, {\n    key: \"multi\",\n    value: function multi(value) {\n      var target = new BigIntDecimal(value);\n      if (this.isInvalidate() || target.isInvalidate()) {\n        return new BigIntDecimal(NaN);\n      }\n      return this.cal(target, function (num1, num2) {\n        return num1 * num2;\n      }, function (len) {\n        return len * 2;\n      });\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (!safe) {\n        return this.origin;\n      }\n      if (this.isInvalidate()) {\n        return '';\n      }\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n  return BigIntDecimal;\n}();\nexport { BigIntDecimal as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}