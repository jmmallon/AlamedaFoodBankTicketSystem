{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"@babel/runtime/helpers/esm/createClass\";import _defineProperty from\"@babel/runtime/helpers/esm/defineProperty\";import _typeof from\"@babel/runtime/helpers/esm/typeof\";var SPLIT='__@field_split__';/**\n * Convert name path into string to fast the fetch speed of Map.\n */function normalize(namePath){return namePath.map(function(cell){return\"\".concat(_typeof(cell),\":\").concat(cell);})// Magic split\n.join(SPLIT);}/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */var NameMap=/*#__PURE__*/function(){function NameMap(){_classCallCheck(this,NameMap);_defineProperty(this,\"kvs\",new Map());}_createClass(NameMap,[{key:\"set\",value:function set(key,value){this.kvs.set(normalize(key),value);}},{key:\"get\",value:function get(key){return this.kvs.get(normalize(key));}},{key:\"update\",value:function update(key,updater){var origin=this.get(key);var next=updater(origin);if(!next){this.delete(key);}else{this.set(key,next);}}},{key:\"delete\",value:function _delete(key){this.kvs.delete(normalize(key));}// Since we only use this in test, let simply realize this\n},{key:\"map\",value:function map(callback){return _toConsumableArray(this.kvs.entries()).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];var cells=key.split(SPLIT);return callback({key:cells.map(function(cell){var _cell$match=cell.match(/^([^:]*):(.*)$/),_cell$match2=_slicedToArray(_cell$match,3),type=_cell$match2[1],unit=_cell$match2[2];return type==='number'?Number(unit):unit;}),value:value});});}},{key:\"toJSON\",value:function toJSON(){var json={};this.map(function(_ref3){var key=_ref3.key,value=_ref3.value;json[key.join('.')]=value;return null;});return json;}}]);return NameMap;}();export default NameMap;","map":{"version":3,"names":["_slicedToArray","_toConsumableArray","_classCallCheck","_createClass","_defineProperty","_typeof","SPLIT","normalize","namePath","map","cell","concat","join","NameMap","Map","key","value","set","kvs","get","update","updater","origin","next","delete","_delete","callback","entries","_ref","_ref2","cells","split","_cell$match","match","_cell$match2","type","unit","Number","toJSON","json","_ref3"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-field-form/es/utils/NameMap.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar SPLIT = '__@field_split__';\n\n/**\n * Convert name path into string to fast the fetch speed of Map.\n */\nfunction normalize(namePath) {\n  return namePath.map(function (cell) {\n    return \"\".concat(_typeof(cell), \":\").concat(cell);\n  })\n  // Magic split\n  .join(SPLIT);\n}\n\n/**\n * NameMap like a `Map` but accepts `string[]` as key.\n */\nvar NameMap = /*#__PURE__*/function () {\n  function NameMap() {\n    _classCallCheck(this, NameMap);\n    _defineProperty(this, \"kvs\", new Map());\n  }\n  _createClass(NameMap, [{\n    key: \"set\",\n    value: function set(key, value) {\n      this.kvs.set(normalize(key), value);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return this.kvs.get(normalize(key));\n    }\n  }, {\n    key: \"update\",\n    value: function update(key, updater) {\n      var origin = this.get(key);\n      var next = updater(origin);\n      if (!next) {\n        this.delete(key);\n      } else {\n        this.set(key, next);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      this.kvs.delete(normalize(key));\n    }\n\n    // Since we only use this in test, let simply realize this\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      return _toConsumableArray(this.kvs.entries()).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        var cells = key.split(SPLIT);\n        return callback({\n          key: cells.map(function (cell) {\n            var _cell$match = cell.match(/^([^:]*):(.*)$/),\n              _cell$match2 = _slicedToArray(_cell$match, 3),\n              type = _cell$match2[1],\n              unit = _cell$match2[2];\n            return type === 'number' ? Number(unit) : unit;\n          }),\n          value: value\n        });\n      });\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var json = {};\n      this.map(function (_ref3) {\n        var key = _ref3.key,\n          value = _ref3.value;\n        json[key.join('.')] = value;\n        return null;\n      });\n      return json;\n    }\n  }]);\n  return NameMap;\n}();\nexport default NameMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}