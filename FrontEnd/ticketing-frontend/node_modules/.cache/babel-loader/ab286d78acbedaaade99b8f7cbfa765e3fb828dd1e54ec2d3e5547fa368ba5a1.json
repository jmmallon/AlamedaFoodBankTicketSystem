{"ast":null,"code":"import _extends from\"@babel/runtime/helpers/esm/extends\";import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"@babel/runtime/helpers/esm/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/esm/objectWithoutProperties\";import _typeof from\"@babel/runtime/helpers/esm/typeof\";var _excluded=[\"id\",\"prefixCls\",\"value\",\"defaultValue\",\"onChange\",\"onSelect\",\"onDeselect\",\"searchValue\",\"inputValue\",\"onSearch\",\"autoClearSearchValue\",\"filterTreeNode\",\"treeNodeFilterProp\",\"showCheckedStrategy\",\"treeNodeLabelProp\",\"multiple\",\"treeCheckable\",\"treeCheckStrictly\",\"labelInValue\",\"fieldNames\",\"treeDataSimpleMode\",\"treeData\",\"children\",\"loadData\",\"treeLoadedKeys\",\"onTreeLoad\",\"treeDefaultExpandAll\",\"treeExpandedKeys\",\"treeDefaultExpandedKeys\",\"onTreeExpand\",\"treeExpandAction\",\"virtual\",\"listHeight\",\"listItemHeight\",\"listItemScrollOffset\",\"onDropdownVisibleChange\",\"dropdownMatchSelectWidth\",\"treeLine\",\"treeIcon\",\"showTreeIcon\",\"switcherIcon\",\"treeMotion\",\"treeTitleRender\"];import{BaseSelect}from'rc-select';import useId from\"rc-select/es/hooks/useId\";import{conductCheck}from\"rc-tree/es/utils/conductUtil\";import useMergedState from\"rc-util/es/hooks/useMergedState\";import warning from\"rc-util/es/warning\";import*as React from'react';import useCache from\"./hooks/useCache\";import useCheckedKeys from\"./hooks/useCheckedKeys\";import useDataEntities from\"./hooks/useDataEntities\";import useFilterTreeData from\"./hooks/useFilterTreeData\";import useRefFunc from\"./hooks/useRefFunc\";import useTreeData from\"./hooks/useTreeData\";import LegacyContext from\"./LegacyContext\";import OptionList from\"./OptionList\";import TreeNode from\"./TreeNode\";import TreeSelectContext from\"./TreeSelectContext\";import{fillAdditionalInfo,fillLegacyProps}from\"./utils/legacyUtil\";import{formatStrategyValues,SHOW_ALL,SHOW_CHILD,SHOW_PARENT}from\"./utils/strategyUtil\";import{fillFieldNames,isNil,toArray}from\"./utils/valueUtil\";import warningProps from\"./utils/warningPropsUtil\";/** @deprecated This is only used for legacy compatible. Not works on new code. */function isRawValue(value){return!value||_typeof(value)!=='object';}var TreeSelect=/*#__PURE__*/React.forwardRef(function(props,ref){var id=props.id,_props$prefixCls=props.prefixCls,prefixCls=_props$prefixCls===void 0?'rc-tree-select':_props$prefixCls,value=props.value,defaultValue=props.defaultValue,onChange=props.onChange,onSelect=props.onSelect,onDeselect=props.onDeselect,searchValue=props.searchValue,inputValue=props.inputValue,onSearch=props.onSearch,_props$autoClearSearc=props.autoClearSearchValue,autoClearSearchValue=_props$autoClearSearc===void 0?true:_props$autoClearSearc,filterTreeNode=props.filterTreeNode,_props$treeNodeFilter=props.treeNodeFilterProp,treeNodeFilterProp=_props$treeNodeFilter===void 0?'value':_props$treeNodeFilter,showCheckedStrategy=props.showCheckedStrategy,treeNodeLabelProp=props.treeNodeLabelProp,multiple=props.multiple,treeCheckable=props.treeCheckable,treeCheckStrictly=props.treeCheckStrictly,labelInValue=props.labelInValue,fieldNames=props.fieldNames,treeDataSimpleMode=props.treeDataSimpleMode,treeData=props.treeData,children=props.children,loadData=props.loadData,treeLoadedKeys=props.treeLoadedKeys,onTreeLoad=props.onTreeLoad,treeDefaultExpandAll=props.treeDefaultExpandAll,treeExpandedKeys=props.treeExpandedKeys,treeDefaultExpandedKeys=props.treeDefaultExpandedKeys,onTreeExpand=props.onTreeExpand,treeExpandAction=props.treeExpandAction,virtual=props.virtual,_props$listHeight=props.listHeight,listHeight=_props$listHeight===void 0?200:_props$listHeight,_props$listItemHeight=props.listItemHeight,listItemHeight=_props$listItemHeight===void 0?20:_props$listItemHeight,_props$listItemScroll=props.listItemScrollOffset,listItemScrollOffset=_props$listItemScroll===void 0?0:_props$listItemScroll,onDropdownVisibleChange=props.onDropdownVisibleChange,_props$dropdownMatchS=props.dropdownMatchSelectWidth,dropdownMatchSelectWidth=_props$dropdownMatchS===void 0?true:_props$dropdownMatchS,treeLine=props.treeLine,treeIcon=props.treeIcon,showTreeIcon=props.showTreeIcon,switcherIcon=props.switcherIcon,treeMotion=props.treeMotion,treeTitleRender=props.treeTitleRender,restProps=_objectWithoutProperties(props,_excluded);var mergedId=useId(id);var treeConduction=treeCheckable&&!treeCheckStrictly;var mergedCheckable=treeCheckable||treeCheckStrictly;var mergedLabelInValue=treeCheckStrictly||labelInValue;var mergedMultiple=mergedCheckable||multiple;var _useMergedState=useMergedState(defaultValue,{value:value}),_useMergedState2=_slicedToArray(_useMergedState,2),internalValue=_useMergedState2[0],setInternalValue=_useMergedState2[1];// `multiple` && `!treeCheckable` should be show all\nvar mergedShowCheckedStrategy=React.useMemo(function(){if(!treeCheckable){return SHOW_ALL;}return showCheckedStrategy||SHOW_CHILD;},[showCheckedStrategy,treeCheckable]);// ========================== Warning ===========================\nif(process.env.NODE_ENV!=='production'){warningProps(props);}// ========================= FieldNames =========================\nvar mergedFieldNames=React.useMemo(function(){return fillFieldNames(fieldNames);},/* eslint-disable react-hooks/exhaustive-deps */[JSON.stringify(fieldNames)]/* eslint-enable react-hooks/exhaustive-deps */);// =========================== Search ===========================\nvar _useMergedState3=useMergedState('',{value:searchValue!==undefined?searchValue:inputValue,postState:function postState(search){return search||'';}}),_useMergedState4=_slicedToArray(_useMergedState3,2),mergedSearchValue=_useMergedState4[0],setSearchValue=_useMergedState4[1];var onInternalSearch=function onInternalSearch(searchText){setSearchValue(searchText);onSearch===null||onSearch===void 0||onSearch(searchText);};// ============================ Data ============================\n// `useTreeData` only do convert of `children` or `simpleMode`.\n// Else will return origin `treeData` for perf consideration.\n// Do not do anything to loop the data.\nvar mergedTreeData=useTreeData(treeData,children,treeDataSimpleMode);var _useDataEntities=useDataEntities(mergedTreeData,mergedFieldNames),keyEntities=_useDataEntities.keyEntities,valueEntities=_useDataEntities.valueEntities;/** Get `missingRawValues` which not exist in the tree yet */var splitRawValues=React.useCallback(function(newRawValues){var missingRawValues=[];var existRawValues=[];// Keep missing value in the cache\nnewRawValues.forEach(function(val){if(valueEntities.has(val)){existRawValues.push(val);}else{missingRawValues.push(val);}});return{missingRawValues:missingRawValues,existRawValues:existRawValues};},[valueEntities]);// Filtered Tree\nvar filteredTreeData=useFilterTreeData(mergedTreeData,mergedSearchValue,{fieldNames:mergedFieldNames,treeNodeFilterProp:treeNodeFilterProp,filterTreeNode:filterTreeNode});// =========================== Label ============================\nvar getLabel=React.useCallback(function(item){if(item){if(treeNodeLabelProp){return item[treeNodeLabelProp];}// Loop from fieldNames\nvar titleList=mergedFieldNames._title;for(var i=0;i<titleList.length;i+=1){var title=item[titleList[i]];if(title!==undefined){return title;}}}},[mergedFieldNames,treeNodeLabelProp]);// ========================= Wrap Value =========================\nvar toLabeledValues=React.useCallback(function(draftValues){var values=toArray(draftValues);return values.map(function(val){if(isRawValue(val)){return{value:val};}return val;});},[]);var convert2LabelValues=React.useCallback(function(draftValues){var values=toLabeledValues(draftValues);return values.map(function(item){var rawLabel=item.label;var rawValue=item.value,rawHalfChecked=item.halfChecked;var rawDisabled;var entity=valueEntities.get(rawValue);// Fill missing label & status\nif(entity){var _rawLabel;rawLabel=(_rawLabel=rawLabel)!==null&&_rawLabel!==void 0?_rawLabel:getLabel(entity.node);rawDisabled=entity.node.disabled;}else if(rawLabel===undefined){// We try to find in current `labelInValue` value\nvar labelInValueItem=toLabeledValues(internalValue).find(function(labeledItem){return labeledItem.value===rawValue;});rawLabel=labelInValueItem.label;}return{label:rawLabel,value:rawValue,halfChecked:rawHalfChecked,disabled:rawDisabled};});},[valueEntities,getLabel,toLabeledValues,internalValue]);// =========================== Values ===========================\nvar rawMixedLabeledValues=React.useMemo(function(){return toLabeledValues(internalValue);},[toLabeledValues,internalValue]);// Split value into full check and half check\nvar _React$useMemo=React.useMemo(function(){var fullCheckValues=[];var halfCheckValues=[];rawMixedLabeledValues.forEach(function(item){if(item.halfChecked){halfCheckValues.push(item);}else{fullCheckValues.push(item);}});return[fullCheckValues,halfCheckValues];},[rawMixedLabeledValues]),_React$useMemo2=_slicedToArray(_React$useMemo,2),rawLabeledValues=_React$useMemo2[0],rawHalfLabeledValues=_React$useMemo2[1];// const [mergedValues] = useCache(rawLabeledValues);\nvar rawValues=React.useMemo(function(){return rawLabeledValues.map(function(item){return item.value;});},[rawLabeledValues]);// Convert value to key. Will fill missed keys for conduct check.\nvar _useCheckedKeys=useCheckedKeys(rawLabeledValues,rawHalfLabeledValues,treeConduction,keyEntities),_useCheckedKeys2=_slicedToArray(_useCheckedKeys,2),rawCheckedValues=_useCheckedKeys2[0],rawHalfCheckedValues=_useCheckedKeys2[1];// Convert rawCheckedKeys to check strategy related values\nvar displayValues=React.useMemo(function(){// Collect keys which need to show\nvar displayKeys=formatStrategyValues(rawCheckedValues,mergedShowCheckedStrategy,keyEntities,mergedFieldNames);// Convert to value and filled with label\nvar values=displayKeys.map(function(key){var _keyEntities$key$node,_keyEntities$key;return(_keyEntities$key$node=(_keyEntities$key=keyEntities[key])===null||_keyEntities$key===void 0||(_keyEntities$key=_keyEntities$key.node)===null||_keyEntities$key===void 0?void 0:_keyEntities$key[mergedFieldNames.value])!==null&&_keyEntities$key$node!==void 0?_keyEntities$key$node:key;});// Back fill with origin label\nvar labeledValues=values.map(function(val){var targetItem=rawLabeledValues.find(function(item){return item.value===val;});var label;// Ensure that when labelInValue is true, if label is undefined, it remains undefined.\nif(labelInValue&&targetItem.label!==undefined){label=targetItem.label;}else if(!labelInValue&&treeTitleRender){label=treeTitleRender(targetItem);}return{value:val,label:label};});var rawDisplayValues=convert2LabelValues(labeledValues);var firstVal=rawDisplayValues[0];if(!mergedMultiple&&firstVal&&isNil(firstVal.value)&&isNil(firstVal.label)){return[];}return rawDisplayValues.map(function(item){var _item$label;return _objectSpread(_objectSpread({},item),{},{label:(_item$label=item.label)!==null&&_item$label!==void 0?_item$label:item.value});});},[mergedFieldNames,mergedMultiple,rawCheckedValues,rawLabeledValues,convert2LabelValues,mergedShowCheckedStrategy,keyEntities]);var _useCache=useCache(displayValues),_useCache2=_slicedToArray(_useCache,1),cachedDisplayValues=_useCache2[0];// =========================== Change ===========================\nvar triggerChange=useRefFunc(function(newRawValues,extra,source){var labeledValues=convert2LabelValues(newRawValues);setInternalValue(labeledValues);// Clean up if needed\nif(autoClearSearchValue){setSearchValue('');}// Generate rest parameters is costly, so only do it when necessary\nif(onChange){var eventValues=newRawValues;if(treeConduction){var formattedKeyList=formatStrategyValues(newRawValues,mergedShowCheckedStrategy,keyEntities,mergedFieldNames);eventValues=formattedKeyList.map(function(key){var entity=valueEntities.get(key);return entity?entity.node[mergedFieldNames.value]:key;});}var _ref=extra||{triggerValue:undefined,selected:undefined},triggerValue=_ref.triggerValue,selected=_ref.selected;var returnRawValues=eventValues;// We need fill half check back\nif(treeCheckStrictly){var halfValues=rawHalfLabeledValues.filter(function(item){return!eventValues.includes(item.value);});returnRawValues=[].concat(_toConsumableArray(returnRawValues),_toConsumableArray(halfValues));}var returnLabeledValues=convert2LabelValues(returnRawValues);var additionalInfo={// [Legacy] Always return as array contains label & value\npreValue:rawLabeledValues,triggerValue:triggerValue};// [Legacy] Fill legacy data if user query.\n// This is expansive that we only fill when user query\n// https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\nvar showPosition=true;if(treeCheckStrictly||source==='selection'&&!selected){showPosition=false;}fillAdditionalInfo(additionalInfo,triggerValue,newRawValues,mergedTreeData,showPosition,mergedFieldNames);if(mergedCheckable){additionalInfo.checked=selected;}else{additionalInfo.selected=selected;}var returnValues=mergedLabelInValue?returnLabeledValues:returnLabeledValues.map(function(item){return item.value;});onChange(mergedMultiple?returnValues:returnValues[0],mergedLabelInValue?null:returnLabeledValues.map(function(item){return item.label;}),additionalInfo);}});// ========================== Options ===========================\n/** Trigger by option list */var onOptionSelect=React.useCallback(function(selectedKey,_ref2){var _node$mergedFieldName;var selected=_ref2.selected,source=_ref2.source;var entity=keyEntities[selectedKey];var node=entity===null||entity===void 0?void 0:entity.node;var selectedValue=(_node$mergedFieldName=node===null||node===void 0?void 0:node[mergedFieldNames.value])!==null&&_node$mergedFieldName!==void 0?_node$mergedFieldName:selectedKey;// Never be falsy but keep it safe\nif(!mergedMultiple){// Single mode always set value\ntriggerChange([selectedValue],{selected:true,triggerValue:selectedValue},'option');}else{var newRawValues=selected?[].concat(_toConsumableArray(rawValues),[selectedValue]):rawCheckedValues.filter(function(v){return v!==selectedValue;});// Add keys if tree conduction\nif(treeConduction){// Should keep missing values\nvar _splitRawValues=splitRawValues(newRawValues),missingRawValues=_splitRawValues.missingRawValues,existRawValues=_splitRawValues.existRawValues;var keyList=existRawValues.map(function(val){return valueEntities.get(val).key;});// Conduction by selected or not\nvar checkedKeys;if(selected){var _conductCheck=conductCheck(keyList,true,keyEntities);checkedKeys=_conductCheck.checkedKeys;}else{var _conductCheck2=conductCheck(keyList,{checked:false,halfCheckedKeys:rawHalfCheckedValues},keyEntities);checkedKeys=_conductCheck2.checkedKeys;}// Fill back of keys\nnewRawValues=[].concat(_toConsumableArray(missingRawValues),_toConsumableArray(checkedKeys.map(function(key){return keyEntities[key].node[mergedFieldNames.value];})));}triggerChange(newRawValues,{selected:selected,triggerValue:selectedValue},source||'option');}// Trigger select event\nif(selected||!mergedMultiple){onSelect===null||onSelect===void 0||onSelect(selectedValue,fillLegacyProps(node));}else{onDeselect===null||onDeselect===void 0||onDeselect(selectedValue,fillLegacyProps(node));}},[splitRawValues,valueEntities,keyEntities,mergedFieldNames,mergedMultiple,rawValues,triggerChange,treeConduction,onSelect,onDeselect,rawCheckedValues,rawHalfCheckedValues]);// ========================== Dropdown ==========================\nvar onInternalDropdownVisibleChange=React.useCallback(function(open){if(onDropdownVisibleChange){var legacyParam={};Object.defineProperty(legacyParam,'documentClickClose',{get:function get(){warning(false,'Second param of `onDropdownVisibleChange` has been removed.');return false;}});onDropdownVisibleChange(open,legacyParam);}},[onDropdownVisibleChange]);// ====================== Display Change ========================\nvar onDisplayValuesChange=useRefFunc(function(newValues,info){var newRawValues=newValues.map(function(item){return item.value;});if(info.type==='clear'){triggerChange(newRawValues,{},'selection');return;}// TreeSelect only have multiple mode which means display change only has remove\nif(info.values.length){onOptionSelect(info.values[0].value,{selected:false,source:'selection'});}});// ========================== Context ===========================\nvar treeSelectContext=React.useMemo(function(){return{virtual:virtual,dropdownMatchSelectWidth:dropdownMatchSelectWidth,listHeight:listHeight,listItemHeight:listItemHeight,listItemScrollOffset:listItemScrollOffset,treeData:filteredTreeData,fieldNames:mergedFieldNames,onSelect:onOptionSelect,treeExpandAction:treeExpandAction,treeTitleRender:treeTitleRender};},[virtual,dropdownMatchSelectWidth,listHeight,listItemHeight,listItemScrollOffset,filteredTreeData,mergedFieldNames,onOptionSelect,treeExpandAction,treeTitleRender]);// ======================= Legacy Context =======================\nvar legacyContext=React.useMemo(function(){return{checkable:mergedCheckable,loadData:loadData,treeLoadedKeys:treeLoadedKeys,onTreeLoad:onTreeLoad,checkedKeys:rawCheckedValues,halfCheckedKeys:rawHalfCheckedValues,treeDefaultExpandAll:treeDefaultExpandAll,treeExpandedKeys:treeExpandedKeys,treeDefaultExpandedKeys:treeDefaultExpandedKeys,onTreeExpand:onTreeExpand,treeIcon:treeIcon,treeMotion:treeMotion,showTreeIcon:showTreeIcon,switcherIcon:switcherIcon,treeLine:treeLine,treeNodeFilterProp:treeNodeFilterProp,keyEntities:keyEntities};},[mergedCheckable,loadData,treeLoadedKeys,onTreeLoad,rawCheckedValues,rawHalfCheckedValues,treeDefaultExpandAll,treeExpandedKeys,treeDefaultExpandedKeys,onTreeExpand,treeIcon,treeMotion,showTreeIcon,switcherIcon,treeLine,treeNodeFilterProp,keyEntities]);// =========================== Render ===========================\nreturn/*#__PURE__*/React.createElement(TreeSelectContext.Provider,{value:treeSelectContext},/*#__PURE__*/React.createElement(LegacyContext.Provider,{value:legacyContext},/*#__PURE__*/React.createElement(BaseSelect,_extends({ref:ref},restProps,{// >>> MISC\nid:mergedId,prefixCls:prefixCls,mode:mergedMultiple?'multiple':undefined// >>> Display Value\n,displayValues:cachedDisplayValues,onDisplayValuesChange:onDisplayValuesChange// >>> Search\n,searchValue:mergedSearchValue,onSearch:onInternalSearch// >>> Options\n,OptionList:OptionList,emptyOptions:!mergedTreeData.length,onDropdownVisibleChange:onInternalDropdownVisibleChange,dropdownMatchSelectWidth:dropdownMatchSelectWidth}))));});// Assign name for Debug\nif(process.env.NODE_ENV!=='production'){TreeSelect.displayName='TreeSelect';}var GenericTreeSelect=TreeSelect;GenericTreeSelect.TreeNode=TreeNode;GenericTreeSelect.SHOW_ALL=SHOW_ALL;GenericTreeSelect.SHOW_PARENT=SHOW_PARENT;GenericTreeSelect.SHOW_CHILD=SHOW_CHILD;export default GenericTreeSelect;","map":{"version":3,"names":["_extends","_toConsumableArray","_objectSpread","_slicedToArray","_objectWithoutProperties","_typeof","_excluded","BaseSelect","useId","conductCheck","useMergedState","warning","React","useCache","useCheckedKeys","useDataEntities","useFilterTreeData","useRefFunc","useTreeData","LegacyContext","OptionList","TreeNode","TreeSelectContext","fillAdditionalInfo","fillLegacyProps","formatStrategyValues","SHOW_ALL","SHOW_CHILD","SHOW_PARENT","fillFieldNames","isNil","toArray","warningProps","isRawValue","value","TreeSelect","forwardRef","props","ref","id","_props$prefixCls","prefixCls","defaultValue","onChange","onSelect","onDeselect","searchValue","inputValue","onSearch","_props$autoClearSearc","autoClearSearchValue","filterTreeNode","_props$treeNodeFilter","treeNodeFilterProp","showCheckedStrategy","treeNodeLabelProp","multiple","treeCheckable","treeCheckStrictly","labelInValue","fieldNames","treeDataSimpleMode","treeData","children","loadData","treeLoadedKeys","onTreeLoad","treeDefaultExpandAll","treeExpandedKeys","treeDefaultExpandedKeys","onTreeExpand","treeExpandAction","virtual","_props$listHeight","listHeight","_props$listItemHeight","listItemHeight","_props$listItemScroll","listItemScrollOffset","onDropdownVisibleChange","_props$dropdownMatchS","dropdownMatchSelectWidth","treeLine","treeIcon","showTreeIcon","switcherIcon","treeMotion","treeTitleRender","restProps","mergedId","treeConduction","mergedCheckable","mergedLabelInValue","mergedMultiple","_useMergedState","_useMergedState2","internalValue","setInternalValue","mergedShowCheckedStrategy","useMemo","process","env","NODE_ENV","mergedFieldNames","JSON","stringify","_useMergedState3","undefined","postState","search","_useMergedState4","mergedSearchValue","setSearchValue","onInternalSearch","searchText","mergedTreeData","_useDataEntities","keyEntities","valueEntities","splitRawValues","useCallback","newRawValues","missingRawValues","existRawValues","forEach","val","has","push","filteredTreeData","getLabel","item","titleList","_title","i","length","title","toLabeledValues","draftValues","values","map","convert2LabelValues","rawLabel","label","rawValue","rawHalfChecked","halfChecked","rawDisabled","entity","get","_rawLabel","node","disabled","labelInValueItem","find","labeledItem","rawMixedLabeledValues","_React$useMemo","fullCheckValues","halfCheckValues","_React$useMemo2","rawLabeledValues","rawHalfLabeledValues","rawValues","_useCheckedKeys","_useCheckedKeys2","rawCheckedValues","rawHalfCheckedValues","displayValues","displayKeys","key","_keyEntities$key$node","_keyEntities$key","labeledValues","targetItem","rawDisplayValues","firstVal","_item$label","_useCache","_useCache2","cachedDisplayValues","triggerChange","extra","source","eventValues","formattedKeyList","_ref","triggerValue","selected","returnRawValues","halfValues","filter","includes","concat","returnLabeledValues","additionalInfo","preValue","showPosition","checked","returnValues","onOptionSelect","selectedKey","_ref2","_node$mergedFieldName","selectedValue","v","_splitRawValues","keyList","checkedKeys","_conductCheck","_conductCheck2","halfCheckedKeys","onInternalDropdownVisibleChange","open","legacyParam","Object","defineProperty","onDisplayValuesChange","newValues","info","type","treeSelectContext","legacyContext","checkable","createElement","Provider","mode","emptyOptions","displayName","GenericTreeSelect"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-tree-select/es/TreeSelect.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"id\", \"prefixCls\", \"value\", \"defaultValue\", \"onChange\", \"onSelect\", \"onDeselect\", \"searchValue\", \"inputValue\", \"onSearch\", \"autoClearSearchValue\", \"filterTreeNode\", \"treeNodeFilterProp\", \"showCheckedStrategy\", \"treeNodeLabelProp\", \"multiple\", \"treeCheckable\", \"treeCheckStrictly\", \"labelInValue\", \"fieldNames\", \"treeDataSimpleMode\", \"treeData\", \"children\", \"loadData\", \"treeLoadedKeys\", \"onTreeLoad\", \"treeDefaultExpandAll\", \"treeExpandedKeys\", \"treeDefaultExpandedKeys\", \"onTreeExpand\", \"treeExpandAction\", \"virtual\", \"listHeight\", \"listItemHeight\", \"listItemScrollOffset\", \"onDropdownVisibleChange\", \"dropdownMatchSelectWidth\", \"treeLine\", \"treeIcon\", \"showTreeIcon\", \"switcherIcon\", \"treeMotion\", \"treeTitleRender\"];\nimport { BaseSelect } from 'rc-select';\nimport useId from \"rc-select/es/hooks/useId\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport * as React from 'react';\nimport useCache from \"./hooks/useCache\";\nimport useCheckedKeys from \"./hooks/useCheckedKeys\";\nimport useDataEntities from \"./hooks/useDataEntities\";\nimport useFilterTreeData from \"./hooks/useFilterTreeData\";\nimport useRefFunc from \"./hooks/useRefFunc\";\nimport useTreeData from \"./hooks/useTreeData\";\nimport LegacyContext from \"./LegacyContext\";\nimport OptionList from \"./OptionList\";\nimport TreeNode from \"./TreeNode\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport { fillAdditionalInfo, fillLegacyProps } from \"./utils/legacyUtil\";\nimport { formatStrategyValues, SHOW_ALL, SHOW_CHILD, SHOW_PARENT } from \"./utils/strategyUtil\";\nimport { fillFieldNames, isNil, toArray } from \"./utils/valueUtil\";\nimport warningProps from \"./utils/warningPropsUtil\";\n\n/** @deprecated This is only used for legacy compatible. Not works on new code. */\n\nfunction isRawValue(value) {\n  return !value || _typeof(value) !== 'object';\n}\nvar TreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var id = props.id,\n    _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? 'rc-tree-select' : _props$prefixCls,\n    value = props.value,\n    defaultValue = props.defaultValue,\n    onChange = props.onChange,\n    onSelect = props.onSelect,\n    onDeselect = props.onDeselect,\n    searchValue = props.searchValue,\n    inputValue = props.inputValue,\n    onSearch = props.onSearch,\n    _props$autoClearSearc = props.autoClearSearchValue,\n    autoClearSearchValue = _props$autoClearSearc === void 0 ? true : _props$autoClearSearc,\n    filterTreeNode = props.filterTreeNode,\n    _props$treeNodeFilter = props.treeNodeFilterProp,\n    treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n    showCheckedStrategy = props.showCheckedStrategy,\n    treeNodeLabelProp = props.treeNodeLabelProp,\n    multiple = props.multiple,\n    treeCheckable = props.treeCheckable,\n    treeCheckStrictly = props.treeCheckStrictly,\n    labelInValue = props.labelInValue,\n    fieldNames = props.fieldNames,\n    treeDataSimpleMode = props.treeDataSimpleMode,\n    treeData = props.treeData,\n    children = props.children,\n    loadData = props.loadData,\n    treeLoadedKeys = props.treeLoadedKeys,\n    onTreeLoad = props.onTreeLoad,\n    treeDefaultExpandAll = props.treeDefaultExpandAll,\n    treeExpandedKeys = props.treeExpandedKeys,\n    treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n    onTreeExpand = props.onTreeExpand,\n    treeExpandAction = props.treeExpandAction,\n    virtual = props.virtual,\n    _props$listHeight = props.listHeight,\n    listHeight = _props$listHeight === void 0 ? 200 : _props$listHeight,\n    _props$listItemHeight = props.listItemHeight,\n    listItemHeight = _props$listItemHeight === void 0 ? 20 : _props$listItemHeight,\n    _props$listItemScroll = props.listItemScrollOffset,\n    listItemScrollOffset = _props$listItemScroll === void 0 ? 0 : _props$listItemScroll,\n    onDropdownVisibleChange = props.onDropdownVisibleChange,\n    _props$dropdownMatchS = props.dropdownMatchSelectWidth,\n    dropdownMatchSelectWidth = _props$dropdownMatchS === void 0 ? true : _props$dropdownMatchS,\n    treeLine = props.treeLine,\n    treeIcon = props.treeIcon,\n    showTreeIcon = props.showTreeIcon,\n    switcherIcon = props.switcherIcon,\n    treeMotion = props.treeMotion,\n    treeTitleRender = props.treeTitleRender,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var mergedId = useId(id);\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue;\n  var mergedMultiple = mergedCheckable || multiple;\n  var _useMergedState = useMergedState(defaultValue, {\n      value: value\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    internalValue = _useMergedState2[0],\n    setInternalValue = _useMergedState2[1];\n\n  // `multiple` && `!treeCheckable` should be show all\n  var mergedShowCheckedStrategy = React.useMemo(function () {\n    if (!treeCheckable) {\n      return SHOW_ALL;\n    }\n    return showCheckedStrategy || SHOW_CHILD;\n  }, [showCheckedStrategy, treeCheckable]);\n\n  // ========================== Warning ===========================\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  }\n\n  // ========================= FieldNames =========================\n  var mergedFieldNames = React.useMemo(function () {\n    return fillFieldNames(fieldNames);\n  }, /* eslint-disable react-hooks/exhaustive-deps */\n  [JSON.stringify(fieldNames)]\n  /* eslint-enable react-hooks/exhaustive-deps */);\n\n  // =========================== Search ===========================\n  var _useMergedState3 = useMergedState('', {\n      value: searchValue !== undefined ? searchValue : inputValue,\n      postState: function postState(search) {\n        return search || '';\n      }\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    mergedSearchValue = _useMergedState4[0],\n    setSearchValue = _useMergedState4[1];\n  var onInternalSearch = function onInternalSearch(searchText) {\n    setSearchValue(searchText);\n    onSearch === null || onSearch === void 0 || onSearch(searchText);\n  };\n\n  // ============================ Data ============================\n  // `useTreeData` only do convert of `children` or `simpleMode`.\n  // Else will return origin `treeData` for perf consideration.\n  // Do not do anything to loop the data.\n  var mergedTreeData = useTreeData(treeData, children, treeDataSimpleMode);\n  var _useDataEntities = useDataEntities(mergedTreeData, mergedFieldNames),\n    keyEntities = _useDataEntities.keyEntities,\n    valueEntities = _useDataEntities.valueEntities;\n\n  /** Get `missingRawValues` which not exist in the tree yet */\n  var splitRawValues = React.useCallback(function (newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = [];\n\n    // Keep missing value in the cache\n    newRawValues.forEach(function (val) {\n      if (valueEntities.has(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  }, [valueEntities]);\n\n  // Filtered Tree\n  var filteredTreeData = useFilterTreeData(mergedTreeData, mergedSearchValue, {\n    fieldNames: mergedFieldNames,\n    treeNodeFilterProp: treeNodeFilterProp,\n    filterTreeNode: filterTreeNode\n  });\n\n  // =========================== Label ============================\n  var getLabel = React.useCallback(function (item) {\n    if (item) {\n      if (treeNodeLabelProp) {\n        return item[treeNodeLabelProp];\n      }\n\n      // Loop from fieldNames\n      var titleList = mergedFieldNames._title;\n      for (var i = 0; i < titleList.length; i += 1) {\n        var title = item[titleList[i]];\n        if (title !== undefined) {\n          return title;\n        }\n      }\n    }\n  }, [mergedFieldNames, treeNodeLabelProp]);\n\n  // ========================= Wrap Value =========================\n  var toLabeledValues = React.useCallback(function (draftValues) {\n    var values = toArray(draftValues);\n    return values.map(function (val) {\n      if (isRawValue(val)) {\n        return {\n          value: val\n        };\n      }\n      return val;\n    });\n  }, []);\n  var convert2LabelValues = React.useCallback(function (draftValues) {\n    var values = toLabeledValues(draftValues);\n    return values.map(function (item) {\n      var rawLabel = item.label;\n      var rawValue = item.value,\n        rawHalfChecked = item.halfChecked;\n      var rawDisabled;\n      var entity = valueEntities.get(rawValue);\n\n      // Fill missing label & status\n      if (entity) {\n        var _rawLabel;\n        rawLabel = (_rawLabel = rawLabel) !== null && _rawLabel !== void 0 ? _rawLabel : getLabel(entity.node);\n        rawDisabled = entity.node.disabled;\n      } else if (rawLabel === undefined) {\n        // We try to find in current `labelInValue` value\n        var labelInValueItem = toLabeledValues(internalValue).find(function (labeledItem) {\n          return labeledItem.value === rawValue;\n        });\n        rawLabel = labelInValueItem.label;\n      }\n      return {\n        label: rawLabel,\n        value: rawValue,\n        halfChecked: rawHalfChecked,\n        disabled: rawDisabled\n      };\n    });\n  }, [valueEntities, getLabel, toLabeledValues, internalValue]);\n\n  // =========================== Values ===========================\n  var rawMixedLabeledValues = React.useMemo(function () {\n    return toLabeledValues(internalValue);\n  }, [toLabeledValues, internalValue]);\n\n  // Split value into full check and half check\n  var _React$useMemo = React.useMemo(function () {\n      var fullCheckValues = [];\n      var halfCheckValues = [];\n      rawMixedLabeledValues.forEach(function (item) {\n        if (item.halfChecked) {\n          halfCheckValues.push(item);\n        } else {\n          fullCheckValues.push(item);\n        }\n      });\n      return [fullCheckValues, halfCheckValues];\n    }, [rawMixedLabeledValues]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    rawLabeledValues = _React$useMemo2[0],\n    rawHalfLabeledValues = _React$useMemo2[1];\n\n  // const [mergedValues] = useCache(rawLabeledValues);\n  var rawValues = React.useMemo(function () {\n    return rawLabeledValues.map(function (item) {\n      return item.value;\n    });\n  }, [rawLabeledValues]);\n\n  // Convert value to key. Will fill missed keys for conduct check.\n  var _useCheckedKeys = useCheckedKeys(rawLabeledValues, rawHalfLabeledValues, treeConduction, keyEntities),\n    _useCheckedKeys2 = _slicedToArray(_useCheckedKeys, 2),\n    rawCheckedValues = _useCheckedKeys2[0],\n    rawHalfCheckedValues = _useCheckedKeys2[1];\n\n  // Convert rawCheckedKeys to check strategy related values\n  var displayValues = React.useMemo(function () {\n    // Collect keys which need to show\n    var displayKeys = formatStrategyValues(rawCheckedValues, mergedShowCheckedStrategy, keyEntities, mergedFieldNames);\n\n    // Convert to value and filled with label\n    var values = displayKeys.map(function (key) {\n      var _keyEntities$key$node, _keyEntities$key;\n      return (_keyEntities$key$node = (_keyEntities$key = keyEntities[key]) === null || _keyEntities$key === void 0 || (_keyEntities$key = _keyEntities$key.node) === null || _keyEntities$key === void 0 ? void 0 : _keyEntities$key[mergedFieldNames.value]) !== null && _keyEntities$key$node !== void 0 ? _keyEntities$key$node : key;\n    });\n\n    // Back fill with origin label\n    var labeledValues = values.map(function (val) {\n      var targetItem = rawLabeledValues.find(function (item) {\n        return item.value === val;\n      });\n      var label;\n      // Ensure that when labelInValue is true, if label is undefined, it remains undefined.\n      if (labelInValue && targetItem.label !== undefined) {\n        label = targetItem.label;\n      } else if (!labelInValue && treeTitleRender) {\n        label = treeTitleRender(targetItem);\n      }\n      return {\n        value: val,\n        label: label\n      };\n    });\n    var rawDisplayValues = convert2LabelValues(labeledValues);\n    var firstVal = rawDisplayValues[0];\n    if (!mergedMultiple && firstVal && isNil(firstVal.value) && isNil(firstVal.label)) {\n      return [];\n    }\n    return rawDisplayValues.map(function (item) {\n      var _item$label;\n      return _objectSpread(_objectSpread({}, item), {}, {\n        label: (_item$label = item.label) !== null && _item$label !== void 0 ? _item$label : item.value\n      });\n    });\n  }, [mergedFieldNames, mergedMultiple, rawCheckedValues, rawLabeledValues, convert2LabelValues, mergedShowCheckedStrategy, keyEntities]);\n  var _useCache = useCache(displayValues),\n    _useCache2 = _slicedToArray(_useCache, 1),\n    cachedDisplayValues = _useCache2[0];\n\n  // =========================== Change ===========================\n  var triggerChange = useRefFunc(function (newRawValues, extra, source) {\n    var labeledValues = convert2LabelValues(newRawValues);\n    setInternalValue(labeledValues);\n\n    // Clean up if needed\n    if (autoClearSearchValue) {\n      setSearchValue('');\n    }\n\n    // Generate rest parameters is costly, so only do it when necessary\n    if (onChange) {\n      var eventValues = newRawValues;\n      if (treeConduction) {\n        var formattedKeyList = formatStrategyValues(newRawValues, mergedShowCheckedStrategy, keyEntities, mergedFieldNames);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = valueEntities.get(key);\n          return entity ? entity.node[mergedFieldNames.value] : key;\n        });\n      }\n      var _ref = extra || {\n          triggerValue: undefined,\n          selected: undefined\n        },\n        triggerValue = _ref.triggerValue,\n        selected = _ref.selected;\n      var returnRawValues = eventValues;\n\n      // We need fill half check back\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfLabeledValues.filter(function (item) {\n          return !eventValues.includes(item.value);\n        });\n        returnRawValues = [].concat(_toConsumableArray(returnRawValues), _toConsumableArray(halfValues));\n      }\n      var returnLabeledValues = convert2LabelValues(returnRawValues);\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: rawLabeledValues,\n        triggerValue: triggerValue\n      };\n\n      // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n      var showPosition = true;\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition, mergedFieldNames);\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n      var returnValues = mergedLabelInValue ? returnLabeledValues : returnLabeledValues.map(function (item) {\n        return item.value;\n      });\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : returnLabeledValues.map(function (item) {\n        return item.label;\n      }), additionalInfo);\n    }\n  });\n\n  // ========================== Options ===========================\n  /** Trigger by option list */\n  var onOptionSelect = React.useCallback(function (selectedKey, _ref2) {\n    var _node$mergedFieldName;\n    var selected = _ref2.selected,\n      source = _ref2.source;\n    var entity = keyEntities[selectedKey];\n    var node = entity === null || entity === void 0 ? void 0 : entity.node;\n    var selectedValue = (_node$mergedFieldName = node === null || node === void 0 ? void 0 : node[mergedFieldNames.value]) !== null && _node$mergedFieldName !== void 0 ? _node$mergedFieldName : selectedKey;\n\n    // Never be falsy but keep it safe\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectedValue], {\n        selected: true,\n        triggerValue: selectedValue\n      }, 'option');\n    } else {\n      var newRawValues = selected ? [].concat(_toConsumableArray(rawValues), [selectedValue]) : rawCheckedValues.filter(function (v) {\n        return v !== selectedValue;\n      });\n\n      // Add keys if tree conduction\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues.missingRawValues,\n          existRawValues = _splitRawValues.existRawValues;\n        var keyList = existRawValues.map(function (val) {\n          return valueEntities.get(val).key;\n        });\n\n        // Conduction by selected or not\n        var checkedKeys;\n        if (selected) {\n          var _conductCheck = conductCheck(keyList, true, keyEntities);\n          checkedKeys = _conductCheck.checkedKeys;\n        } else {\n          var _conductCheck2 = conductCheck(keyList, {\n            checked: false,\n            halfCheckedKeys: rawHalfCheckedValues\n          }, keyEntities);\n          checkedKeys = _conductCheck2.checkedKeys;\n        }\n\n        // Fill back of keys\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return keyEntities[key].node[mergedFieldNames.value];\n        })));\n      }\n      triggerChange(newRawValues, {\n        selected: selected,\n        triggerValue: selectedValue\n      }, source || 'option');\n    }\n\n    // Trigger select event\n    if (selected || !mergedMultiple) {\n      onSelect === null || onSelect === void 0 || onSelect(selectedValue, fillLegacyProps(node));\n    } else {\n      onDeselect === null || onDeselect === void 0 || onDeselect(selectedValue, fillLegacyProps(node));\n    }\n  }, [splitRawValues, valueEntities, keyEntities, mergedFieldNames, mergedMultiple, rawValues, triggerChange, treeConduction, onSelect, onDeselect, rawCheckedValues, rawHalfCheckedValues]);\n\n  // ========================== Dropdown ==========================\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]);\n\n  // ====================== Display Change ========================\n  var onDisplayValuesChange = useRefFunc(function (newValues, info) {\n    var newRawValues = newValues.map(function (item) {\n      return item.value;\n    });\n    if (info.type === 'clear') {\n      triggerChange(newRawValues, {}, 'selection');\n      return;\n    }\n\n    // TreeSelect only have multiple mode which means display change only has remove\n    if (info.values.length) {\n      onOptionSelect(info.values[0].value, {\n        selected: false,\n        source: 'selection'\n      });\n    }\n  });\n\n  // ========================== Context ===========================\n  var treeSelectContext = React.useMemo(function () {\n    return {\n      virtual: virtual,\n      dropdownMatchSelectWidth: dropdownMatchSelectWidth,\n      listHeight: listHeight,\n      listItemHeight: listItemHeight,\n      listItemScrollOffset: listItemScrollOffset,\n      treeData: filteredTreeData,\n      fieldNames: mergedFieldNames,\n      onSelect: onOptionSelect,\n      treeExpandAction: treeExpandAction,\n      treeTitleRender: treeTitleRender\n    };\n  }, [virtual, dropdownMatchSelectWidth, listHeight, listItemHeight, listItemScrollOffset, filteredTreeData, mergedFieldNames, onOptionSelect, treeExpandAction, treeTitleRender]);\n\n  // ======================= Legacy Context =======================\n  var legacyContext = React.useMemo(function () {\n    return {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawCheckedValues,\n      halfCheckedKeys: rawHalfCheckedValues,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp,\n      keyEntities: keyEntities\n    };\n  }, [mergedCheckable, loadData, treeLoadedKeys, onTreeLoad, rawCheckedValues, rawHalfCheckedValues, treeDefaultExpandAll, treeExpandedKeys, treeDefaultExpandedKeys, onTreeExpand, treeIcon, treeMotion, showTreeIcon, switcherIcon, treeLine, treeNodeFilterProp, keyEntities]);\n\n  // =========================== Render ===========================\n  return /*#__PURE__*/React.createElement(TreeSelectContext.Provider, {\n    value: treeSelectContext\n  }, /*#__PURE__*/React.createElement(LegacyContext.Provider, {\n    value: legacyContext\n  }, /*#__PURE__*/React.createElement(BaseSelect, _extends({\n    ref: ref\n  }, restProps, {\n    // >>> MISC\n    id: mergedId,\n    prefixCls: prefixCls,\n    mode: mergedMultiple ? 'multiple' : undefined\n    // >>> Display Value\n    ,\n    displayValues: cachedDisplayValues,\n    onDisplayValuesChange: onDisplayValuesChange\n    // >>> Search\n    ,\n    searchValue: mergedSearchValue,\n    onSearch: onInternalSearch\n    // >>> Options\n    ,\n    OptionList: OptionList,\n    emptyOptions: !mergedTreeData.length,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }))));\n});\n\n// Assign name for Debug\nif (process.env.NODE_ENV !== 'production') {\n  TreeSelect.displayName = 'TreeSelect';\n}\nvar GenericTreeSelect = TreeSelect;\nGenericTreeSelect.TreeNode = TreeNode;\nGenericTreeSelect.SHOW_ALL = SHOW_ALL;\nGenericTreeSelect.SHOW_PARENT = SHOW_PARENT;\nGenericTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default GenericTreeSelect;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}