{"ast":null,"code":"\"use client\";import EnterOutlined from\"@ant-design/icons/es/icons/EnterOutlined\";import classNames from'classnames';import KeyCode from\"rc-util/es/KeyCode\";import*as React from'react';import{cloneElement}from'../_util/reactNode';import TextArea from'../input/TextArea';import useStyle from'./style';const Editable=props=>{const{prefixCls,'aria-label':ariaLabel,className,style,direction,maxLength,autoSize=true,value,onSave,onCancel,onEnd,component,enterIcon=/*#__PURE__*/React.createElement(EnterOutlined,null)}=props;const ref=React.useRef(null);const inComposition=React.useRef(false);const lastKeyCode=React.useRef();const[current,setCurrent]=React.useState(value);React.useEffect(()=>{setCurrent(value);},[value]);React.useEffect(()=>{if(ref.current&&ref.current.resizableTextArea){const{textArea}=ref.current.resizableTextArea;textArea.focus();const{length}=textArea.value;textArea.setSelectionRange(length,length);}},[]);const onChange=_ref=>{let{target}=_ref;setCurrent(target.value.replace(/[\\n\\r]/g,''));};const onCompositionStart=()=>{inComposition.current=true;};const onCompositionEnd=()=>{inComposition.current=false;};const onKeyDown=_ref2=>{let{keyCode}=_ref2;// We don't record keyCode when IME is using\nif(inComposition.current)return;lastKeyCode.current=keyCode;};const confirmChange=()=>{onSave(current.trim());};const onKeyUp=_ref3=>{let{keyCode,ctrlKey,altKey,metaKey,shiftKey}=_ref3;// Check if it's a real key\nif(lastKeyCode.current===keyCode&&!inComposition.current&&!ctrlKey&&!altKey&&!metaKey&&!shiftKey){if(keyCode===KeyCode.ENTER){confirmChange();onEnd===null||onEnd===void 0?void 0:onEnd();}else if(keyCode===KeyCode.ESC){onCancel();}}};const onBlur=()=>{confirmChange();};const textClassName=component?\"\".concat(prefixCls,\"-\").concat(component):'';const[wrapCSSVar,hashId,cssVarCls]=useStyle(prefixCls);const textAreaClassName=classNames(prefixCls,\"\".concat(prefixCls,\"-edit-content\"),{[\"\".concat(prefixCls,\"-rtl\")]:direction==='rtl'},className,textClassName,hashId,cssVarCls);return wrapCSSVar(/*#__PURE__*/React.createElement(\"div\",{className:textAreaClassName,style:style},/*#__PURE__*/React.createElement(TextArea,{ref:ref,maxLength:maxLength,value:current,onChange:onChange,onKeyDown:onKeyDown,onKeyUp:onKeyUp,onCompositionStart:onCompositionStart,onCompositionEnd:onCompositionEnd,onBlur:onBlur,\"aria-label\":ariaLabel,rows:1,autoSize:autoSize}),enterIcon!==null?cloneElement(enterIcon,{className:\"\".concat(prefixCls,\"-edit-content-confirm\")}):null));};export default Editable;","map":{"version":3,"names":["EnterOutlined","classNames","KeyCode","React","cloneElement","TextArea","useStyle","Editable","props","prefixCls","ariaLabel","className","style","direction","maxLength","autoSize","value","onSave","onCancel","onEnd","component","enterIcon","createElement","ref","useRef","inComposition","lastKeyCode","current","setCurrent","useState","useEffect","resizableTextArea","textArea","focus","length","setSelectionRange","onChange","_ref","target","replace","onCompositionStart","onCompositionEnd","onKeyDown","_ref2","keyCode","confirmChange","trim","onKeyUp","_ref3","ctrlKey","altKey","metaKey","shiftKey","ENTER","ESC","onBlur","textClassName","concat","wrapCSSVar","hashId","cssVarCls","textAreaClassName","rows"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/typography/Editable.js"],"sourcesContent":["\"use client\";\n\nimport EnterOutlined from \"@ant-design/icons/es/icons/EnterOutlined\";\nimport classNames from 'classnames';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport * as React from 'react';\nimport { cloneElement } from '../_util/reactNode';\nimport TextArea from '../input/TextArea';\nimport useStyle from './style';\nconst Editable = props => {\n  const {\n    prefixCls,\n    'aria-label': ariaLabel,\n    className,\n    style,\n    direction,\n    maxLength,\n    autoSize = true,\n    value,\n    onSave,\n    onCancel,\n    onEnd,\n    component,\n    enterIcon = /*#__PURE__*/React.createElement(EnterOutlined, null)\n  } = props;\n  const ref = React.useRef(null);\n  const inComposition = React.useRef(false);\n  const lastKeyCode = React.useRef();\n  const [current, setCurrent] = React.useState(value);\n  React.useEffect(() => {\n    setCurrent(value);\n  }, [value]);\n  React.useEffect(() => {\n    if (ref.current && ref.current.resizableTextArea) {\n      const {\n        textArea\n      } = ref.current.resizableTextArea;\n      textArea.focus();\n      const {\n        length\n      } = textArea.value;\n      textArea.setSelectionRange(length, length);\n    }\n  }, []);\n  const onChange = _ref => {\n    let {\n      target\n    } = _ref;\n    setCurrent(target.value.replace(/[\\n\\r]/g, ''));\n  };\n  const onCompositionStart = () => {\n    inComposition.current = true;\n  };\n  const onCompositionEnd = () => {\n    inComposition.current = false;\n  };\n  const onKeyDown = _ref2 => {\n    let {\n      keyCode\n    } = _ref2;\n    // We don't record keyCode when IME is using\n    if (inComposition.current) return;\n    lastKeyCode.current = keyCode;\n  };\n  const confirmChange = () => {\n    onSave(current.trim());\n  };\n  const onKeyUp = _ref3 => {\n    let {\n      keyCode,\n      ctrlKey,\n      altKey,\n      metaKey,\n      shiftKey\n    } = _ref3;\n    // Check if it's a real key\n    if (lastKeyCode.current === keyCode && !inComposition.current && !ctrlKey && !altKey && !metaKey && !shiftKey) {\n      if (keyCode === KeyCode.ENTER) {\n        confirmChange();\n        onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n      } else if (keyCode === KeyCode.ESC) {\n        onCancel();\n      }\n    }\n  };\n  const onBlur = () => {\n    confirmChange();\n  };\n  const textClassName = component ? `${prefixCls}-${component}` : '';\n  const [wrapCSSVar, hashId, cssVarCls] = useStyle(prefixCls);\n  const textAreaClassName = classNames(prefixCls, `${prefixCls}-edit-content`, {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  }, className, textClassName, hashId, cssVarCls);\n  return wrapCSSVar( /*#__PURE__*/React.createElement(\"div\", {\n    className: textAreaClassName,\n    style: style\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    ref: ref,\n    maxLength: maxLength,\n    value: current,\n    onChange: onChange,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    onCompositionStart: onCompositionStart,\n    onCompositionEnd: onCompositionEnd,\n    onBlur: onBlur,\n    \"aria-label\": ariaLabel,\n    rows: 1,\n    autoSize: autoSize\n  }), enterIcon !== null ? cloneElement(enterIcon, {\n    className: `${prefixCls}-edit-content-confirm`\n  }) : null));\n};\nexport default Editable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}