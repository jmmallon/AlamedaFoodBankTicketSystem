{"ast":null,"code":"import*as React from'react';import{groupKeysMap}from'../../_util/transKeys';const useData=(dataSource,rowKey,targetKeys)=>{const mergedDataSource=React.useMemo(()=>(dataSource||[]).map(record=>{if(rowKey){record=Object.assign(Object.assign({},record),{key:rowKey(record)});}return record;}),[dataSource,rowKey]);const[leftDataSource,rightDataSource]=React.useMemo(()=>{const leftData=[];const rightData=new Array((targetKeys||[]).length);const targetKeysMap=groupKeysMap(targetKeys||[]);mergedDataSource.forEach(record=>{// rightData should be ordered by targetKeys\n// leftData should be ordered by dataSource\nif(targetKeysMap.has(record.key)){rightData[targetKeysMap.get(record.key)]=record;}else{leftData.push(record);}});return[leftData,rightData];},[mergedDataSource,targetKeys,rowKey]);return[mergedDataSource,leftDataSource,rightDataSource];};export default useData;","map":{"version":3,"names":["React","groupKeysMap","useData","dataSource","rowKey","targetKeys","mergedDataSource","useMemo","map","record","Object","assign","key","leftDataSource","rightDataSource","leftData","rightData","Array","length","targetKeysMap","forEach","has","get","push"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/transfer/hooks/useData.js"],"sourcesContent":["import * as React from 'react';\nimport { groupKeysMap } from '../../_util/transKeys';\nconst useData = (dataSource, rowKey, targetKeys) => {\n  const mergedDataSource = React.useMemo(() => (dataSource || []).map(record => {\n    if (rowKey) {\n      record = Object.assign(Object.assign({}, record), {\n        key: rowKey(record)\n      });\n    }\n    return record;\n  }), [dataSource, rowKey]);\n  const [leftDataSource, rightDataSource] = React.useMemo(() => {\n    const leftData = [];\n    const rightData = new Array((targetKeys || []).length);\n    const targetKeysMap = groupKeysMap(targetKeys || []);\n    mergedDataSource.forEach(record => {\n      // rightData should be ordered by targetKeys\n      // leftData should be ordered by dataSource\n      if (targetKeysMap.has(record.key)) {\n        rightData[targetKeysMap.get(record.key)] = record;\n      } else {\n        leftData.push(record);\n      }\n    });\n    return [leftData, rightData];\n  }, [mergedDataSource, targetKeys, rowKey]);\n  return [mergedDataSource, leftDataSource, rightDataSource];\n};\nexport default useData;"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,OAASC,YAAY,KAAQ,uBAAuB,CACpD,KAAM,CAAAC,OAAO,CAAGA,CAACC,UAAU,CAAEC,MAAM,CAAEC,UAAU,GAAK,CAClD,KAAM,CAAAC,gBAAgB,CAAGN,KAAK,CAACO,OAAO,CAAC,IAAM,CAACJ,UAAU,EAAI,EAAE,EAAEK,GAAG,CAACC,MAAM,EAAI,CAC5E,GAAIL,MAAM,CAAE,CACVK,MAAM,CAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAAEF,MAAM,CAAC,CAAE,CAChDG,GAAG,CAAER,MAAM,CAACK,MAAM,CACpB,CAAC,CAAC,CACJ,CACA,MAAO,CAAAA,MAAM,CACf,CAAC,CAAC,CAAE,CAACN,UAAU,CAAEC,MAAM,CAAC,CAAC,CACzB,KAAM,CAACS,cAAc,CAAEC,eAAe,CAAC,CAAGd,KAAK,CAACO,OAAO,CAAC,IAAM,CAC5D,KAAM,CAAAQ,QAAQ,CAAG,EAAE,CACnB,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAC,KAAK,CAAC,CAACZ,UAAU,EAAI,EAAE,EAAEa,MAAM,CAAC,CACtD,KAAM,CAAAC,aAAa,CAAGlB,YAAY,CAACI,UAAU,EAAI,EAAE,CAAC,CACpDC,gBAAgB,CAACc,OAAO,CAACX,MAAM,EAAI,CACjC;AACA;AACA,GAAIU,aAAa,CAACE,GAAG,CAACZ,MAAM,CAACG,GAAG,CAAC,CAAE,CACjCI,SAAS,CAACG,aAAa,CAACG,GAAG,CAACb,MAAM,CAACG,GAAG,CAAC,CAAC,CAAGH,MAAM,CACnD,CAAC,IAAM,CACLM,QAAQ,CAACQ,IAAI,CAACd,MAAM,CAAC,CACvB,CACF,CAAC,CAAC,CACF,MAAO,CAACM,QAAQ,CAAEC,SAAS,CAAC,CAC9B,CAAC,CAAE,CAACV,gBAAgB,CAAED,UAAU,CAAED,MAAM,CAAC,CAAC,CAC1C,MAAO,CAACE,gBAAgB,CAAEO,cAAc,CAAEC,eAAe,CAAC,CAC5D,CAAC,CACD,cAAe,CAAAZ,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}