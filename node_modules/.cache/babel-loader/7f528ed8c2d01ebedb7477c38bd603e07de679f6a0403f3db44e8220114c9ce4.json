{"ast":null,"code":"/**\n * Get index with specific start index one by one. e.g.\n * min: 3, max: 9, start: 6\n *\n * Return index is:\n * [0]: 6\n * [1]: 7\n * [2]: 5\n * [3]: 8\n * [4]: 4\n * [5]: 9\n * [6]: 3\n */export function getIndexByStartLoc(min,max,start,index){var beforeCount=start-min;var afterCount=max-start;var balanceCount=Math.min(beforeCount,afterCount)*2;// Balance\nif(index<=balanceCount){var stepIndex=Math.floor(index/2);if(index%2){return start+stepIndex+1;}return start-stepIndex;}// One is out of range\nif(beforeCount>afterCount){return start-(index-afterCount);}return start+(index-beforeCount);}/**\n * We assume that 2 list has only 1 item diff and others keeping the order.\n * So we can use dichotomy algorithm to find changed one.\n */export function findListDiffIndex(originList,targetList,getKey){var originLen=originList.length;var targetLen=targetList.length;var shortList;var longList;if(originLen===0&&targetLen===0){return null;}if(originLen<targetLen){shortList=originList;longList=targetList;}else{shortList=targetList;longList=originList;}var notExistKey={__EMPTY_ITEM__:true};function getItemKey(item){if(item!==undefined){return getKey(item);}return notExistKey;}// Loop to find diff one\nvar diffIndex=null;var multiple=Math.abs(originLen-targetLen)!==1;for(var i=0;i<longList.length;i+=1){var shortKey=getItemKey(shortList[i]);var longKey=getItemKey(longList[i]);if(shortKey!==longKey){diffIndex=i;multiple=multiple||shortKey!==getItemKey(longList[i+1]);break;}}return diffIndex===null?null:{index:diffIndex,multiple:multiple};}","map":{"version":3,"names":["getIndexByStartLoc","min","max","start","index","beforeCount","afterCount","balanceCount","Math","stepIndex","floor","findListDiffIndex","originList","targetList","getKey","originLen","length","targetLen","shortList","longList","notExistKey","__EMPTY_ITEM__","getItemKey","item","undefined","diffIndex","multiple","abs","i","shortKey","longKey"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-virtual-list/es/utils/algorithmUtil.js"],"sourcesContent":["/**\n * Get index with specific start index one by one. e.g.\n * min: 3, max: 9, start: 6\n *\n * Return index is:\n * [0]: 6\n * [1]: 7\n * [2]: 5\n * [3]: 8\n * [4]: 4\n * [5]: 9\n * [6]: 3\n */\nexport function getIndexByStartLoc(min, max, start, index) {\n  var beforeCount = start - min;\n  var afterCount = max - start;\n  var balanceCount = Math.min(beforeCount, afterCount) * 2;\n\n  // Balance\n  if (index <= balanceCount) {\n    var stepIndex = Math.floor(index / 2);\n    if (index % 2) {\n      return start + stepIndex + 1;\n    }\n    return start - stepIndex;\n  }\n\n  // One is out of range\n  if (beforeCount > afterCount) {\n    return start - (index - afterCount);\n  }\n  return start + (index - beforeCount);\n}\n\n/**\n * We assume that 2 list has only 1 item diff and others keeping the order.\n * So we can use dichotomy algorithm to find changed one.\n */\nexport function findListDiffIndex(originList, targetList, getKey) {\n  var originLen = originList.length;\n  var targetLen = targetList.length;\n  var shortList;\n  var longList;\n  if (originLen === 0 && targetLen === 0) {\n    return null;\n  }\n  if (originLen < targetLen) {\n    shortList = originList;\n    longList = targetList;\n  } else {\n    shortList = targetList;\n    longList = originList;\n  }\n  var notExistKey = {\n    __EMPTY_ITEM__: true\n  };\n  function getItemKey(item) {\n    if (item !== undefined) {\n      return getKey(item);\n    }\n    return notExistKey;\n  }\n\n  // Loop to find diff one\n  var diffIndex = null;\n  var multiple = Math.abs(originLen - targetLen) !== 1;\n  for (var i = 0; i < longList.length; i += 1) {\n    var shortKey = getItemKey(shortList[i]);\n    var longKey = getItemKey(longList[i]);\n    if (shortKey !== longKey) {\n      diffIndex = i;\n      multiple = multiple || shortKey !== getItemKey(longList[i + 1]);\n      break;\n    }\n  }\n  return diffIndex === null ? null : {\n    index: diffIndex,\n    multiple: multiple\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,kBAAkBA,CAACC,GAAG,CAAEC,GAAG,CAAEC,KAAK,CAAEC,KAAK,CAAE,CACzD,GAAI,CAAAC,WAAW,CAAGF,KAAK,CAAGF,GAAG,CAC7B,GAAI,CAAAK,UAAU,CAAGJ,GAAG,CAAGC,KAAK,CAC5B,GAAI,CAAAI,YAAY,CAAGC,IAAI,CAACP,GAAG,CAACI,WAAW,CAAEC,UAAU,CAAC,CAAG,CAAC,CAExD;AACA,GAAIF,KAAK,EAAIG,YAAY,CAAE,CACzB,GAAI,CAAAE,SAAS,CAAGD,IAAI,CAACE,KAAK,CAACN,KAAK,CAAG,CAAC,CAAC,CACrC,GAAIA,KAAK,CAAG,CAAC,CAAE,CACb,MAAO,CAAAD,KAAK,CAAGM,SAAS,CAAG,CAAC,CAC9B,CACA,MAAO,CAAAN,KAAK,CAAGM,SAAS,CAC1B,CAEA;AACA,GAAIJ,WAAW,CAAGC,UAAU,CAAE,CAC5B,MAAO,CAAAH,KAAK,EAAIC,KAAK,CAAGE,UAAU,CAAC,CACrC,CACA,MAAO,CAAAH,KAAK,EAAIC,KAAK,CAAGC,WAAW,CAAC,CACtC,CAEA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAM,iBAAiBA,CAACC,UAAU,CAAEC,UAAU,CAAEC,MAAM,CAAE,CAChE,GAAI,CAAAC,SAAS,CAAGH,UAAU,CAACI,MAAM,CACjC,GAAI,CAAAC,SAAS,CAAGJ,UAAU,CAACG,MAAM,CACjC,GAAI,CAAAE,SAAS,CACb,GAAI,CAAAC,QAAQ,CACZ,GAAIJ,SAAS,GAAK,CAAC,EAAIE,SAAS,GAAK,CAAC,CAAE,CACtC,MAAO,KAAI,CACb,CACA,GAAIF,SAAS,CAAGE,SAAS,CAAE,CACzBC,SAAS,CAAGN,UAAU,CACtBO,QAAQ,CAAGN,UAAU,CACvB,CAAC,IAAM,CACLK,SAAS,CAAGL,UAAU,CACtBM,QAAQ,CAAGP,UAAU,CACvB,CACA,GAAI,CAAAQ,WAAW,CAAG,CAChBC,cAAc,CAAE,IAClB,CAAC,CACD,QAAS,CAAAC,UAAUA,CAACC,IAAI,CAAE,CACxB,GAAIA,IAAI,GAAKC,SAAS,CAAE,CACtB,MAAO,CAAAV,MAAM,CAACS,IAAI,CAAC,CACrB,CACA,MAAO,CAAAH,WAAW,CACpB,CAEA;AACA,GAAI,CAAAK,SAAS,CAAG,IAAI,CACpB,GAAI,CAAAC,QAAQ,CAAGlB,IAAI,CAACmB,GAAG,CAACZ,SAAS,CAAGE,SAAS,CAAC,GAAK,CAAC,CACpD,IAAK,GAAI,CAAAW,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,QAAQ,CAACH,MAAM,CAAEY,CAAC,EAAI,CAAC,CAAE,CAC3C,GAAI,CAAAC,QAAQ,CAAGP,UAAU,CAACJ,SAAS,CAACU,CAAC,CAAC,CAAC,CACvC,GAAI,CAAAE,OAAO,CAAGR,UAAU,CAACH,QAAQ,CAACS,CAAC,CAAC,CAAC,CACrC,GAAIC,QAAQ,GAAKC,OAAO,CAAE,CACxBL,SAAS,CAAGG,CAAC,CACbF,QAAQ,CAAGA,QAAQ,EAAIG,QAAQ,GAAKP,UAAU,CAACH,QAAQ,CAACS,CAAC,CAAG,CAAC,CAAC,CAAC,CAC/D,MACF,CACF,CACA,MAAO,CAAAH,SAAS,GAAK,IAAI,CAAG,IAAI,CAAG,CACjCrB,KAAK,CAAEqB,SAAS,CAChBC,QAAQ,CAAEA,QACZ,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}