{"ast":null,"code":"import _objectSpread from\"@babel/runtime/helpers/esm/objectSpread2\";import*as React from'react';import{convertDataToEntities}from\"rc-tree/es/utils/treeUtil\";import warning from\"rc-util/es/warning\";import{isNil}from\"../utils/valueUtil\";export default(function(treeData,fieldNames){return React.useMemo(function(){var collection=convertDataToEntities(treeData,{fieldNames:fieldNames,initWrapper:function initWrapper(wrapper){return _objectSpread(_objectSpread({},wrapper),{},{valueEntities:new Map()});},processEntity:function processEntity(entity,wrapper){var val=entity.node[fieldNames.value];// Check if exist same value\nif(process.env.NODE_ENV!=='production'){var key=entity.node.key;warning(!isNil(val),'TreeNode `value` is invalidate: undefined');warning(!wrapper.valueEntities.has(val),\"Same `value` exist in the tree: \".concat(val));warning(!key||String(key)===String(val),\"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key,\", value: \").concat(val,\".\"));}wrapper.valueEntities.set(val,entity);}});return collection;},[treeData,fieldNames]);});","map":{"version":3,"names":["_objectSpread","React","convertDataToEntities","warning","isNil","treeData","fieldNames","useMemo","collection","initWrapper","wrapper","valueEntities","Map","processEntity","entity","val","node","value","process","env","NODE_ENV","key","has","concat","String","set"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-tree-select/es/hooks/useDataEntities.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport warning from \"rc-util/es/warning\";\nimport { isNil } from \"../utils/valueUtil\";\nexport default (function (treeData, fieldNames) {\n  return React.useMemo(function () {\n    var collection = convertDataToEntities(treeData, {\n      fieldNames: fieldNames,\n      initWrapper: function initWrapper(wrapper) {\n        return _objectSpread(_objectSpread({}, wrapper), {}, {\n          valueEntities: new Map()\n        });\n      },\n      processEntity: function processEntity(entity, wrapper) {\n        var val = entity.node[fieldNames.value];\n\n        // Check if exist same value\n        if (process.env.NODE_ENV !== 'production') {\n          var key = entity.node.key;\n          warning(!isNil(val), 'TreeNode `value` is invalidate: undefined');\n          warning(!wrapper.valueEntities.has(val), \"Same `value` exist in the tree: \".concat(val));\n          warning(!key || String(key) === String(val), \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(val, \".\"));\n        }\n        wrapper.valueEntities.set(val, entity);\n      }\n    });\n    return collection;\n  }, [treeData, fieldNames]);\n});"],"mappings":"AAAA,MAAO,CAAAA,aAAa,KAAM,0CAA0C,CACpE,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,OAASC,qBAAqB,KAAQ,2BAA2B,CACjE,MAAO,CAAAC,OAAO,KAAM,oBAAoB,CACxC,OAASC,KAAK,KAAQ,oBAAoB,CAC1C,eAAgB,SAAUC,QAAQ,CAAEC,UAAU,CAAE,CAC9C,MAAO,CAAAL,KAAK,CAACM,OAAO,CAAC,UAAY,CAC/B,GAAI,CAAAC,UAAU,CAAGN,qBAAqB,CAACG,QAAQ,CAAE,CAC/CC,UAAU,CAAEA,UAAU,CACtBG,WAAW,CAAE,QAAS,CAAAA,WAAWA,CAACC,OAAO,CAAE,CACzC,MAAO,CAAAV,aAAa,CAACA,aAAa,CAAC,CAAC,CAAC,CAAEU,OAAO,CAAC,CAAE,CAAC,CAAC,CAAE,CACnDC,aAAa,CAAE,GAAI,CAAAC,GAAG,CAAC,CACzB,CAAC,CAAC,CACJ,CAAC,CACDC,aAAa,CAAE,QAAS,CAAAA,aAAaA,CAACC,MAAM,CAAEJ,OAAO,CAAE,CACrD,GAAI,CAAAK,GAAG,CAAGD,MAAM,CAACE,IAAI,CAACV,UAAU,CAACW,KAAK,CAAC,CAEvC;AACA,GAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC,GAAI,CAAAC,GAAG,CAAGP,MAAM,CAACE,IAAI,CAACK,GAAG,CACzBlB,OAAO,CAAC,CAACC,KAAK,CAACW,GAAG,CAAC,CAAE,2CAA2C,CAAC,CACjEZ,OAAO,CAAC,CAACO,OAAO,CAACC,aAAa,CAACW,GAAG,CAACP,GAAG,CAAC,CAAE,kCAAkC,CAACQ,MAAM,CAACR,GAAG,CAAC,CAAC,CACxFZ,OAAO,CAAC,CAACkB,GAAG,EAAIG,MAAM,CAACH,GAAG,CAAC,GAAKG,MAAM,CAACT,GAAG,CAAC,CAAE,sFAAsF,CAACQ,MAAM,CAACF,GAAG,CAAE,WAAW,CAAC,CAACE,MAAM,CAACR,GAAG,CAAE,GAAG,CAAC,CAAC,CAChL,CACAL,OAAO,CAACC,aAAa,CAACc,GAAG,CAACV,GAAG,CAAED,MAAM,CAAC,CACxC,CACF,CAAC,CAAC,CACF,MAAO,CAAAN,UAAU,CACnB,CAAC,CAAE,CAACH,QAAQ,CAAEC,UAAU,CAAC,CAAC,CAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}