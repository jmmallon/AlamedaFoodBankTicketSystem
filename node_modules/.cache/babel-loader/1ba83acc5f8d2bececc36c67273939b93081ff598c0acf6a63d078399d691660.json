{"ast":null,"code":"import{supportBigInt}from\"./supportUtil\";export function isEmpty(value){return!value&&value!==0&&!Number.isNaN(value)||!String(value).trim();}/**\n * Format string number to readable number\n */export function trimNumber(numStr){var str=numStr.trim();var negative=str.startsWith('-');if(negative){str=str.slice(1);}str=str// Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n.replace(/(\\.\\d*[^0])0*$/,'$1')// Remove useless decimal. `1.` => `1`\n.replace(/\\.0*$/,'')// Remove integer 0. `0001` => `1`, 000.1' => `.1`\n.replace(/^0+/,'');if(str.startsWith('.')){str=\"0\".concat(str);}var trimStr=str||'0';var splitNumber=trimStr.split('.');var integerStr=splitNumber[0]||'0';var decimalStr=splitNumber[1]||'0';if(integerStr==='0'&&decimalStr==='0'){negative=false;}var negativeStr=negative?'-':'';return{negative:negative,negativeStr:negativeStr,trimStr:trimStr,integerStr:integerStr,decimalStr:decimalStr,fullStr:\"\".concat(negativeStr).concat(trimStr)};}export function isE(number){var str=String(number);return!Number.isNaN(Number(str))&&str.includes('e');}/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */export function getNumberPrecision(number){var numStr=String(number);if(isE(number)){var precision=Number(numStr.slice(numStr.indexOf('e-')+2));var decimalMatch=numStr.match(/\\.(\\d+)/);if(decimalMatch!==null&&decimalMatch!==void 0&&decimalMatch[1]){precision+=decimalMatch[1].length;}return precision;}return numStr.includes('.')&&validateNumber(numStr)?numStr.length-numStr.indexOf('.')-1:0;}/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */export function num2str(number){var numStr=String(number);if(isE(number)){if(number>Number.MAX_SAFE_INTEGER){return String(supportBigInt()?BigInt(number).toString():Number.MAX_SAFE_INTEGER);}if(number<Number.MIN_SAFE_INTEGER){return String(supportBigInt()?BigInt(number).toString():Number.MIN_SAFE_INTEGER);}numStr=number.toFixed(getNumberPrecision(numStr));}return trimNumber(numStr).fullStr;}export function validateNumber(num){if(typeof num==='number'){return!Number.isNaN(num);}// Empty\nif(!num){return false;}return(// Normal type: 11.28\n/^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num)||// Pre-number: 1.\n/^\\s*-?\\d+\\.\\s*$/.test(num)||// Post-number: .1\n/^\\s*-?\\.\\d+\\s*$/.test(num));}","map":{"version":3,"names":["supportBigInt","isEmpty","value","Number","isNaN","String","trim","trimNumber","numStr","str","negative","startsWith","slice","replace","concat","trimStr","splitNumber","split","integerStr","decimalStr","negativeStr","fullStr","isE","number","includes","getNumberPrecision","precision","indexOf","decimalMatch","match","length","validateNumber","num2str","MAX_SAFE_INTEGER","BigInt","toString","MIN_SAFE_INTEGER","toFixed","num","test"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/@rc-component/mini-decimal/es/numberUtil.js"],"sourcesContent":["import { supportBigInt } from \"./supportUtil\";\nexport function isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n\n/**\n * Format string number to readable number\n */\nexport function trimNumber(numStr) {\n  var str = numStr.trim();\n  var negative = str.startsWith('-');\n  if (negative) {\n    str = str.slice(1);\n  }\n  str = str\n  // Remove decimal 0. `1.000` => `1.`, `1.100` => `1.1`\n  .replace(/(\\.\\d*[^0])0*$/, '$1')\n  // Remove useless decimal. `1.` => `1`\n  .replace(/\\.0*$/, '')\n  // Remove integer 0. `0001` => `1`, 000.1' => `.1`\n  .replace(/^0+/, '');\n  if (str.startsWith('.')) {\n    str = \"0\".concat(str);\n  }\n  var trimStr = str || '0';\n  var splitNumber = trimStr.split('.');\n  var integerStr = splitNumber[0] || '0';\n  var decimalStr = splitNumber[1] || '0';\n  if (integerStr === '0' && decimalStr === '0') {\n    negative = false;\n  }\n  var negativeStr = negative ? '-' : '';\n  return {\n    negative: negative,\n    negativeStr: negativeStr,\n    trimStr: trimStr,\n    integerStr: integerStr,\n    decimalStr: decimalStr,\n    fullStr: \"\".concat(negativeStr).concat(trimStr)\n  };\n}\nexport function isE(number) {\n  var str = String(number);\n  return !Number.isNaN(Number(str)) && str.includes('e');\n}\n\n/**\n * [Legacy] Convert 1e-9 to 0.000000001.\n * This may lose some precision if user really want 1e-9.\n */\nexport function getNumberPrecision(number) {\n  var numStr = String(number);\n  if (isE(number)) {\n    var precision = Number(numStr.slice(numStr.indexOf('e-') + 2));\n    var decimalMatch = numStr.match(/\\.(\\d+)/);\n    if (decimalMatch !== null && decimalMatch !== void 0 && decimalMatch[1]) {\n      precision += decimalMatch[1].length;\n    }\n    return precision;\n  }\n  return numStr.includes('.') && validateNumber(numStr) ? numStr.length - numStr.indexOf('.') - 1 : 0;\n}\n\n/**\n * Convert number (includes scientific notation) to -xxx.yyy format\n */\nexport function num2str(number) {\n  var numStr = String(number);\n  if (isE(number)) {\n    if (number > Number.MAX_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MAX_SAFE_INTEGER);\n    }\n    if (number < Number.MIN_SAFE_INTEGER) {\n      return String(supportBigInt() ? BigInt(number).toString() : Number.MIN_SAFE_INTEGER);\n    }\n    numStr = number.toFixed(getNumberPrecision(numStr));\n  }\n  return trimNumber(numStr).fullStr;\n}\nexport function validateNumber(num) {\n  if (typeof num === 'number') {\n    return !Number.isNaN(num);\n  }\n\n  // Empty\n  if (!num) {\n    return false;\n  }\n  return (\n    // Normal type: 11.28\n    /^\\s*-?\\d+(\\.\\d+)?\\s*$/.test(num) ||\n    // Pre-number: 1.\n    /^\\s*-?\\d+\\.\\s*$/.test(num) ||\n    // Post-number: .1\n    /^\\s*-?\\.\\d+\\s*$/.test(num)\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}