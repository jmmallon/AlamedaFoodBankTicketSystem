{"ast":null,"code":"export const FontGap=3;function prepareCanvas(width,height){let ratio=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1;const canvas=document.createElement('canvas');const ctx=canvas.getContext('2d');const realWidth=width*ratio;const realHeight=height*ratio;canvas.setAttribute('width',\"\".concat(realWidth,\"px\"));canvas.setAttribute('height',\"\".concat(realHeight,\"px\"));ctx.save();return[ctx,canvas,realWidth,realHeight];}/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */export default function useClips(){// Get single clips\nfunction getClips(content,rotate,ratio,width,height,font,gapX,gapY){// ================= Text / Image =================\nconst[ctx,canvas,contentWidth,contentHeight]=prepareCanvas(width,height,ratio);if(content instanceof HTMLImageElement){// Image\nctx.drawImage(content,0,0,contentWidth,contentHeight);}else{// Text\nconst{color,fontSize,fontStyle,fontWeight,fontFamily,textAlign}=font;const mergedFontSize=Number(fontSize)*ratio;ctx.font=\"\".concat(fontStyle,\" normal \").concat(fontWeight,\" \").concat(mergedFontSize,\"px/\").concat(height,\"px \").concat(fontFamily);ctx.fillStyle=color;ctx.textAlign=textAlign;ctx.textBaseline='top';const contents=Array.isArray(content)?content:[content];contents===null||contents===void 0?void 0:contents.forEach((item,index)=>{ctx.fillText(item!==null&&item!==void 0?item:'',contentWidth/2,index*(mergedFontSize+FontGap*ratio));});}// ==================== Rotate ====================\nconst angle=Math.PI/180*Number(rotate);const maxSize=Math.max(width,height);const[rCtx,rCanvas,realMaxSize]=prepareCanvas(maxSize,maxSize,ratio);// Copy from `ctx` and rotate\nrCtx.translate(realMaxSize/2,realMaxSize/2);rCtx.rotate(angle);if(contentWidth>0&&contentHeight>0){rCtx.drawImage(canvas,-contentWidth/2,-contentHeight/2);}// Get boundary of rotated text\nfunction getRotatePos(x,y){const targetX=x*Math.cos(angle)-y*Math.sin(angle);const targetY=x*Math.sin(angle)+y*Math.cos(angle);return[targetX,targetY];}let left=0;let right=0;let top=0;let bottom=0;const halfWidth=contentWidth/2;const halfHeight=contentHeight/2;const points=[[0-halfWidth,0-halfHeight],[0+halfWidth,0-halfHeight],[0+halfWidth,0+halfHeight],[0-halfWidth,0+halfHeight]];points.forEach(_ref=>{let[x,y]=_ref;const[targetX,targetY]=getRotatePos(x,y);left=Math.min(left,targetX);right=Math.max(right,targetX);top=Math.min(top,targetY);bottom=Math.max(bottom,targetY);});const cutLeft=left+realMaxSize/2;const cutTop=top+realMaxSize/2;const cutWidth=right-left;const cutHeight=bottom-top;// ================ Fill Alternate ================\nconst realGapX=gapX*ratio;const realGapY=gapY*ratio;const filledWidth=(cutWidth+realGapX)*2;const filledHeight=cutHeight+realGapY;const[fCtx,fCanvas]=prepareCanvas(filledWidth,filledHeight);function drawImg(){let targetX=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let targetY=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;fCtx.drawImage(rCanvas,cutLeft,cutTop,cutWidth,cutHeight,targetX,targetY,cutWidth,cutHeight);}drawImg();drawImg(cutWidth+realGapX,-cutHeight/2-realGapY/2);drawImg(cutWidth+realGapX,+cutHeight/2+realGapY/2);return[fCanvas.toDataURL(),filledWidth/ratio,filledHeight/ratio];}return getClips;}","map":{"version":3,"names":["FontGap","prepareCanvas","width","height","ratio","arguments","length","undefined","canvas","document","createElement","ctx","getContext","realWidth","realHeight","setAttribute","concat","save","useClips","getClips","content","rotate","font","gapX","gapY","contentWidth","contentHeight","HTMLImageElement","drawImage","color","fontSize","fontStyle","fontWeight","fontFamily","textAlign","mergedFontSize","Number","fillStyle","textBaseline","contents","Array","isArray","forEach","item","index","fillText","angle","Math","PI","maxSize","max","rCtx","rCanvas","realMaxSize","translate","getRotatePos","x","y","targetX","cos","sin","targetY","left","right","top","bottom","halfWidth","halfHeight","points","_ref","min","cutLeft","cutTop","cutWidth","cutHeight","realGapX","realGapY","filledWidth","filledHeight","fCtx","fCanvas","drawImg","toDataURL"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/watermark/useClips.js"],"sourcesContent":["export const FontGap = 3;\nfunction prepareCanvas(width, height) {\n  let ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  const realWidth = width * ratio;\n  const realHeight = height * ratio;\n  canvas.setAttribute('width', `${realWidth}px`);\n  canvas.setAttribute('height', `${realHeight}px`);\n  ctx.save();\n  return [ctx, canvas, realWidth, realHeight];\n}\n/**\n * Get the clips of text content.\n * This is a lazy hook function since SSR no need this\n */\nexport default function useClips() {\n  // Get single clips\n  function getClips(content, rotate, ratio, width, height, font, gapX, gapY) {\n    // ================= Text / Image =================\n    const [ctx, canvas, contentWidth, contentHeight] = prepareCanvas(width, height, ratio);\n    if (content instanceof HTMLImageElement) {\n      // Image\n      ctx.drawImage(content, 0, 0, contentWidth, contentHeight);\n    } else {\n      // Text\n      const {\n        color,\n        fontSize,\n        fontStyle,\n        fontWeight,\n        fontFamily,\n        textAlign\n      } = font;\n      const mergedFontSize = Number(fontSize) * ratio;\n      ctx.font = `${fontStyle} normal ${fontWeight} ${mergedFontSize}px/${height}px ${fontFamily}`;\n      ctx.fillStyle = color;\n      ctx.textAlign = textAlign;\n      ctx.textBaseline = 'top';\n      const contents = Array.isArray(content) ? content : [content];\n      contents === null || contents === void 0 ? void 0 : contents.forEach((item, index) => {\n        ctx.fillText(item !== null && item !== void 0 ? item : '', contentWidth / 2, index * (mergedFontSize + FontGap * ratio));\n      });\n    }\n    // ==================== Rotate ====================\n    const angle = Math.PI / 180 * Number(rotate);\n    const maxSize = Math.max(width, height);\n    const [rCtx, rCanvas, realMaxSize] = prepareCanvas(maxSize, maxSize, ratio);\n    // Copy from `ctx` and rotate\n    rCtx.translate(realMaxSize / 2, realMaxSize / 2);\n    rCtx.rotate(angle);\n    if (contentWidth > 0 && contentHeight > 0) {\n      rCtx.drawImage(canvas, -contentWidth / 2, -contentHeight / 2);\n    }\n    // Get boundary of rotated text\n    function getRotatePos(x, y) {\n      const targetX = x * Math.cos(angle) - y * Math.sin(angle);\n      const targetY = x * Math.sin(angle) + y * Math.cos(angle);\n      return [targetX, targetY];\n    }\n    let left = 0;\n    let right = 0;\n    let top = 0;\n    let bottom = 0;\n    const halfWidth = contentWidth / 2;\n    const halfHeight = contentHeight / 2;\n    const points = [[0 - halfWidth, 0 - halfHeight], [0 + halfWidth, 0 - halfHeight], [0 + halfWidth, 0 + halfHeight], [0 - halfWidth, 0 + halfHeight]];\n    points.forEach(_ref => {\n      let [x, y] = _ref;\n      const [targetX, targetY] = getRotatePos(x, y);\n      left = Math.min(left, targetX);\n      right = Math.max(right, targetX);\n      top = Math.min(top, targetY);\n      bottom = Math.max(bottom, targetY);\n    });\n    const cutLeft = left + realMaxSize / 2;\n    const cutTop = top + realMaxSize / 2;\n    const cutWidth = right - left;\n    const cutHeight = bottom - top;\n    // ================ Fill Alternate ================\n    const realGapX = gapX * ratio;\n    const realGapY = gapY * ratio;\n    const filledWidth = (cutWidth + realGapX) * 2;\n    const filledHeight = cutHeight + realGapY;\n    const [fCtx, fCanvas] = prepareCanvas(filledWidth, filledHeight);\n    function drawImg() {\n      let targetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      let targetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      fCtx.drawImage(rCanvas, cutLeft, cutTop, cutWidth, cutHeight, targetX, targetY, cutWidth, cutHeight);\n    }\n    drawImg();\n    drawImg(cutWidth + realGapX, -cutHeight / 2 - realGapY / 2);\n    drawImg(cutWidth + realGapX, +cutHeight / 2 + realGapY / 2);\n    return [fCanvas.toDataURL(), filledWidth / ratio, filledHeight / ratio];\n  }\n  return getClips;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}