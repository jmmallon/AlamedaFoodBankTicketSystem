{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/esm/toConsumableArray\";import*as React from'react';import{conductCheck}from\"rc-tree/es/utils/conductUtil\";export default(function(rawLabeledValues,rawHalfCheckedValues,treeConduction,keyEntities){return React.useMemo(function(){var checkedKeys=rawLabeledValues.map(function(_ref){var value=_ref.value;return value;});var halfCheckedKeys=rawHalfCheckedValues.map(function(_ref2){var value=_ref2.value;return value;});var missingValues=checkedKeys.filter(function(key){return!keyEntities[key];});if(treeConduction){var _conductCheck=conductCheck(checkedKeys,true,keyEntities);checkedKeys=_conductCheck.checkedKeys;halfCheckedKeys=_conductCheck.halfCheckedKeys;}return[// Checked keys should fill with missing keys which should de-duplicated\nArray.from(new Set([].concat(_toConsumableArray(missingValues),_toConsumableArray(checkedKeys)))),// Half checked keys\nhalfCheckedKeys];},[rawLabeledValues,rawHalfCheckedValues,treeConduction,keyEntities]);});","map":{"version":3,"names":["_toConsumableArray","React","conductCheck","rawLabeledValues","rawHalfCheckedValues","treeConduction","keyEntities","useMemo","checkedKeys","map","_ref","value","halfCheckedKeys","_ref2","missingValues","filter","key","_conductCheck","Array","from","Set","concat"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-tree-select/es/hooks/useCheckedKeys.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nexport default (function (rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities) {\n  return React.useMemo(function () {\n    var checkedKeys = rawLabeledValues.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    var halfCheckedKeys = rawHalfCheckedValues.map(function (_ref2) {\n      var value = _ref2.value;\n      return value;\n    });\n    var missingValues = checkedKeys.filter(function (key) {\n      return !keyEntities[key];\n    });\n    if (treeConduction) {\n      var _conductCheck = conductCheck(checkedKeys, true, keyEntities);\n      checkedKeys = _conductCheck.checkedKeys;\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n    }\n    return [\n    // Checked keys should fill with missing keys which should de-duplicated\n    Array.from(new Set([].concat(_toConsumableArray(missingValues), _toConsumableArray(checkedKeys)))),\n    // Half checked keys\n    halfCheckedKeys];\n  }, [rawLabeledValues, rawHalfCheckedValues, treeConduction, keyEntities]);\n});"],"mappings":"AAAA,MAAO,CAAAA,kBAAkB,KAAM,8CAA8C,CAC7E,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,OAASC,YAAY,KAAQ,8BAA8B,CAC3D,eAAgB,SAAUC,gBAAgB,CAAEC,oBAAoB,CAAEC,cAAc,CAAEC,WAAW,CAAE,CAC7F,MAAO,CAAAL,KAAK,CAACM,OAAO,CAAC,UAAY,CAC/B,GAAI,CAAAC,WAAW,CAAGL,gBAAgB,CAACM,GAAG,CAAC,SAAUC,IAAI,CAAE,CACrD,GAAI,CAAAC,KAAK,CAAGD,IAAI,CAACC,KAAK,CACtB,MAAO,CAAAA,KAAK,CACd,CAAC,CAAC,CACF,GAAI,CAAAC,eAAe,CAAGR,oBAAoB,CAACK,GAAG,CAAC,SAAUI,KAAK,CAAE,CAC9D,GAAI,CAAAF,KAAK,CAAGE,KAAK,CAACF,KAAK,CACvB,MAAO,CAAAA,KAAK,CACd,CAAC,CAAC,CACF,GAAI,CAAAG,aAAa,CAAGN,WAAW,CAACO,MAAM,CAAC,SAAUC,GAAG,CAAE,CACpD,MAAO,CAACV,WAAW,CAACU,GAAG,CAAC,CAC1B,CAAC,CAAC,CACF,GAAIX,cAAc,CAAE,CAClB,GAAI,CAAAY,aAAa,CAAGf,YAAY,CAACM,WAAW,CAAE,IAAI,CAAEF,WAAW,CAAC,CAChEE,WAAW,CAAGS,aAAa,CAACT,WAAW,CACvCI,eAAe,CAAGK,aAAa,CAACL,eAAe,CACjD,CACA,MAAO,CACP;AACAM,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAC,GAAG,CAAC,EAAE,CAACC,MAAM,CAACrB,kBAAkB,CAACc,aAAa,CAAC,CAAEd,kBAAkB,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC,CAClG;AACAI,eAAe,CAAC,CAClB,CAAC,CAAE,CAACT,gBAAgB,CAAEC,oBAAoB,CAAEC,cAAc,CAAEC,WAAW,CAAC,CAAC,CAC3E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}