{"ast":null,"code":"const t=t=>\"object\"==typeof t&&null!=t&&1===t.nodeType,e=(t,e)=>(!e||\"hidden\"!==t)&&\"visible\"!==t&&\"clip\"!==t,n=(t,n)=>{if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){const o=getComputedStyle(t,null);return e(o.overflowY,n)||e(o.overflowX,n)||(t=>{const e=(t=>{if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement;}catch(t){return null;}})(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth);})(t);}return!1;},o=(t,e,n,o,l,r,i,s)=>r<t&&i>e||r>t&&i<e?0:r<=t&&s<=n||i>=e&&s>=n?r-t-o:i>e&&s<n||r<t&&s>n?i-e+l:0,l=t=>{const e=t.parentElement;return null==e?t.getRootNode().host||null:e;},r=(e,r)=>{var i,s,d,h;if(\"undefined\"==typeof document)return[];const{scrollMode:c,block:f,inline:u,boundary:a,skipOverflowHiddenElements:g}=r,p=\"function\"==typeof a?a:t=>t!==a;if(!t(e))throw new TypeError(\"Invalid target\");const m=document.scrollingElement||document.documentElement,w=[];let W=e;for(;t(W)&&p(W);){if(W=l(W),W===m){w.push(W);break;}null!=W&&W===document.body&&n(W)&&!n(document.documentElement)||null!=W&&n(W,g)&&w.push(W);}const b=null!=(s=null==(i=window.visualViewport)?void 0:i.width)?s:innerWidth,H=null!=(h=null==(d=window.visualViewport)?void 0:d.height)?h:innerHeight,{scrollX:y,scrollY:M}=window,{height:v,width:E,top:x,right:C,bottom:I,left:R}=e.getBoundingClientRect(),{top:T,right:B,bottom:F,left:V}=(t=>{const e=window.getComputedStyle(t);return{top:parseFloat(e.scrollMarginTop)||0,right:parseFloat(e.scrollMarginRight)||0,bottom:parseFloat(e.scrollMarginBottom)||0,left:parseFloat(e.scrollMarginLeft)||0};})(e);let k=\"start\"===f||\"nearest\"===f?x-T:\"end\"===f?I+F:x+v/2-T+F,D=\"center\"===u?R+E/2-V+B:\"end\"===u?C+B:R-V;const L=[];for(let t=0;t<w.length;t++){const e=w[t],{height:n,width:l,top:r,right:i,bottom:s,left:d}=e.getBoundingClientRect();if(\"if-needed\"===c&&x>=0&&R>=0&&I<=H&&C<=b&&x>=r&&I<=s&&R>=d&&C<=i)return L;const h=getComputedStyle(e),a=parseInt(h.borderLeftWidth,10),g=parseInt(h.borderTopWidth,10),p=parseInt(h.borderRightWidth,10),W=parseInt(h.borderBottomWidth,10);let T=0,B=0;const F=\"offsetWidth\"in e?e.offsetWidth-e.clientWidth-a-p:0,V=\"offsetHeight\"in e?e.offsetHeight-e.clientHeight-g-W:0,S=\"offsetWidth\"in e?0===e.offsetWidth?0:l/e.offsetWidth:0,X=\"offsetHeight\"in e?0===e.offsetHeight?0:n/e.offsetHeight:0;if(m===e)T=\"start\"===f?k:\"end\"===f?k-H:\"nearest\"===f?o(M,M+H,H,g,W,M+k,M+k+v,v):k-H/2,B=\"start\"===u?D:\"center\"===u?D-b/2:\"end\"===u?D-b:o(y,y+b,b,a,p,y+D,y+D+E,E),T=Math.max(0,T+M),B=Math.max(0,B+y);else{T=\"start\"===f?k-r-g:\"end\"===f?k-s+W+V:\"nearest\"===f?o(r,s,n,g,W+V,k,k+v,v):k-(r+n/2)+V/2,B=\"start\"===u?D-d-a:\"center\"===u?D-(d+l/2)+F/2:\"end\"===u?D-i+p+F:o(d,i,l,a,p+F,D,D+E,E);const{scrollLeft:t,scrollTop:h}=e;T=0===X?0:Math.max(0,Math.min(h+T/X,e.scrollHeight-n/X+V)),B=0===S?0:Math.max(0,Math.min(t+B/S,e.scrollWidth-l/S+F)),k+=h-T,D+=t-B;}L.push({el:e,top:T,left:B});}return L;};export{r as compute};","map":{"version":3,"names":["t","nodeType","e","n","clientHeight","scrollHeight","clientWidth","scrollWidth","o","getComputedStyle","overflowY","overflowX","ownerDocument","defaultView","frameElement","l","r","i","s","parentElement","getRootNode","host","d","h","document","scrollMode","c","block","f","inline","u","boundary","a","skipOverflowHiddenElements","g","p","TypeError","m","scrollingElement","documentElement","w","W","push","body","b","window","visualViewport","width","innerWidth","H","height","innerHeight","scrollX","y","scrollY","M","v","E","top","x","right","C","bottom","I","left","R","getBoundingClientRect","T","B","F","V","parseFloat","scrollMarginTop","scrollMarginRight","scrollMarginBottom","scrollMarginLeft","k","D","L","length","parseInt","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","offsetWidth","offsetHeight","S","X","Math","max","scrollLeft","scrollTop","min","el","compute"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/compute-scroll-into-view/src/index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nconst isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nconst canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nconst getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nconst isHiddenByFrame = (el: Element): boolean => {\n  const frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nconst isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    const style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nconst getParentElement = (element: Node): Element | null => {\n  const parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\nconst getScrollMargins = (target: Element) => {\n  const computedStyle = window.getComputedStyle(target)\n  return {\n    top: parseFloat(computedStyle.scrollMarginTop) || 0,\n    right: parseFloat(computedStyle.scrollMarginRight) || 0,\n    bottom: parseFloat(computedStyle.scrollMarginBottom) || 0,\n    left: parseFloat(computedStyle.scrollMarginLeft) || 0,\n  }\n}\n\n/** @public */\nexport const compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  const { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  const checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  const scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  const frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  const viewportWidth = window.visualViewport?.width ?? innerWidth\n  const viewportHeight = window.visualViewport?.height ?? innerHeight\n  const { scrollX, scrollY } = window\n\n  const {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n  const {\n    top: marginTop,\n    right: marginRight,\n    bottom: marginBottom,\n    left: marginLeft,\n  } = getScrollMargins(target)\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop - marginTop\n      : block === 'end'\n      ? targetBottom + marginBottom\n      : targetTop + targetHeight / 2 - marginTop + marginBottom // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2 - marginLeft + marginRight\n      : inline === 'end'\n      ? targetRight + marginRight\n      : targetLeft - marginLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  const computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    const frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    const { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    const frameStyle = getComputedStyle(frame)\n    const borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    const borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    const borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    const borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    const scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    const scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    const scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    const scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      const { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll =\n        scaleY === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollTop + blockScroll / scaleY,\n                frame.scrollHeight - height / scaleY + scrollbarHeight\n              )\n            )\n      inlineScroll =\n        scaleX === 0\n          ? 0\n          : Math.max(\n              0,\n              Math.min(\n                scrollLeft + inlineScroll / scaleX,\n                frame.scrollWidth - width / scaleX + scrollbarWidth\n              )\n            )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"],"mappings":"AA6EA,KAAM,CAAAA,CAAA,CAAaA,CAAA,EACH,gBAAP,CAAAA,CAAA,EAAyB,MAANA,CAAA,EAA8B,IAAhBA,CAAA,CAAGC,QAAA,CAEvCC,CAAA,CAAcA,CAClBF,CAAA,CACAE,CAAA,KAEIA,CAAA,EAA2C,WAAbF,CAAA,GAId,YAAbA,CAAA,EAAuC,SAAbA,CAAA,CA0B7BG,CAAA,CAAeA,CAACH,CAAA,CAAaG,CAAA,IACjC,GAAIH,CAAA,CAAGI,YAAA,CAAeJ,CAAA,CAAGK,YAAA,EAAgBL,CAAA,CAAGM,WAAA,CAAcN,CAAA,CAAGO,WAAA,CAAa,CAClE,MAAAC,CAAA,CAAQC,gBAAA,CAAiBT,CAAA,CAAI,MAEjC,OAAAE,CAAA,CAAYM,CAAA,CAAME,SAAA,CAAWP,CAAA,GAC7BD,CAAA,CAAYM,CAAA,CAAMG,SAAA,CAAWR,CAAA,GAhBV,CAAAH,CAAA,GACjB,MAAAE,CAAA,CAbiB,CAAAF,CAAA,GACvB,IAAKA,CAAA,CAAGY,aAAA,GAAkBZ,CAAA,CAAGY,aAAA,CAAcC,WAAA,CAClC,YAGL,IACK,OAAAb,CAAA,CAAGY,aAAA,CAAcC,WAAA,CAAYC,YAAA,QAC7Bd,CAAA,EACA,WACT,KAI8BA,CAAA,EAC9B,QAAKE,CAAA,GAKHA,CAAA,CAAME,YAAA,CAAeJ,CAAA,CAAGK,YAAA,EAAgBH,CAAA,CAAMI,WAAA,CAAcN,CAAA,CAAGO,WAAA,KAU7CP,CAAA,CAEpB,EAEO,WAWHQ,CAAA,CAAeA,CACnBR,CAAA,CACAE,CAAA,CACAC,CAAA,CACAK,CAAA,CACAO,CAAA,CACAC,CAAA,CACAC,CAAA,CACAC,CAAA,GAsBGF,CAAA,CAAmBhB,CAAA,EAClBiB,CAAA,CAAiBf,CAAA,EAClBc,CAAA,CAAmBhB,CAAA,EAAsBiB,CAAA,CAAiBf,CAAA,CAEpD,EA2CNc,CAAA,EAAoBhB,CAAA,EAAsBkB,CAAA,EAAef,CAAA,EACzDc,CAAA,EAAkBf,CAAA,EAAoBgB,CAAA,EAAef,CAAA,CAE/Ca,CAAA,CAAmBhB,CAAA,CAAqBQ,CAAA,CA4C9CS,CAAA,CAAiBf,CAAA,EAAoBgB,CAAA,CAAcf,CAAA,EACnDa,CAAA,CAAmBhB,CAAA,EAAsBkB,CAAA,CAAcf,CAAA,CAEjDc,CAAA,CAAiBf,CAAA,CAAmBa,CAAA,CAGtC,EAGHA,CAAA,CAAoBf,CAAA,GACxB,KAAM,CAAAE,CAAA,CAASF,CAAA,CAAQmB,aAAA,CACvB,MAAc,OAAVjB,CAAA,CACMF,CAAA,CAAQoB,WAAA,GAA6BC,IAAA,EAAQ,KAEhDnB,CAAA,GAcIc,CAAA,CAAUA,CAACd,CAAA,CAAiBc,CAAA,IA/RzC,IAAAC,CAAA,CAAAC,CAAA,CAAAI,CAAA,CAAAC,CAAA,CAgSM,GAAoB,mBAAb,CAAAC,QAAA,CAET,MAAO,GAGT,MAAMC,UAAA,CAAEC,CAAA,CAAYC,KAAA,CAAAC,CAAA,CAAAC,MAAA,CAAOC,CAAA,CAAQC,QAAA,CAAAC,CAAA,CAAAC,0BAAA,CAAUC,CAAA,EAC3ClB,CAAA,CAIImB,CAAA,CACgB,kBAAb,CAAAH,CAAA,CAA0BA,CAAA,CAAYhC,CAAA,EAAcA,CAAA,GAASgC,CAAA,CAElE,IAAChC,CAAA,CAAUE,CAAA,EACP,SAAI,CAAAkC,SAAA,CAAU,kBAIhB,MAAAC,CAAA,CAAmBb,QAAA,CAASc,gBAAA,EAAoBd,QAAA,CAASe,eAAA,CAGzDC,CAAA,CAAoB,GAC1B,GAAI,CAAAC,CAAA,CAAyBvC,CAAA,CAC7B,KAAOF,CAAA,CAAUyC,CAAA,GAAWN,CAAA,CAAcM,CAAA,GAAS,CAKjD,GAHAA,CAAA,CAAS1B,CAAA,CAAiB0B,CAAA,EAGtBA,CAAA,GAAWJ,CAAA,CAAkB,CAC/BG,CAAA,CAAOE,IAAA,CAAKD,CAAA,EACZ,MACF,CAIY,MAAVA,CAAA,EACAA,CAAA,GAAWjB,QAAA,CAASmB,IAAA,EACpBxC,CAAA,CAAasC,CAAA,IACZtC,CAAA,CAAaqB,QAAA,CAASe,eAAA,GAMX,MAAVE,CAAA,EAAkBtC,CAAA,CAAasC,CAAA,CAAQP,CAAA,GACzCM,CAAA,CAAOE,IAAA,CAAKD,CAAA,CAEhB,EAOA,KAAM,CAAAG,CAAA,CAAgB,OAAA1B,CAAA,QAAAD,CAAA,CAAA4B,MAAA,CAAOC,cAAA,MAAP,GAAA7B,CAAA,CAAuB8B,KAAA,EAAS7B,CAAA,CAAA8B,UAAA,CAChDC,CAAA,CAAiB,OAAA1B,CAAA,QAAAD,CAAA,CAAAuB,MAAA,CAAOC,cAAA,MAAP,GAAAxB,CAAA,CAAuB4B,MAAA,EAAU3B,CAAA,CAAA4B,WAAA,EAClDC,OAAA,CAAEC,CAAA,CAASC,OAAA,CAAAC,CAAA,EAAYV,MAAA,EAG3BK,MAAA,CAAQM,CAAA,CACRT,KAAA,CAAOU,CAAA,CACPC,GAAA,CAAKC,CAAA,CACLC,KAAA,CAAOC,CAAA,CACPC,MAAA,CAAQC,CAAA,CACRC,IAAA,CAAMC,CAAA,EACJ/D,CAAA,CAAOgE,qBAAA,IAETR,GAAA,CAAKS,CAAA,CACLP,KAAA,CAAOQ,CAAA,CACPN,MAAA,CAAQO,CAAA,CACRL,IAAA,CAAMM,CAAA,EAlFgB,CAAAtE,CAAA,GAClB,MAAAE,CAAA,CAAgB2C,MAAA,CAAOpC,gBAAA,CAAiBT,CAAA,EACvC,OACL0D,GAAA,CAAKa,UAAA,CAAWrE,CAAA,CAAcsE,eAAA,GAAoB,EAClDZ,KAAA,CAAOW,UAAA,CAAWrE,CAAA,CAAcuE,iBAAA,GAAsB,EACtDX,MAAA,CAAQS,UAAA,CAAWrE,CAAA,CAAcwE,kBAAA,GAAuB,EACxDV,IAAA,CAAMO,UAAA,CAAWrE,CAAA,CAAcyE,gBAAA,GAAqB,EACtD,IA4EqBzE,CAAA,EAGrB,GAAI,CAAA0E,CAAA,CACQ,UAAVhD,CAAA,EAA+B,YAAVA,CAAA,CACjB+B,CAAA,CAAYQ,CAAA,CACF,QAAVvC,CAAA,CACAmC,CAAA,CAAeM,CAAA,CACfV,CAAA,CAAYH,CAAA,CAAe,EAAIW,CAAA,CAAYE,CAAA,CAC7CQ,CAAA,CACS,WAAX/C,CAAA,CACImC,CAAA,CAAaR,CAAA,CAAc,EAAIa,CAAA,CAAaF,CAAA,CACjC,QAAXtC,CAAA,CACA+B,CAAA,CAAcO,CAAA,CACdH,CAAA,CAAaK,CAAA,CAGnB,KAAM,CAAAQ,CAAA,CAA+B,GAErC,OAAS,CAAA9E,CAAA,CAAQ,EAAGA,CAAA,CAAQwC,CAAA,CAAOuC,MAAA,CAAQ/E,CAAA,GAAS,CAC5C,MAAAE,CAAA,CAAQsC,CAAA,CAAOxC,CAAA,GAIfkD,MAAA,CAAE/C,CAAA,CAAA4C,KAAA,CAAQhC,CAAA,CAAO2C,GAAA,CAAA1C,CAAA,CAAA4C,KAAA,CAAK3C,CAAA,CAAA6C,MAAA,CAAO5C,CAAA,CAAQ8C,IAAA,CAAA1C,CAAA,EACzCpB,CAAA,CAAMgE,qBAAA,GAIR,GACiB,cAAfxC,CAAA,EACAiC,CAAA,EAAa,GACbM,CAAA,EAAc,GACdF,CAAA,EAAgBd,CAAA,EAChBY,CAAA,EAAejB,CAAA,EACfe,CAAA,EAAa3C,CAAA,EACb+C,CAAA,EAAgB7C,CAAA,EAChB+C,CAAA,EAAc3C,CAAA,EACduC,CAAA,EAAe5C,CAAA,CAGR,OAAA6D,CAAA,CAGH,MAAAvD,CAAA,CAAad,gBAAA,CAAiBP,CAAA,EAC9B8B,CAAA,CAAagD,QAAA,CAASzD,CAAA,CAAW0D,eAAA,CAA2B,IAC5D/C,CAAA,CAAY8C,QAAA,CAASzD,CAAA,CAAW2D,cAAA,CAA0B,IAC1D/C,CAAA,CAAc6C,QAAA,CAASzD,CAAA,CAAW4D,gBAAA,CAA4B,IAC9D1C,CAAA,CAAeuC,QAAA,CAASzD,CAAA,CAAW6D,iBAAA,CAA6B,IAEtE,GAAI,CAAAjB,CAAA,CAAsB,EACtBC,CAAA,CAAuB,EAIrB,MAAAC,CAAA,CACJ,eAAiB,CAAAnE,CAAA,CACZA,CAAA,CAAsBmF,WAAA,CACtBnF,CAAA,CAAsBI,WAAA,CACvB0B,CAAA,CACAG,CAAA,CACA,EACAmC,CAAA,CACJ,gBAAkB,CAAApE,CAAA,CACbA,CAAA,CAAsBoF,YAAA,CACtBpF,CAAA,CAAsBE,YAAA,CACvB8B,CAAA,CACAO,CAAA,CACA,EAEA8C,CAAA,CACJ,eAAiB,CAAArF,CAAA,CAC0B,IAAtCA,CAAA,CAAsBmF,WAAA,CACrB,EACAtE,CAAA,CAASb,CAAA,CAAsBmF,WAAA,CACjC,EACAG,CAAA,CACJ,gBAAkB,CAAAtF,CAAA,CAC0B,IAAvCA,CAAA,CAAsBoF,YAAA,CACrB,EACAnF,CAAA,CAAUD,CAAA,CAAsBoF,YAAA,CAClC,EAEN,GAAIjD,CAAA,GAAqBnC,CAAA,CAIPiE,CAAA,CADF,UAAVvC,CAAA,CACYgD,CAAA,CACK,QAAVhD,CAAA,CACKgD,CAAA,CAAc3B,CAAA,CACT,YAAVrB,CAAA,CACKpB,CAAA,CACZ+C,CAAA,CACAA,CAAA,CAAUN,CAAA,CACVA,CAAA,CACAf,CAAA,CACAO,CAAA,CACAc,CAAA,CAAUqB,CAAA,CACVrB,CAAA,CAAUqB,CAAA,CAAcpB,CAAA,CACxBA,CAAA,EAIYoB,CAAA,CAAc3B,CAAA,CAAiB,EAI9BmB,CAAA,CADF,UAAXtC,CAAA,CACa+C,CAAA,CACK,WAAX/C,CAAA,CACM+C,CAAA,CAAejC,CAAA,CAAgB,EAC1B,QAAXd,CAAA,CACM+C,CAAA,CAAejC,CAAA,CAGfpC,CAAA,CACb6C,CAAA,CACAA,CAAA,CAAUT,CAAA,CACVA,CAAA,CACAZ,CAAA,CACAG,CAAA,CACAkB,CAAA,CAAUwB,CAAA,CACVxB,CAAA,CAAUwB,CAAA,CAAepB,CAAA,CACzBA,CAAA,EAMJU,CAAA,CAAcsB,IAAA,CAAKC,GAAA,CAAI,EAAGvB,CAAA,CAAcZ,CAAA,EACxCa,CAAA,CAAeqB,IAAA,CAAKC,GAAA,CAAI,EAAGtB,CAAA,CAAef,CAAA,MACrC,CAGHc,CAAA,CADY,UAAVvC,CAAA,CACYgD,CAAA,CAAc5D,CAAA,CAAMkB,CAAA,CACf,QAAVN,CAAA,CACKgD,CAAA,CAAc1D,CAAA,CAASuB,CAAA,CAAe6B,CAAA,CACjC,YAAV1C,CAAA,CACKpB,CAAA,CACZQ,CAAA,CACAE,CAAA,CACAf,CAAA,CACA+B,CAAA,CACAO,CAAA,CAAe6B,CAAA,CACfM,CAAA,CACAA,CAAA,CAAcpB,CAAA,CACdA,CAAA,EAIYoB,CAAA,EAAe5D,CAAA,CAAMb,CAAA,CAAS,GAAKmE,CAAA,CAAkB,EAInEF,CAAA,CADa,UAAXtC,CAAA,CACa+C,CAAA,CAAevD,CAAA,CAAOU,CAAA,CACjB,WAAXF,CAAA,CACM+C,CAAA,EAAgBvD,CAAA,CAAOP,CAAA,CAAQ,GAAKsD,CAAA,CAAiB,EAChD,QAAXvC,CAAA,CACM+C,CAAA,CAAe5D,CAAA,CAAQkB,CAAA,CAAckC,CAAA,CAGrC7D,CAAA,CACbc,CAAA,CACAL,CAAA,CACAF,CAAA,CACAiB,CAAA,CACAG,CAAA,CAAckC,CAAA,CACdQ,CAAA,CACAA,CAAA,CAAepB,CAAA,CACfA,CAAA,EAIE,MAAAkC,UAAA,CAAE3F,CAAA,CAAY4F,SAAA,CAAArE,CAAA,EAAcrB,CAAA,CAGhCiE,CAAA,CAAW,IAAXqB,CAAA,CACI,EACAC,IAAA,CAAKC,GAAA,CACH,EACAD,IAAA,CAAKI,GAAA,CACHtE,CAAA,CAAY4C,CAAA,CAAcqB,CAAA,CAC1BtF,CAAA,CAAMG,YAAA,CAAeF,CAAA,CAASqF,CAAA,CAASlB,CAAA,GAI/CF,CAAA,CAAW,IAAXmB,CAAA,CACI,EACAE,IAAA,CAAKC,GAAA,CACH,EACAD,IAAA,CAAKI,GAAA,CACH7F,CAAA,CAAaoE,CAAA,CAAemB,CAAA,CAC5BrF,CAAA,CAAMK,WAAA,CAAcQ,CAAA,CAAQwE,CAAA,CAASlB,CAAA,GAK/CO,CAAA,EAAerD,CAAA,CAAY4C,CAAA,CAC3BU,CAAA,EAAgB7E,CAAA,CAAaoE,CAC/B,EAEaU,CAAA,CAAApC,IAAA,CAAK,CAAEoD,EAAA,CAAI5F,CAAA,CAAOwD,GAAA,CAAKS,CAAA,CAAaH,IAAA,CAAMI,CAAA,EACzD,EAEO,OAAAU,CAAA,UACT9D,CAAA,IAAA+E,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}