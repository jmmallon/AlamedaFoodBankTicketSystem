{"ast":null,"code":"\"use client\";import React,{useEffect,useState}from'react';import{generateColor,getAlphaColor}from'../util';import ColorSteppers from'./ColorSteppers';const ColorAlphaInput=_ref=>{let{prefixCls,value,onChange}=_ref;const colorAlphaInputPrefixCls=\"\".concat(prefixCls,\"-alpha-input\");const[alphaValue,setAlphaValue]=useState(generateColor(value||'#000'));// Update step value\nuseEffect(()=>{if(value){setAlphaValue(value);}},[value]);const handleAlphaChange=step=>{const hsba=alphaValue.toHsb();hsba.a=(step||0)/100;const genColor=generateColor(hsba);if(!value){setAlphaValue(genColor);}onChange===null||onChange===void 0?void 0:onChange(genColor);};return/*#__PURE__*/React.createElement(ColorSteppers,{value:getAlphaColor(alphaValue),prefixCls:prefixCls,formatter:step=>\"\".concat(step,\"%\"),className:colorAlphaInputPrefixCls,onChange:handleAlphaChange});};export default ColorAlphaInput;","map":{"version":3,"names":["React","useEffect","useState","generateColor","getAlphaColor","ColorSteppers","ColorAlphaInput","_ref","prefixCls","value","onChange","colorAlphaInputPrefixCls","concat","alphaValue","setAlphaValue","handleAlphaChange","step","hsba","toHsb","a","genColor","createElement","formatter","className"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/color-picker/components/ColorAlphaInput.js"],"sourcesContent":["\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorAlphaInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [alphaValue, setAlphaValue] = useState(generateColor(value || '#000'));\n  // Update step value\n  useEffect(() => {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getAlphaColor(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;"],"mappings":"AAAA,YAAY,CAEZ,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,aAAa,CAAEC,aAAa,KAAQ,SAAS,CACtD,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,KAAM,CAAAC,eAAe,CAAGC,IAAI,EAAI,CAC9B,GAAI,CACFC,SAAS,CACTC,KAAK,CACLC,QACF,CAAC,CAAGH,IAAI,CACR,KAAM,CAAAI,wBAAwB,IAAAC,MAAA,CAAMJ,SAAS,gBAAc,CAC3D,KAAM,CAACK,UAAU,CAAEC,aAAa,CAAC,CAAGZ,QAAQ,CAACC,aAAa,CAACM,KAAK,EAAI,MAAM,CAAC,CAAC,CAC5E;AACAR,SAAS,CAAC,IAAM,CACd,GAAIQ,KAAK,CAAE,CACTK,aAAa,CAACL,KAAK,CAAC,CACtB,CACF,CAAC,CAAE,CAACA,KAAK,CAAC,CAAC,CACX,KAAM,CAAAM,iBAAiB,CAAGC,IAAI,EAAI,CAChC,KAAM,CAAAC,IAAI,CAAGJ,UAAU,CAACK,KAAK,CAAC,CAAC,CAC/BD,IAAI,CAACE,CAAC,CAAG,CAACH,IAAI,EAAI,CAAC,EAAI,GAAG,CAC1B,KAAM,CAAAI,QAAQ,CAAGjB,aAAa,CAACc,IAAI,CAAC,CACpC,GAAI,CAACR,KAAK,CAAE,CACVK,aAAa,CAACM,QAAQ,CAAC,CACzB,CACAV,QAAQ,GAAK,IAAI,EAAIA,QAAQ,GAAK,IAAK,EAAC,CAAG,IAAK,EAAC,CAAGA,QAAQ,CAACU,QAAQ,CAAC,CACxE,CAAC,CACD,MAAO,aAAapB,KAAK,CAACqB,aAAa,CAAChB,aAAa,CAAE,CACrDI,KAAK,CAAEL,aAAa,CAACS,UAAU,CAAC,CAChCL,SAAS,CAAEA,SAAS,CACpBc,SAAS,CAAEN,IAAI,KAAAJ,MAAA,CAAOI,IAAI,KAAG,CAC7BO,SAAS,CAAEZ,wBAAwB,CACnCD,QAAQ,CAAEK,iBACZ,CAAC,CAAC,CACJ,CAAC,CACD,cAAe,CAAAT,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}