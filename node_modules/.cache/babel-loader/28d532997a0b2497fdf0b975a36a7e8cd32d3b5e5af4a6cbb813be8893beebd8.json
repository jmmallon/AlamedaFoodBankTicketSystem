{"ast":null,"code":"import _objectSpread from\"@babel/runtime/helpers/esm/objectSpread2\";import*as React from'react';import{convertChildrenToData}from\"../utils/legacyUtil\";function parseSimpleTreeData(treeData,_ref){var id=_ref.id,pId=_ref.pId,rootPId=_ref.rootPId;var keyNodes={};var rootNodeList=[];// Fill in the map\nvar nodeList=treeData.map(function(node){var clone=_objectSpread({},node);var key=clone[id];keyNodes[key]=clone;clone.key=clone.key||key;return clone;});// Connect tree\nnodeList.forEach(function(node){var parentKey=node[pId];var parent=keyNodes[parentKey];// Fill parent\nif(parent){parent.children=parent.children||[];parent.children.push(node);}// Fill root tree node\nif(parentKey===rootPId||!parent&&rootPId===null){rootNodeList.push(node);}});return rootNodeList;}/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */export default function useTreeData(treeData,children,simpleMode){return React.useMemo(function(){if(treeData){return simpleMode?parseSimpleTreeData(treeData,_objectSpread({id:'id',pId:'pId',rootPId:null},simpleMode!==true?simpleMode:{})):treeData;}return convertChildrenToData(children);},[children,simpleMode,treeData]);}","map":{"version":3,"names":["_objectSpread","React","convertChildrenToData","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","key","forEach","parentKey","parent","children","push","useTreeData","simpleMode","useMemo"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-tree-select/es/hooks/useTreeData.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { convertChildrenToData } from \"../utils/legacyUtil\";\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = [];\n\n  // Fill in the map\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  });\n\n  // Connect tree\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey];\n\n    // Fill parent\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    }\n\n    // Fill root tree node\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\nexport default function useTreeData(treeData, children, simpleMode) {\n  return React.useMemo(function () {\n    if (treeData) {\n      return simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n        id: 'id',\n        pId: 'pId',\n        rootPId: null\n      }, simpleMode !== true ? simpleMode : {})) : treeData;\n    }\n    return convertChildrenToData(children);\n  }, [children, simpleMode, treeData]);\n}"],"mappings":"AAAA,MAAO,CAAAA,aAAa,KAAM,0CAA0C,CACpE,MAAO,GAAK,CAAAC,KAAK,KAAM,OAAO,CAC9B,OAASC,qBAAqB,KAAQ,qBAAqB,CAC3D,QAAS,CAAAC,mBAAmBA,CAACC,QAAQ,CAAEC,IAAI,CAAE,CAC3C,GAAI,CAAAC,EAAE,CAAGD,IAAI,CAACC,EAAE,CACdC,GAAG,CAAGF,IAAI,CAACE,GAAG,CACdC,OAAO,CAAGH,IAAI,CAACG,OAAO,CACxB,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAAC,CACjB,GAAI,CAAAC,YAAY,CAAG,EAAE,CAErB;AACA,GAAI,CAAAC,QAAQ,CAAGP,QAAQ,CAACQ,GAAG,CAAC,SAAUC,IAAI,CAAE,CAC1C,GAAI,CAAAC,KAAK,CAAGd,aAAa,CAAC,CAAC,CAAC,CAAEa,IAAI,CAAC,CACnC,GAAI,CAAAE,GAAG,CAAGD,KAAK,CAACR,EAAE,CAAC,CACnBG,QAAQ,CAACM,GAAG,CAAC,CAAGD,KAAK,CACrBA,KAAK,CAACC,GAAG,CAAGD,KAAK,CAACC,GAAG,EAAIA,GAAG,CAC5B,MAAO,CAAAD,KAAK,CACd,CAAC,CAAC,CAEF;AACAH,QAAQ,CAACK,OAAO,CAAC,SAAUH,IAAI,CAAE,CAC/B,GAAI,CAAAI,SAAS,CAAGJ,IAAI,CAACN,GAAG,CAAC,CACzB,GAAI,CAAAW,MAAM,CAAGT,QAAQ,CAACQ,SAAS,CAAC,CAEhC;AACA,GAAIC,MAAM,CAAE,CACVA,MAAM,CAACC,QAAQ,CAAGD,MAAM,CAACC,QAAQ,EAAI,EAAE,CACvCD,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACP,IAAI,CAAC,CAC5B,CAEA;AACA,GAAII,SAAS,GAAKT,OAAO,EAAI,CAACU,MAAM,EAAIV,OAAO,GAAK,IAAI,CAAE,CACxDE,YAAY,CAACU,IAAI,CAACP,IAAI,CAAC,CACzB,CACF,CAAC,CAAC,CACF,MAAO,CAAAH,YAAY,CACrB,CAEA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAW,WAAWA,CAACjB,QAAQ,CAAEe,QAAQ,CAAEG,UAAU,CAAE,CAClE,MAAO,CAAArB,KAAK,CAACsB,OAAO,CAAC,UAAY,CAC/B,GAAInB,QAAQ,CAAE,CACZ,MAAO,CAAAkB,UAAU,CAAGnB,mBAAmB,CAACC,QAAQ,CAAEJ,aAAa,CAAC,CAC9DM,EAAE,CAAE,IAAI,CACRC,GAAG,CAAE,KAAK,CACVC,OAAO,CAAE,IACX,CAAC,CAAEc,UAAU,GAAK,IAAI,CAAGA,UAAU,CAAG,CAAC,CAAC,CAAC,CAAC,CAAGlB,QAAQ,CACvD,CACA,MAAO,CAAAF,qBAAqB,CAACiB,QAAQ,CAAC,CACxC,CAAC,CAAE,CAACA,QAAQ,CAAEG,UAAU,CAAElB,QAAQ,CAAC,CAAC,CACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}