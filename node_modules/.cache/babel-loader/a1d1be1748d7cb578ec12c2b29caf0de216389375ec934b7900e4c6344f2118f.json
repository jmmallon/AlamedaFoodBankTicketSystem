{"ast":null,"code":"import*as React from'react';// recursion (flat tree structure)\nfunction fillRecords(list,record,indent,childrenColumnName,expandedKeys,getRowKey,index){list.push({record:record,indent:indent,index:index});var key=getRowKey(record);var expanded=expandedKeys===null||expandedKeys===void 0?void 0:expandedKeys.has(key);if(record&&Array.isArray(record[childrenColumnName])&&expanded){// expanded state, flat record\nfor(var i=0;i<record[childrenColumnName].length;i+=1){fillRecords(list,record[childrenColumnName][i],indent+1,childrenColumnName,expandedKeys,getRowKey,i);}}}/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */export default function useFlattenRecords(data,childrenColumnName,expandedKeys,getRowKey){var arr=React.useMemo(function(){if(expandedKeys!==null&&expandedKeys!==void 0&&expandedKeys.size){var list=[];// collect flattened record\nfor(var i=0;i<(data===null||data===void 0?void 0:data.length);i+=1){var record=data[i];// using array.push or spread operator may cause \"Maximum call stack size exceeded\" exception if array size is big enough.\nfillRecords(list,record,0,childrenColumnName,expandedKeys,getRowKey,i);}return list;}return data===null||data===void 0?void 0:data.map(function(item,index){return{record:item,indent:0,index:index};});},[data,childrenColumnName,expandedKeys,getRowKey]);return arr;}","map":{"version":3,"names":["React","fillRecords","list","record","indent","childrenColumnName","expandedKeys","getRowKey","index","push","key","expanded","has","Array","isArray","i","length","useFlattenRecords","data","arr","useMemo","size","map","item"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-table/es/hooks/useFlattenRecords.js"],"sourcesContent":["import * as React from 'react';\n// recursion (flat tree structure)\nfunction fillRecords(list, record, indent, childrenColumnName, expandedKeys, getRowKey, index) {\n  list.push({\n    record: record,\n    indent: indent,\n    index: index\n  });\n  var key = getRowKey(record);\n  var expanded = expandedKeys === null || expandedKeys === void 0 ? void 0 : expandedKeys.has(key);\n  if (record && Array.isArray(record[childrenColumnName]) && expanded) {\n    // expanded state, flat record\n    for (var i = 0; i < record[childrenColumnName].length; i += 1) {\n      fillRecords(list, record[childrenColumnName][i], indent + 1, childrenColumnName, expandedKeys, getRowKey, i);\n    }\n  }\n}\n/**\n * flat tree data on expanded state\n *\n * @export\n * @template T\n * @param {*} data : table data\n * @param {string} childrenColumnName : 指定树形结构的列名\n * @param {Set<Key>} expandedKeys : 展开的行对应的keys\n * @param {GetRowKey<T>} getRowKey  : 获取当前rowKey的方法\n * @returns flattened data\n */\nexport default function useFlattenRecords(data, childrenColumnName, expandedKeys, getRowKey) {\n  var arr = React.useMemo(function () {\n    if (expandedKeys !== null && expandedKeys !== void 0 && expandedKeys.size) {\n      var list = [];\n\n      // collect flattened record\n      for (var i = 0; i < (data === null || data === void 0 ? void 0 : data.length); i += 1) {\n        var record = data[i];\n\n        // using array.push or spread operator may cause \"Maximum call stack size exceeded\" exception if array size is big enough.\n        fillRecords(list, record, 0, childrenColumnName, expandedKeys, getRowKey, i);\n      }\n      return list;\n    }\n    return data === null || data === void 0 ? void 0 : data.map(function (item, index) {\n      return {\n        record: item,\n        indent: 0,\n        index: index\n      };\n    });\n  }, [data, childrenColumnName, expandedKeys, getRowKey]);\n  return arr;\n}"],"mappings":"AAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B;AACA,QAAS,CAAAC,WAAWA,CAACC,IAAI,CAAEC,MAAM,CAAEC,MAAM,CAAEC,kBAAkB,CAAEC,YAAY,CAAEC,SAAS,CAAEC,KAAK,CAAE,CAC7FN,IAAI,CAACO,IAAI,CAAC,CACRN,MAAM,CAAEA,MAAM,CACdC,MAAM,CAAEA,MAAM,CACdI,KAAK,CAAEA,KACT,CAAC,CAAC,CACF,GAAI,CAAAE,GAAG,CAAGH,SAAS,CAACJ,MAAM,CAAC,CAC3B,GAAI,CAAAQ,QAAQ,CAAGL,YAAY,GAAK,IAAI,EAAIA,YAAY,GAAK,IAAK,EAAC,CAAG,IAAK,EAAC,CAAGA,YAAY,CAACM,GAAG,CAACF,GAAG,CAAC,CAChG,GAAIP,MAAM,EAAIU,KAAK,CAACC,OAAO,CAACX,MAAM,CAACE,kBAAkB,CAAC,CAAC,EAAIM,QAAQ,CAAE,CACnE;AACA,IAAK,GAAI,CAAAI,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGZ,MAAM,CAACE,kBAAkB,CAAC,CAACW,MAAM,CAAED,CAAC,EAAI,CAAC,CAAE,CAC7Dd,WAAW,CAACC,IAAI,CAAEC,MAAM,CAACE,kBAAkB,CAAC,CAACU,CAAC,CAAC,CAAEX,MAAM,CAAG,CAAC,CAAEC,kBAAkB,CAAEC,YAAY,CAAEC,SAAS,CAAEQ,CAAC,CAAC,CAC9G,CACF,CACF,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAAS,CAAAE,iBAAiBA,CAACC,IAAI,CAAEb,kBAAkB,CAAEC,YAAY,CAAEC,SAAS,CAAE,CAC3F,GAAI,CAAAY,GAAG,CAAGnB,KAAK,CAACoB,OAAO,CAAC,UAAY,CAClC,GAAId,YAAY,GAAK,IAAI,EAAIA,YAAY,GAAK,IAAK,EAAC,EAAIA,YAAY,CAACe,IAAI,CAAE,CACzE,GAAI,CAAAnB,IAAI,CAAG,EAAE,CAEb;AACA,IAAK,GAAI,CAAAa,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAIG,IAAI,GAAK,IAAI,EAAIA,IAAI,GAAK,IAAK,EAAC,CAAG,IAAK,EAAC,CAAGA,IAAI,CAACF,MAAM,CAAC,CAAED,CAAC,EAAI,CAAC,CAAE,CACrF,GAAI,CAAAZ,MAAM,CAAGe,IAAI,CAACH,CAAC,CAAC,CAEpB;AACAd,WAAW,CAACC,IAAI,CAAEC,MAAM,CAAE,CAAC,CAAEE,kBAAkB,CAAEC,YAAY,CAAEC,SAAS,CAAEQ,CAAC,CAAC,CAC9E,CACA,MAAO,CAAAb,IAAI,CACb,CACA,MAAO,CAAAgB,IAAI,GAAK,IAAI,EAAIA,IAAI,GAAK,IAAK,EAAC,CAAG,IAAK,EAAC,CAAGA,IAAI,CAACI,GAAG,CAAC,SAAUC,IAAI,CAAEf,KAAK,CAAE,CACjF,MAAO,CACLL,MAAM,CAAEoB,IAAI,CACZnB,MAAM,CAAE,CAAC,CACTI,KAAK,CAAEA,KACT,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAAE,CAACU,IAAI,CAAEb,kBAAkB,CAAEC,YAAY,CAAEC,SAAS,CAAC,CAAC,CACvD,MAAO,CAAAY,GAAG,CACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}