{"ast":null,"code":"/* eslint-disable max-classes-per-file */import BigIntDecimal from\"./BigIntDecimal\";import NumberDecimal from\"./NumberDecimal\";import{trimNumber}from\"./numberUtil\";import{supportBigInt}from\"./supportUtil\";// Still support origin export\nexport{NumberDecimal,BigIntDecimal};export default function getMiniDecimal(value){// We use BigInt here.\n// Will fallback to Number if not support.\nif(supportBigInt()){return new BigIntDecimal(value);}return new NumberDecimal(value);}/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */export function toFixed(numStr,separatorStr,precision){var cutOnly=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;if(numStr===''){return'';}var _trimNumber=trimNumber(numStr),negativeStr=_trimNumber.negativeStr,integerStr=_trimNumber.integerStr,decimalStr=_trimNumber.decimalStr;var precisionDecimalStr=\"\".concat(separatorStr).concat(decimalStr);var numberWithoutDecimal=\"\".concat(negativeStr).concat(integerStr);if(precision>=0){// We will get last + 1 number to check if need advanced number\nvar advancedNum=Number(decimalStr[precision]);if(advancedNum>=5&&!cutOnly){var advancedDecimal=getMiniDecimal(numStr).add(\"\".concat(negativeStr,\"0.\").concat('0'.repeat(precision)).concat(10-advancedNum));return toFixed(advancedDecimal.toString(),separatorStr,precision,cutOnly);}if(precision===0){return numberWithoutDecimal;}return\"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision,'0').slice(0,precision));}if(precisionDecimalStr==='.0'){return numberWithoutDecimal;}return\"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);}","map":{"version":3,"names":["BigIntDecimal","NumberDecimal","trimNumber","supportBigInt","getMiniDecimal","value","toFixed","numStr","separatorStr","precision","cutOnly","arguments","length","undefined","_trimNumber","negativeStr","integerStr","decimalStr","precisionDecimalStr","concat","numberWithoutDecimal","advancedNum","Number","advancedDecimal","add","repeat","toString","padEnd","slice"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/@rc-component/mini-decimal/es/MiniDecimal.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n\nimport BigIntDecimal from \"./BigIntDecimal\";\nimport NumberDecimal from \"./NumberDecimal\";\nimport { trimNumber } from \"./numberUtil\";\nimport { supportBigInt } from \"./supportUtil\";\n\n// Still support origin export\nexport { NumberDecimal, BigIntDecimal };\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n  return new NumberDecimal(value);\n}\n\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (numStr === '') {\n    return '';\n  }\n  var _trimNumber = trimNumber(numStr),\n    negativeStr = _trimNumber.negativeStr,\n    integerStr = _trimNumber.integerStr,\n    decimalStr = _trimNumber.decimalStr;\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}"],"mappings":"AAAA,yCAEA,MAAO,CAAAA,aAAa,KAAM,iBAAiB,CAC3C,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAC3C,OAASC,UAAU,KAAQ,cAAc,CACzC,OAASC,aAAa,KAAQ,eAAe,CAE7C;AACA,OAASF,aAAa,CAAED,aAAa,EACrC,cAAe,SAAS,CAAAI,cAAcA,CAACC,KAAK,CAAE,CAC5C;AACA;AACA,GAAIF,aAAa,CAAC,CAAC,CAAE,CACnB,MAAO,IAAI,CAAAH,aAAa,CAACK,KAAK,CAAC,CACjC,CACA,MAAO,IAAI,CAAAJ,aAAa,CAACI,KAAK,CAAC,CACjC,CAEA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAC,OAAOA,CAACC,MAAM,CAAEC,YAAY,CAAEC,SAAS,CAAE,CACvD,GAAI,CAAAC,OAAO,CAAGC,SAAS,CAACC,MAAM,CAAG,CAAC,EAAID,SAAS,CAAC,CAAC,CAAC,GAAKE,SAAS,CAAGF,SAAS,CAAC,CAAC,CAAC,CAAG,KAAK,CACvF,GAAIJ,MAAM,GAAK,EAAE,CAAE,CACjB,MAAO,EAAE,CACX,CACA,GAAI,CAAAO,WAAW,CAAGZ,UAAU,CAACK,MAAM,CAAC,CAClCQ,WAAW,CAAGD,WAAW,CAACC,WAAW,CACrCC,UAAU,CAAGF,WAAW,CAACE,UAAU,CACnCC,UAAU,CAAGH,WAAW,CAACG,UAAU,CACrC,GAAI,CAAAC,mBAAmB,CAAG,EAAE,CAACC,MAAM,CAACX,YAAY,CAAC,CAACW,MAAM,CAACF,UAAU,CAAC,CACpE,GAAI,CAAAG,oBAAoB,CAAG,EAAE,CAACD,MAAM,CAACJ,WAAW,CAAC,CAACI,MAAM,CAACH,UAAU,CAAC,CACpE,GAAIP,SAAS,EAAI,CAAC,CAAE,CAClB;AACA,GAAI,CAAAY,WAAW,CAAGC,MAAM,CAACL,UAAU,CAACR,SAAS,CAAC,CAAC,CAC/C,GAAIY,WAAW,EAAI,CAAC,EAAI,CAACX,OAAO,CAAE,CAChC,GAAI,CAAAa,eAAe,CAAGnB,cAAc,CAACG,MAAM,CAAC,CAACiB,GAAG,CAAC,EAAE,CAACL,MAAM,CAACJ,WAAW,CAAE,IAAI,CAAC,CAACI,MAAM,CAAC,GAAG,CAACM,MAAM,CAAChB,SAAS,CAAC,CAAC,CAACU,MAAM,CAAC,EAAE,CAAGE,WAAW,CAAC,CAAC,CACrI,MAAO,CAAAf,OAAO,CAACiB,eAAe,CAACG,QAAQ,CAAC,CAAC,CAAElB,YAAY,CAAEC,SAAS,CAAEC,OAAO,CAAC,CAC9E,CACA,GAAID,SAAS,GAAK,CAAC,CAAE,CACnB,MAAO,CAAAW,oBAAoB,CAC7B,CACA,MAAO,EAAE,CAACD,MAAM,CAACC,oBAAoB,CAAC,CAACD,MAAM,CAACX,YAAY,CAAC,CAACW,MAAM,CAACF,UAAU,CAACU,MAAM,CAAClB,SAAS,CAAE,GAAG,CAAC,CAACmB,KAAK,CAAC,CAAC,CAAEnB,SAAS,CAAC,CAAC,CAC3H,CACA,GAAIS,mBAAmB,GAAK,IAAI,CAAE,CAChC,MAAO,CAAAE,oBAAoB,CAC7B,CACA,MAAO,EAAE,CAACD,MAAM,CAACC,oBAAoB,CAAC,CAACD,MAAM,CAACD,mBAAmB,CAAC,CACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}