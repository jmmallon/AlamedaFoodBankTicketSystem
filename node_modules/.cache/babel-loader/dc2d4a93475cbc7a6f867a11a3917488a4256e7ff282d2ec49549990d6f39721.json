{"ast":null,"code":"export function isWindow(obj){return obj!==null&&obj!==undefined&&obj===obj.window;}export default function getScroll(target,top){var _a,_b;if(typeof window==='undefined'){return 0;}const method=top?'scrollTop':'scrollLeft';let result=0;if(isWindow(target)){result=target[top?'pageYOffset':'pageXOffset'];}else if(target instanceof Document){result=target.documentElement[method];}else if(target instanceof HTMLElement){result=target[method];}else if(target){// According to the type inference, the `target` is `never` type.\n// Since we configured the loose mode type checking, and supports mocking the target with such shape below::\n//    `{ documentElement: { scrollLeft: 200, scrollTop: 400 } }`,\n//    the program may falls into this branch.\n// Check the corresponding tests for details. Don't sure what is the real scenario this happens.\nresult=target[method];}if(target&&!isWindow(target)&&typeof result!=='number'){result=(_b=((_a=target.ownerDocument)!==null&&_a!==void 0?_a:target).documentElement)===null||_b===void 0?void 0:_b[method];}return result;}","map":{"version":3,"names":["isWindow","obj","undefined","window","getScroll","target","top","_a","_b","method","result","Document","documentElement","HTMLElement","ownerDocument"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/antd/es/_util/getScroll.js"],"sourcesContent":["export function isWindow(obj) {\n  return obj !== null && obj !== undefined && obj === obj.window;\n}\nexport default function getScroll(target, top) {\n  var _a, _b;\n  if (typeof window === 'undefined') {\n    return 0;\n  }\n  const method = top ? 'scrollTop' : 'scrollLeft';\n  let result = 0;\n  if (isWindow(target)) {\n    result = target[top ? 'pageYOffset' : 'pageXOffset'];\n  } else if (target instanceof Document) {\n    result = target.documentElement[method];\n  } else if (target instanceof HTMLElement) {\n    result = target[method];\n  } else if (target) {\n    // According to the type inference, the `target` is `never` type.\n    // Since we configured the loose mode type checking, and supports mocking the target with such shape below::\n    //    `{ documentElement: { scrollLeft: 200, scrollTop: 400 } }`,\n    //    the program may falls into this branch.\n    // Check the corresponding tests for details. Don't sure what is the real scenario this happens.\n    result = target[method];\n  }\n  if (target && !isWindow(target) && typeof result !== 'number') {\n    result = (_b = ((_a = target.ownerDocument) !== null && _a !== void 0 ? _a : target).documentElement) === null || _b === void 0 ? void 0 : _b[method];\n  }\n  return result;\n}"],"mappings":"AAAA,MAAO,SAAS,CAAAA,QAAQA,CAACC,GAAG,CAAE,CAC5B,MAAO,CAAAA,GAAG,GAAK,IAAI,EAAIA,GAAG,GAAKC,SAAS,EAAID,GAAG,GAAKA,GAAG,CAACE,MAAM,CAChE,CACA,cAAe,SAAS,CAAAC,SAASA,CAACC,MAAM,CAAEC,GAAG,CAAE,CAC7C,GAAI,CAAAC,EAAE,CAAEC,EAAE,CACV,GAAI,MAAO,CAAAL,MAAM,GAAK,WAAW,CAAE,CACjC,MAAO,EAAC,CACV,CACA,KAAM,CAAAM,MAAM,CAAGH,GAAG,CAAG,WAAW,CAAG,YAAY,CAC/C,GAAI,CAAAI,MAAM,CAAG,CAAC,CACd,GAAIV,QAAQ,CAACK,MAAM,CAAC,CAAE,CACpBK,MAAM,CAAGL,MAAM,CAACC,GAAG,CAAG,aAAa,CAAG,aAAa,CAAC,CACtD,CAAC,IAAM,IAAID,MAAM,WAAY,CAAAM,QAAQ,CAAE,CACrCD,MAAM,CAAGL,MAAM,CAACO,eAAe,CAACH,MAAM,CAAC,CACzC,CAAC,IAAM,IAAIJ,MAAM,WAAY,CAAAQ,WAAW,CAAE,CACxCH,MAAM,CAAGL,MAAM,CAACI,MAAM,CAAC,CACzB,CAAC,IAAM,IAAIJ,MAAM,CAAE,CACjB;AACA;AACA;AACA;AACA;AACAK,MAAM,CAAGL,MAAM,CAACI,MAAM,CAAC,CACzB,CACA,GAAIJ,MAAM,EAAI,CAACL,QAAQ,CAACK,MAAM,CAAC,EAAI,MAAO,CAAAK,MAAM,GAAK,QAAQ,CAAE,CAC7DA,MAAM,CAAG,CAACF,EAAE,CAAG,CAAC,CAACD,EAAE,CAAGF,MAAM,CAACS,aAAa,IAAM,IAAI,EAAIP,EAAE,GAAK,IAAK,EAAC,CAAGA,EAAE,CAAGF,MAAM,EAAEO,eAAe,IAAM,IAAI,EAAIJ,EAAE,GAAK,IAAK,EAAC,CAAG,IAAK,EAAC,CAAGA,EAAE,CAACC,MAAM,CAAC,CACvJ,CACA,MAAO,CAAAC,MAAM,CACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}