{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { supportRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\n/**\n * Create Immutable pair for `makeImmutable` and `responseImmutable`.\n */\nexport default function createImmutable() {\n  var _s = $RefreshSig$();\n  var ImmutableContext = /*#__PURE__*/React.createContext(null);\n\n  /**\n   * Get render update mark by `makeImmutable` root.\n   * Do not deps on the return value as render times\n   * but only use for `useMemo` or `useCallback` deps.\n   */\n  function useImmutableMark() {\n    _s();\n    return React.useContext(ImmutableContext);\n  }\n\n  /**\n  * Wrapped Component will be marked as Immutable.\n  * When Component parent trigger render,\n  * it will notice children component (use with `responseImmutable`) node that parent has updated.\n  * @param Component Passed Component\n  * @param triggerRender Customize trigger `responseImmutable` children re-render logic. Default will always trigger re-render when this component re-render.\n  */\n  _s(useImmutableMark, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n  function makeImmutable(Component, shouldTriggerRender) {\n    var _s2 = $RefreshSig$();\n    var refAble = supportRef(Component);\n    var ImmutableComponent = function ImmutableComponent(props, ref) {\n      _s2();\n      var refProps = refAble ? {\n        ref: ref\n      } : {};\n      var renderTimesRef = React.useRef(0);\n      var prevProps = React.useRef(props);\n\n      // If parent has the context, we do not wrap it\n      var mark = useImmutableMark();\n      if (mark !== null) {\n        return /*#__PURE__*/React.createElement(Component, _extends({}, props, refProps));\n      }\n      if (\n      // Always trigger re-render if not provide `notTriggerRender`\n      !shouldTriggerRender || shouldTriggerRender(prevProps.current, props)) {\n        renderTimesRef.current += 1;\n      }\n      prevProps.current = props;\n      return /*#__PURE__*/React.createElement(ImmutableContext.Provider, {\n        value: renderTimesRef.current\n      }, /*#__PURE__*/React.createElement(Component, _extends({}, props, refProps)));\n    };\n    _s2(ImmutableComponent, \"Q4pV4DVJus9CVy4/5WpztmLVFpI=\", false, function () {\n      return [useImmutableMark];\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      ImmutableComponent.displayName = \"ImmutableRoot(\".concat(Component.displayName || Component.name, \")\");\n    }\n    return refAble ? /*#__PURE__*/React.forwardRef(ImmutableComponent) : ImmutableComponent;\n  }\n\n  /**\n   * Wrapped Component with `React.memo`.\n   * But will rerender when parent with `makeImmutable` rerender.\n   */\n  function responseImmutable(Component, propsAreEqual) {\n    var _s3 = $RefreshSig$();\n    var refAble = supportRef(Component);\n    var ImmutableComponent = function ImmutableComponent(props, ref) {\n      _s3();\n      var refProps = refAble ? {\n        ref: ref\n      } : {};\n      useImmutableMark();\n      return /*#__PURE__*/React.createElement(Component, _extends({}, props, refProps));\n    };\n    _s3(ImmutableComponent, \"xxuO+nXfHvxp/DjXnQ2Zo4xQhtc=\", false, function () {\n      return [useImmutableMark];\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      ImmutableComponent.displayName = \"ImmutableResponse(\".concat(Component.displayName || Component.name, \")\");\n    }\n    return refAble ? /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(ImmutableComponent), propsAreEqual) : /*#__PURE__*/React.memo(ImmutableComponent, propsAreEqual);\n  }\n  return {\n    makeImmutable: makeImmutable,\n    responseImmutable: responseImmutable,\n    useImmutableMark: useImmutableMark\n  };\n}","map":{"version":3,"names":["_extends","supportRef","React","createImmutable","_s","$RefreshSig$","ImmutableContext","createContext","useImmutableMark","useContext","makeImmutable","Component","shouldTriggerRender","_s2","refAble","ImmutableComponent","props","ref","refProps","renderTimesRef","useRef","prevProps","mark","createElement","current","Provider","value","process","env","NODE_ENV","displayName","concat","name","forwardRef","responseImmutable","propsAreEqual","_s3","memo"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/@rc-component/context/es/Immutable.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { supportRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\n/**\n * Create Immutable pair for `makeImmutable` and `responseImmutable`.\n */\nexport default function createImmutable() {\n  var ImmutableContext = /*#__PURE__*/React.createContext(null);\n\n  /**\n   * Get render update mark by `makeImmutable` root.\n   * Do not deps on the return value as render times\n   * but only use for `useMemo` or `useCallback` deps.\n   */\n  function useImmutableMark() {\n    return React.useContext(ImmutableContext);\n  }\n\n  /**\n  * Wrapped Component will be marked as Immutable.\n  * When Component parent trigger render,\n  * it will notice children component (use with `responseImmutable`) node that parent has updated.\n  * @param Component Passed Component\n  * @param triggerRender Customize trigger `responseImmutable` children re-render logic. Default will always trigger re-render when this component re-render.\n  */\n  function makeImmutable(Component, shouldTriggerRender) {\n    var refAble = supportRef(Component);\n    var ImmutableComponent = function ImmutableComponent(props, ref) {\n      var refProps = refAble ? {\n        ref: ref\n      } : {};\n      var renderTimesRef = React.useRef(0);\n      var prevProps = React.useRef(props);\n\n      // If parent has the context, we do not wrap it\n      var mark = useImmutableMark();\n      if (mark !== null) {\n        return /*#__PURE__*/React.createElement(Component, _extends({}, props, refProps));\n      }\n      if (\n      // Always trigger re-render if not provide `notTriggerRender`\n      !shouldTriggerRender || shouldTriggerRender(prevProps.current, props)) {\n        renderTimesRef.current += 1;\n      }\n      prevProps.current = props;\n      return /*#__PURE__*/React.createElement(ImmutableContext.Provider, {\n        value: renderTimesRef.current\n      }, /*#__PURE__*/React.createElement(Component, _extends({}, props, refProps)));\n    };\n    if (process.env.NODE_ENV !== 'production') {\n      ImmutableComponent.displayName = \"ImmutableRoot(\".concat(Component.displayName || Component.name, \")\");\n    }\n    return refAble ? /*#__PURE__*/React.forwardRef(ImmutableComponent) : ImmutableComponent;\n  }\n\n  /**\n   * Wrapped Component with `React.memo`.\n   * But will rerender when parent with `makeImmutable` rerender.\n   */\n  function responseImmutable(Component, propsAreEqual) {\n    var refAble = supportRef(Component);\n    var ImmutableComponent = function ImmutableComponent(props, ref) {\n      var refProps = refAble ? {\n        ref: ref\n      } : {};\n      useImmutableMark();\n      return /*#__PURE__*/React.createElement(Component, _extends({}, props, refProps));\n    };\n    if (process.env.NODE_ENV !== 'production') {\n      ImmutableComponent.displayName = \"ImmutableResponse(\".concat(Component.displayName || Component.name, \")\");\n    }\n    return refAble ? /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(ImmutableComponent), propsAreEqual) : /*#__PURE__*/React.memo(ImmutableComponent, propsAreEqual);\n  }\n  return {\n    makeImmutable: makeImmutable,\n    responseImmutable: responseImmutable,\n    useImmutableMark: useImmutableMark\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}