{"ast":null,"code":"import _typeof from\"@babel/runtime/helpers/esm/typeof\";import warning from\"rc-util/es/warning\";import{toArray}from\"./valueUtil\";function warningProps(props){var searchPlaceholder=props.searchPlaceholder,treeCheckStrictly=props.treeCheckStrictly,treeCheckable=props.treeCheckable,labelInValue=props.labelInValue,value=props.value,multiple=props.multiple;warning(!searchPlaceholder,'`searchPlaceholder` has been removed.');if(treeCheckStrictly&&labelInValue===false){warning(false,'`treeCheckStrictly` will force set `labelInValue` to `true`.');}if(labelInValue||treeCheckStrictly){warning(toArray(value).every(function(val){return val&&_typeof(val)==='object'&&'value'in val;}),'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');}if(treeCheckStrictly||multiple||treeCheckable){warning(!value||Array.isArray(value),'`value` should be an array when `TreeSelect` is checkable or multiple.');}else{warning(!Array.isArray(value),'`value` should not be array when `TreeSelect` is single mode.');}}export default warningProps;","map":{"version":3,"names":["_typeof","warning","toArray","warningProps","props","searchPlaceholder","treeCheckStrictly","treeCheckable","labelInValue","value","multiple","every","val","Array","isArray"],"sources":["/Users/jmmallon/Downloads/js/ticketproject/src/node_modules/rc-tree-select/es/utils/warningPropsUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport warning from \"rc-util/es/warning\";\nimport { toArray } from \"./valueUtil\";\nfunction warningProps(props) {\n  var searchPlaceholder = props.searchPlaceholder,\n    treeCheckStrictly = props.treeCheckStrictly,\n    treeCheckable = props.treeCheckable,\n    labelInValue = props.labelInValue,\n    value = props.value,\n    multiple = props.multiple;\n  warning(!searchPlaceholder, '`searchPlaceholder` has been removed.');\n  if (treeCheckStrictly && labelInValue === false) {\n    warning(false, '`treeCheckStrictly` will force set `labelInValue` to `true`.');\n  }\n  if (labelInValue || treeCheckStrictly) {\n    warning(toArray(value).every(function (val) {\n      return val && _typeof(val) === 'object' && 'value' in val;\n    }), 'Invalid prop `value` supplied to `TreeSelect`. You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.');\n  }\n  if (treeCheckStrictly || multiple || treeCheckable) {\n    warning(!value || Array.isArray(value), '`value` should be an array when `TreeSelect` is checkable or multiple.');\n  } else {\n    warning(!Array.isArray(value), '`value` should not be array when `TreeSelect` is single mode.');\n  }\n}\nexport default warningProps;"],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,mCAAmC,CACvD,MAAO,CAAAC,OAAO,KAAM,oBAAoB,CACxC,OAASC,OAAO,KAAQ,aAAa,CACrC,QAAS,CAAAC,YAAYA,CAACC,KAAK,CAAE,CAC3B,GAAI,CAAAC,iBAAiB,CAAGD,KAAK,CAACC,iBAAiB,CAC7CC,iBAAiB,CAAGF,KAAK,CAACE,iBAAiB,CAC3CC,aAAa,CAAGH,KAAK,CAACG,aAAa,CACnCC,YAAY,CAAGJ,KAAK,CAACI,YAAY,CACjCC,KAAK,CAAGL,KAAK,CAACK,KAAK,CACnBC,QAAQ,CAAGN,KAAK,CAACM,QAAQ,CAC3BT,OAAO,CAAC,CAACI,iBAAiB,CAAE,uCAAuC,CAAC,CACpE,GAAIC,iBAAiB,EAAIE,YAAY,GAAK,KAAK,CAAE,CAC/CP,OAAO,CAAC,KAAK,CAAE,8DAA8D,CAAC,CAChF,CACA,GAAIO,YAAY,EAAIF,iBAAiB,CAAE,CACrCL,OAAO,CAACC,OAAO,CAACO,KAAK,CAAC,CAACE,KAAK,CAAC,SAAUC,GAAG,CAAE,CAC1C,MAAO,CAAAA,GAAG,EAAIZ,OAAO,CAACY,GAAG,CAAC,GAAK,QAAQ,EAAI,OAAO,EAAI,CAAAA,GAAG,CAC3D,CAAC,CAAC,CAAE,iKAAiK,CAAC,CACxK,CACA,GAAIN,iBAAiB,EAAII,QAAQ,EAAIH,aAAa,CAAE,CAClDN,OAAO,CAAC,CAACQ,KAAK,EAAII,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,CAAE,wEAAwE,CAAC,CACnH,CAAC,IAAM,CACLR,OAAO,CAAC,CAACY,KAAK,CAACC,OAAO,CAACL,KAAK,CAAC,CAAE,+DAA+D,CAAC,CACjG,CACF,CACA,cAAe,CAAAN,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}